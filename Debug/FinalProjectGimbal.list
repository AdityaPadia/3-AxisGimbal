
FinalProjectGimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007594  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08007780  08007780  00017780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008200  08008200  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  08008200  08008200  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008200  08008200  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08008208  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000270  08008474  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08008474  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009222  00000000  00000000  00020295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad6  00000000  00000000  000294b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a994  00000000  00000000  0002c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9b8  00000000  00000000  00046bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009699d  00000000  00000000  0005258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  000e8f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000270 	.word	0x20000270
 8000204:	00000000 	.word	0x00000000
 8000208:	08007764 	.word	0x08007764

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000274 	.word	0x20000274
 8000224:	08007764 	.word	0x08007764

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	e002      	b.n	8000c10 <Delay+0x10>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f9      	bne.n	8000c0a <Delay+0xa>
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 f829 	bl	8000c80 <LCD_BackLed_Control>
	LCD_Rst();
 8000c2e:	f000 f80f 	bl	8000c50 <LCD_Rst>
	LCD_REG_Config();
 8000c32:	f000 f85f 	bl	8000cf4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c40:	22f0      	movs	r2, #240	; 0xf0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f9e6 	bl	8001016 <LCD_Clear>
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2102      	movs	r1, #2
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <LCD_Rst+0x28>)
 8000c5a:	f001 fdff 	bl	800285c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <LCD_Rst+0x2c>)
 8000c60:	f7ff ffce 	bl	8000c00 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2102      	movs	r1, #2
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <LCD_Rst+0x28>)
 8000c6a:	f001 fdf7 	bl	800285c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <LCD_Rst+0x2c>)
 8000c70:	f7ff ffc6 	bl	8000c00 <Delay>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40011800 	.word	0x40011800
 8000c7c:	0002bffc 	.word	0x0002bffc

08000c80 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <LCD_BackLed_Control+0x34>)
 8000c98:	f001 fde0 	bl	800285c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000c9c:	e005      	b.n	8000caa <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <LCD_BackLed_Control+0x34>)
 8000ca6:	f001 fdd9 	bl	800285c <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40011400 	.word	0x40011400

08000cb8 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cc2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	8013      	strh	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <LCD_Write_Data+0x1c>)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	8013      	strh	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	60020000 	.word	0x60020000

08000cf4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000cf8:	20cf      	movs	r0, #207	; 0xcf
 8000cfa:	f7ff ffdd 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ffe8 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000d04:	2081      	movs	r0, #129	; 0x81
 8000d06:	f7ff ffe5 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000d0a:	2030      	movs	r0, #48	; 0x30
 8000d0c:	f7ff ffe2 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000d10:	20ed      	movs	r0, #237	; 0xed
 8000d12:	f7ff ffd1 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f7ff ffdc 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff ffd9 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000d22:	2012      	movs	r0, #18
 8000d24:	f7ff ffd6 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000d28:	2081      	movs	r0, #129	; 0x81
 8000d2a:	f7ff ffd3 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000d2e:	20e8      	movs	r0, #232	; 0xe8
 8000d30:	f7ff ffc2 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000d34:	2085      	movs	r0, #133	; 0x85
 8000d36:	f7ff ffcd 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000d3a:	2010      	movs	r0, #16
 8000d3c:	f7ff ffca 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f7ff ffc7 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000d46:	20cb      	movs	r0, #203	; 0xcb
 8000d48:	f7ff ffb6 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000d4c:	2039      	movs	r0, #57	; 0x39
 8000d4e:	f7ff ffc1 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000d52:	202c      	movs	r0, #44	; 0x2c
 8000d54:	f7ff ffbe 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff ffbb 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000d5e:	2034      	movs	r0, #52	; 0x34
 8000d60:	f7ff ffb8 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000d64:	2002      	movs	r0, #2
 8000d66:	f7ff ffb5 	bl	8000cd4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000d6a:	20f7      	movs	r0, #247	; 0xf7
 8000d6c:	f7ff ffa4 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000d70:	2020      	movs	r0, #32
 8000d72:	f7ff ffaf 	bl	8000cd4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000d76:	20ea      	movs	r0, #234	; 0xea
 8000d78:	f7ff ff9e 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ffa9 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff ffa6 	bl	8000cd4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000d88:	20b1      	movs	r0, #177	; 0xb1
 8000d8a:	f7ff ff95 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff ffa0 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000d94:	201b      	movs	r0, #27
 8000d96:	f7ff ff9d 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000d9a:	20b6      	movs	r0, #182	; 0xb6
 8000d9c:	f7ff ff8c 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000da0:	200a      	movs	r0, #10
 8000da2:	f7ff ff97 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000da6:	20a2      	movs	r0, #162	; 0xa2
 8000da8:	f7ff ff94 	bl	8000cd4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000dac:	20c0      	movs	r0, #192	; 0xc0
 8000dae:	f7ff ff83 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000db2:	2035      	movs	r0, #53	; 0x35
 8000db4:	f7ff ff8e 	bl	8000cd4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000db8:	20c1      	movs	r0, #193	; 0xc1
 8000dba:	f7ff ff7d 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000dbe:	2011      	movs	r0, #17
 8000dc0:	f7ff ff88 	bl	8000cd4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000dc4:	20c5      	movs	r0, #197	; 0xc5
 8000dc6:	f7ff ff77 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000dca:	2045      	movs	r0, #69	; 0x45
 8000dcc:	f7ff ff82 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000dd0:	2045      	movs	r0, #69	; 0x45
 8000dd2:	f7ff ff7f 	bl	8000cd4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000dd6:	20c7      	movs	r0, #199	; 0xc7
 8000dd8:	f7ff ff6e 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000ddc:	20a2      	movs	r0, #162	; 0xa2
 8000dde:	f7ff ff79 	bl	8000cd4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000de2:	20f2      	movs	r0, #242	; 0xf2
 8000de4:	f7ff ff68 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff ff73 	bl	8000cd4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000dee:	2026      	movs	r0, #38	; 0x26
 8000df0:	f7ff ff62 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff ff6d 	bl	8000cd4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000dfa:	20e0      	movs	r0, #224	; 0xe0
 8000dfc:	f7ff ff5c 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000e00:	200f      	movs	r0, #15
 8000e02:	f7ff ff67 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000e06:	2026      	movs	r0, #38	; 0x26
 8000e08:	f7ff ff64 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000e0c:	2024      	movs	r0, #36	; 0x24
 8000e0e:	f7ff ff61 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000e12:	200b      	movs	r0, #11
 8000e14:	f7ff ff5e 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000e18:	200e      	movs	r0, #14
 8000e1a:	f7ff ff5b 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000e1e:	2009      	movs	r0, #9
 8000e20:	f7ff ff58 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000e24:	2054      	movs	r0, #84	; 0x54
 8000e26:	f7ff ff55 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000e2a:	20a8      	movs	r0, #168	; 0xa8
 8000e2c:	f7ff ff52 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000e30:	2046      	movs	r0, #70	; 0x46
 8000e32:	f7ff ff4f 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000e36:	200c      	movs	r0, #12
 8000e38:	f7ff ff4c 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000e3c:	2017      	movs	r0, #23
 8000e3e:	f7ff ff49 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000e42:	2009      	movs	r0, #9
 8000e44:	f7ff ff46 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e48:	200f      	movs	r0, #15
 8000e4a:	f7ff ff43 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f7ff ff40 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff ff3d 	bl	8000cd4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000e5a:	20e1      	movs	r0, #225	; 0xe1
 8000e5c:	f7ff ff2c 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ff37 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000e66:	2019      	movs	r0, #25
 8000e68:	f7ff ff34 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000e6c:	201b      	movs	r0, #27
 8000e6e:	f7ff ff31 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000e72:	2004      	movs	r0, #4
 8000e74:	f7ff ff2e 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000e78:	2010      	movs	r0, #16
 8000e7a:	f7ff ff2b 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e7e:	2007      	movs	r0, #7
 8000e80:	f7ff ff28 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000e84:	202a      	movs	r0, #42	; 0x2a
 8000e86:	f7ff ff25 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000e8a:	2047      	movs	r0, #71	; 0x47
 8000e8c:	f7ff ff22 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000e90:	2039      	movs	r0, #57	; 0x39
 8000e92:	f7ff ff1f 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000e96:	2003      	movs	r0, #3
 8000e98:	f7ff ff1c 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e9c:	2006      	movs	r0, #6
 8000e9e:	f7ff ff19 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	f7ff ff16 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000ea8:	2030      	movs	r0, #48	; 0x30
 8000eaa:	f7ff ff13 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000eae:	2038      	movs	r0, #56	; 0x38
 8000eb0:	f7ff ff10 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f7ff ff0d 	bl	8000cd4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000eba:	2036      	movs	r0, #54	; 0x36
 8000ebc:	f7ff fefc 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000ec0:	20c8      	movs	r0, #200	; 0xc8
 8000ec2:	f7ff ff07 	bl	8000cd4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000ec6:	202a      	movs	r0, #42	; 0x2a
 8000ec8:	f7ff fef6 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff ff01 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fefe 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fefb 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000ede:	20ef      	movs	r0, #239	; 0xef
 8000ee0:	f7ff fef8 	bl	8000cd4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000ee4:	202b      	movs	r0, #43	; 0x2b
 8000ee6:	f7ff fee7 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fef2 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff feef 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff feec 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000efc:	203f      	movs	r0, #63	; 0x3f
 8000efe:	f7ff fee9 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000f02:	203a      	movs	r0, #58	; 0x3a
 8000f04:	f7ff fed8 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000f08:	2055      	movs	r0, #85	; 0x55
 8000f0a:	f7ff fee3 	bl	8000cd4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000f0e:	2011      	movs	r0, #17
 8000f10:	f7ff fed2 	bl	8000cb8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <LCD_REG_Config+0x230>)
 8000f16:	f7ff fe73 	bl	8000c00 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000f1a:	2029      	movs	r0, #41	; 0x29
 8000f1c:	f7ff fecc 	bl	8000cb8 <LCD_Write_Cmd>
	
	
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0002bffc 	.word	0x0002bffc

08000f28 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000f46:	202a      	movs	r0, #42	; 0x2a
 8000f48:	f7ff feb6 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff febe 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff feb8 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	121b      	asrs	r3, r3, #8
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff feaf 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000f76:	88fa      	ldrh	r2, [r7, #6]
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fea4 	bl	8000cd4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000f8c:	202b      	movs	r0, #43	; 0x2b
 8000f8e:	f7ff fe93 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe9b 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe95 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	883b      	ldrh	r3, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	121b      	asrs	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fe8c 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000fbc:	88ba      	ldrh	r2, [r7, #4]
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe81 	bl	8000cd4 <LCD_Write_Data>
	
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}

08000fda <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fea:	202c      	movs	r0, #44	; 0x2c
 8000fec:	f7ff fe64 	bl	8000cb8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e006      	b.n	8001004 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe6b 	bl	8000cd4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f4      	bcc.n	8000ff6 <LCD_FillColor+0x1c>
		
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001016:	b590      	push	{r4, r7, lr}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	4604      	mov	r4, r0
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	461a      	mov	r2, r3
 8001024:	4623      	mov	r3, r4
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	4603      	mov	r3, r0
 800102a:	80bb      	strh	r3, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001034:	883b      	ldrh	r3, [r7, #0]
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f7ff ff74 	bl	8000f28 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	883a      	ldrh	r2, [r7, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	461a      	mov	r2, r3
 800104a:	8b3b      	ldrh	r3, [r7, #24]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ffc3 	bl	8000fda <LCD_FillColor>
	
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}

0800105c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	460b      	mov	r3, r1
 8001068:	80bb      	strh	r3, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	3b20      	subs	r3, #32
 8001072:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001074:	88b9      	ldrh	r1, [r7, #4]
 8001076:	88f8      	ldrh	r0, [r7, #6]
 8001078:	2310      	movs	r3, #16
 800107a:	2208      	movs	r2, #8
 800107c:	f7ff ff54 	bl	8000f28 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001080:	202c      	movs	r0, #44	; 0x2c
 8001082:	f7ff fe19 	bl	8000cb8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001086:	2300      	movs	r3, #0
 8001088:	73bb      	strb	r3, [r7, #14]
 800108a:	e023      	b.n	80010d4 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800108c:	7b3a      	ldrb	r2, [r7, #12]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4914      	ldr	r1, [pc, #80]	; (80010e4 <LCD_DrawChar+0x88>)
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	440a      	add	r2, r1
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800109c:	2300      	movs	r3, #0
 800109e:	737b      	strb	r3, [r7, #13]
 80010a0:	e012      	b.n	80010c8 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80010ac:	201f      	movs	r0, #31
 80010ae:	f7ff fe11 	bl	8000cd4 <LCD_Write_Data>
 80010b2:	e003      	b.n	80010bc <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80010b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010b8:	f7ff fe0c 	bl	8000cd4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	085b      	lsrs	r3, r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	3301      	adds	r3, #1
 80010c6:	737b      	strb	r3, [r7, #13]
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d9e9      	bls.n	80010a2 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d9d8      	bls.n	800108c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	080077ac 	.word	0x080077ac

080010e8 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	603a      	str	r2, [r7, #0]
 80010f2:	80fb      	strh	r3, [r7, #6]
 80010f4:	460b      	mov	r3, r1
 80010f6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80010f8:	e01c      	b.n	8001134 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	2be8      	cmp	r3, #232	; 0xe8
 80010fe:	d904      	bls.n	800110a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001100:	2300      	movs	r3, #0
 8001102:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	3310      	adds	r3, #16
 8001108:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001110:	d903      	bls.n	800111a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001112:	2300      	movs	r3, #0
 8001114:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001116:	2300      	movs	r3, #0
 8001118:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	88b9      	ldrh	r1, [r7, #4]
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff9a 	bl	800105c <LCD_DrawChar>
		
		pStr ++;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	3308      	adds	r3, #8
 8001132:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1de      	bne.n	80010fa <LCD_DrawString+0x12>
		
	}
	
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MPU6050_Init>:
double KalmanAngleX;
double KalmanAngleY;
double KalmanAngleZ;

void MPU6050_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2275      	movs	r2, #117	; 0x75
 8001160:	21d0      	movs	r1, #208	; 0xd0
 8001162:	4823      	ldr	r0, [pc, #140]	; (80011f0 <MPU6050_Init+0xa8>)
 8001164:	f001 fdd0 	bl	8002d08 <HAL_I2C_Mem_Read>

	if (check == 104) // If the device is present
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b68      	cmp	r3, #104	; 0x68
 800116c:	d13b      	bne.n	80011e6 <MPU6050_Init+0x9e>
	{
		//Waking the sensor up
		data = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	226b      	movs	r2, #107	; 0x6b
 8001184:	21d0      	movs	r1, #208	; 0xd0
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <MPU6050_Init+0xa8>)
 8001188:	f001 fcc4 	bl	8002b14 <HAL_I2C_Mem_Write>


		//Setting Data Rate to 1KHz by writing SMPRT_DIV register
		data = 0x07;
 800118c:	2307      	movs	r3, #7
 800118e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	1dbb      	adds	r3, r7, #6
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2219      	movs	r2, #25
 80011a2:	21d0      	movs	r1, #208	; 0xd0
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MPU6050_Init+0xa8>)
 80011a6:	f001 fcb5 	bl	8002b14 <HAL_I2C_Mem_Write>


		//Setting accelerometer configuration
		//XA_ST=0, YA_ST=0,ST=0,FS_SEL = 0 -> +-2g
		data = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	1dbb      	adds	r3, r7, #6
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	221c      	movs	r2, #28
 80011c0:	21d0      	movs	r1, #208	; 0xd0
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <MPU6050_Init+0xa8>)
 80011c4:	f001 fca6 	bl	8002b14 <HAL_I2C_Mem_Write>


		//Setting Gyroscope configuration
		//XG_ST=0,YG_ST=0, ZG_ST=0,FS_SEL=0 -> +=250 deg/sec
		data = 0x00;
 80011c8:	2300      	movs	r3, #0
 80011ca:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	221b      	movs	r2, #27
 80011de:	21d0      	movs	r1, #208	; 0xd0
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MPU6050_Init+0xa8>)
 80011e2:	f001 fc97 	bl	8002b14 <HAL_I2C_Mem_Write>
	}
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000028c 	.word	0x2000028c
 80011f4:	00000000 	.word	0x00000000

080011f8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, ACCEL_XOUT_REG, 1, Rec_Data, 6, 1000);
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2306      	movs	r3, #6
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	463b      	mov	r3, r7
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	223b      	movs	r2, #59	; 0x3b
 8001210:	21d0      	movs	r1, #208	; 0xd0
 8001212:	4831      	ldr	r0, [pc, #196]	; (80012d8 <MPU6050_Read_Accel+0xe0>)
 8001214:	f001 fd78 	bl	8002d08 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001218:	783b      	ldrb	r3, [r7, #0]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	787b      	ldrb	r3, [r7, #1]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MPU6050_Read_Accel+0xe4>)
 8001228:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800122a:	78bb      	ldrb	r3, [r7, #2]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MPU6050_Read_Accel+0xe8>)
 800123a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	797b      	ldrb	r3, [r7, #5]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21a      	sxth	r2, r3
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MPU6050_Read_Accel+0xec>)
 800124c:	801a      	strh	r2, [r3, #0]

	// Converting RAW values into acceleration in g
	// We have to divide according to the Full scale value set in FS_SEL

	Ax = Accel_X_RAW/16484.0;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MPU6050_Read_Accel+0xe4>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f941 	bl	80004dc <__aeabi_i2d>
 800125a:	a31d      	add	r3, pc, #116	; (adr r3, 80012d0 <MPU6050_Read_Accel+0xd8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fad0 	bl	8000804 <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc78 	bl	8000b60 <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <MPU6050_Read_Accel+0xf0>)
 8001274:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16484.0;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MPU6050_Read_Accel+0xe8>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f92d 	bl	80004dc <__aeabi_i2d>
 8001282:	a313      	add	r3, pc, #76	; (adr r3, 80012d0 <MPU6050_Read_Accel+0xd8>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff fabc 	bl	8000804 <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fc64 	bl	8000b60 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <MPU6050_Read_Accel+0xf4>)
 800129c:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16484.0;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MPU6050_Read_Accel+0xec>)
 80012a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f919 	bl	80004dc <__aeabi_i2d>
 80012aa:	a309      	add	r3, pc, #36	; (adr r3, 80012d0 <MPU6050_Read_Accel+0xd8>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff faa8 	bl	8000804 <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc50 	bl	8000b60 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <MPU6050_Read_Accel+0xf8>)
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40d01900 	.word	0x40d01900
 80012d8:	2000028c 	.word	0x2000028c
 80012dc:	20000328 	.word	0x20000328
 80012e0:	2000032a 	.word	0x2000032a
 80012e4:	2000032c 	.word	0x2000032c
 80012e8:	20000334 	.word	0x20000334
 80012ec:	20000338 	.word	0x20000338
 80012f0:	2000033c 	.word	0x2000033c
 80012f4:	00000000 	.word	0x00000000

080012f8 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2306      	movs	r3, #6
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	463b      	mov	r3, r7
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	2243      	movs	r2, #67	; 0x43
 8001310:	21d0      	movs	r1, #208	; 0xd0
 8001312:	4831      	ldr	r0, [pc, #196]	; (80013d8 <MPU6050_Read_Gyro+0xe0>)
 8001314:	f001 fcf8 	bl	8002d08 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001318:	783b      	ldrb	r3, [r7, #0]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	787b      	ldrb	r3, [r7, #1]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MPU6050_Read_Gyro+0xe4>)
 8001328:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <MPU6050_Read_Gyro+0xe8>)
 800133a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800133c:	793b      	ldrb	r3, [r7, #4]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <MPU6050_Read_Gyro+0xec>)
 800134c:	801a      	strh	r2, [r3, #0]

	//Converting RAW  values to degree per second
	// We have to divide according to the full scale value set in FS_SEL

	Gx = Gyro_X_RAW/131.0;
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MPU6050_Read_Gyro+0xe4>)
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8c1 	bl	80004dc <__aeabi_i2d>
 800135a:	a31d      	add	r3, pc, #116	; (adr r3, 80013d0 <MPU6050_Read_Gyro+0xd8>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff fa50 	bl	8000804 <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fbf8 	bl	8000b60 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <MPU6050_Read_Gyro+0xf0>)
 8001374:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MPU6050_Read_Gyro+0xe8>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8ad 	bl	80004dc <__aeabi_i2d>
 8001382:	a313      	add	r3, pc, #76	; (adr r3, 80013d0 <MPU6050_Read_Gyro+0xd8>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fa3c 	bl	8000804 <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fbe4 	bl	8000b60 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <MPU6050_Read_Gyro+0xf4>)
 800139c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MPU6050_Read_Gyro+0xec>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f899 	bl	80004dc <__aeabi_i2d>
 80013aa:	a309      	add	r3, pc, #36	; (adr r3, 80013d0 <MPU6050_Read_Gyro+0xd8>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa28 	bl	8000804 <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fbd0 	bl	8000b60 <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <MPU6050_Read_Gyro+0xf8>)
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40606000 	.word	0x40606000
 80013d8:	2000028c 	.word	0x2000028c
 80013dc:	2000032e 	.word	0x2000032e
 80013e0:	20000330 	.word	0x20000330
 80013e4:	20000332 	.word	0x20000332
 80013e8:	20000340 	.word	0x20000340
 80013ec:	20000344 	.word	0x20000344
 80013f0:	20000348 	.word	0x20000348

080013f4 <Kalman_getAngle>:
		Gyro_Z_Error = Gyro_Z_Error/131.0;

}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b092      	sub	sp, #72	; 0x48
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001406:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800140a:	f7fe ff19 	bl	8000240 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800141c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001424:	f7ff f8c4 	bl	80005b0 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe ff08 	bl	8000244 <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800144a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800144e:	f7ff f8af 	bl	80005b0 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001460:	f7fe feee 	bl	8000240 <__aeabi_dsub>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001472:	f7fe fee5 	bl	8000240 <__aeabi_dsub>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fede 	bl	8000244 <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001494:	f7ff f88c 	bl	80005b0 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7fe fed0 	bl	8000244 <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	68f9      	ldr	r1, [r7, #12]
 80014aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014be:	f7ff f877 	bl	80005b0 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7fe feb9 	bl	8000240 <__aeabi_dsub>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014e8:	f7ff f862 	bl	80005b0 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fea4 	bl	8000240 <__aeabi_dsub>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800150e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001512:	f7ff f84d 	bl	80005b0 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fe91 	bl	8000244 <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001538:	f7fe fe84 	bl	8000244 <__adddf3>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800154a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800154e:	f7ff f959 	bl	8000804 <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001564:	f7ff f94e 	bl	8000804 <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800157a:	f7fe fe61 	bl	8000240 <__aeabi_dsub>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800158c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001594:	f7ff f80c 	bl	80005b0 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7fe fe50 	bl	8000244 <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80015b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015bc:	f7fe fff8 	bl	80005b0 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe3c 	bl	8000244 <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015e6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015f8:	f7fe ffda 	bl	80005b0 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7fe fe1c 	bl	8000240 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800161c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001620:	f7fe ffc6 	bl	80005b0 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fe08 	bl	8000240 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001648:	f7fe ffb2 	bl	80005b0 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fdf4 	bl	8000240 <__aeabi_dsub>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001668:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800166c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001670:	f7fe ff9e 	bl	80005b0 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fde0 	bl	8000240 <__aeabi_dsub>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bdb0      	pop	{r4, r5, r7, pc}
 800169a:	0000      	movs	r0, r0
 800169c:	0000      	movs	r0, r0
	...

080016a0 <MPU6050_Read_All>:



void MPU6050_Read_All()
{
 80016a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016a4:	b092      	sub	sp, #72	; 0x48
 80016a6:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, ACCEL_XOUT_REG, 1, Rec_Data, 6, 1000);
 80016a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	2306      	movs	r3, #6
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	223b      	movs	r2, #59	; 0x3b
 80016bc:	21d0      	movs	r1, #208	; 0xd0
 80016be:	4892      	ldr	r0, [pc, #584]	; (8001908 <MPU6050_Read_All+0x268>)
 80016c0:	f001 fb22 	bl	8002d08 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80016c4:	7a3b      	ldrb	r3, [r7, #8]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	7a7b      	ldrb	r3, [r7, #9]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	4b8e      	ldr	r3, [pc, #568]	; (800190c <MPU6050_Read_All+0x26c>)
 80016d4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80016d6:	7abb      	ldrb	r3, [r7, #10]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b8a      	ldr	r3, [pc, #552]	; (8001910 <MPU6050_Read_All+0x270>)
 80016e6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80016e8:	7b3b      	ldrb	r3, [r7, #12]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b87      	ldr	r3, [pc, #540]	; (8001914 <MPU6050_Read_All+0x274>)
 80016f8:	801a      	strh	r2, [r3, #0]

	// Converting RAW values into acceleration in g
	// We have to divide according to the Full scale value set in FS_SEL

	Ax = Accel_X_RAW/16484.0;
 80016fa:	4b84      	ldr	r3, [pc, #528]	; (800190c <MPU6050_Read_All+0x26c>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe feeb 	bl	80004dc <__aeabi_i2d>
 8001706:	a37a      	add	r3, pc, #488	; (adr r3, 80018f0 <MPU6050_Read_All+0x250>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7ff f87a 	bl	8000804 <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa22 	bl	8000b60 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a7e      	ldr	r2, [pc, #504]	; (8001918 <MPU6050_Read_All+0x278>)
 8001720:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16484.0;
 8001722:	4b7b      	ldr	r3, [pc, #492]	; (8001910 <MPU6050_Read_All+0x270>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fed7 	bl	80004dc <__aeabi_i2d>
 800172e:	a370      	add	r3, pc, #448	; (adr r3, 80018f0 <MPU6050_Read_All+0x250>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7ff f866 	bl	8000804 <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fa0e 	bl	8000b60 <__aeabi_d2f>
 8001744:	4603      	mov	r3, r0
 8001746:	4a75      	ldr	r2, [pc, #468]	; (800191c <MPU6050_Read_All+0x27c>)
 8001748:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16484.0;
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <MPU6050_Read_All+0x274>)
 800174c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fec3 	bl	80004dc <__aeabi_i2d>
 8001756:	a366      	add	r3, pc, #408	; (adr r3, 80018f0 <MPU6050_Read_All+0x250>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7ff f852 	bl	8000804 <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9fa 	bl	8000b60 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4a6c      	ldr	r2, [pc, #432]	; (8001920 <MPU6050_Read_All+0x280>)
 8001770:	6013      	str	r3, [r2, #0]

	uint8_t Rec_Data2[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data2, 6, 1000);
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2306      	movs	r3, #6
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	463b      	mov	r3, r7
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	2243      	movs	r2, #67	; 0x43
 8001784:	21d0      	movs	r1, #208	; 0xd0
 8001786:	4860      	ldr	r0, [pc, #384]	; (8001908 <MPU6050_Read_All+0x268>)
 8001788:	f001 fabe 	bl	8002d08 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data2[0] << 8 | Rec_Data2[1]);
 800178c:	783b      	ldrb	r3, [r7, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	787b      	ldrb	r3, [r7, #1]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b62      	ldr	r3, [pc, #392]	; (8001924 <MPU6050_Read_All+0x284>)
 800179c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data2[2] << 8 | Rec_Data2[3]);
 800179e:	78bb      	ldrb	r3, [r7, #2]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <MPU6050_Read_All+0x288>)
 80017ae:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data2[4] << 8 | Rec_Data2[5]);
 80017b0:	793b      	ldrb	r3, [r7, #4]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	797b      	ldrb	r3, [r7, #5]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b5b      	ldr	r3, [pc, #364]	; (800192c <MPU6050_Read_All+0x28c>)
 80017c0:	801a      	strh	r2, [r3, #0]

	//Converting RAW  values to degree per second
	// We have to divide according to the full scale value set in FS_SEL

	Gx = Gyro_X_RAW/131.0;
 80017c2:	4b58      	ldr	r3, [pc, #352]	; (8001924 <MPU6050_Read_All+0x284>)
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe87 	bl	80004dc <__aeabi_i2d>
 80017ce:	a34a      	add	r3, pc, #296	; (adr r3, 80018f8 <MPU6050_Read_All+0x258>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7ff f816 	bl	8000804 <__aeabi_ddiv>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f9be 	bl	8000b60 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a52      	ldr	r2, [pc, #328]	; (8001930 <MPU6050_Read_All+0x290>)
 80017e8:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 80017ea:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <MPU6050_Read_All+0x288>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe73 	bl	80004dc <__aeabi_i2d>
 80017f6:	a340      	add	r3, pc, #256	; (adr r3, 80018f8 <MPU6050_Read_All+0x258>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7ff f802 	bl	8000804 <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9aa 	bl	8000b60 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4a49      	ldr	r2, [pc, #292]	; (8001934 <MPU6050_Read_All+0x294>)
 8001810:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <MPU6050_Read_All+0x28c>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe5f 	bl	80004dc <__aeabi_i2d>
 800181e:	a336      	add	r3, pc, #216	; (adr r3, 80018f8 <MPU6050_Read_All+0x258>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe ffee 	bl	8000804 <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f996 	bl	8000b60 <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	4a40      	ldr	r2, [pc, #256]	; (8001938 <MPU6050_Read_All+0x298>)
 8001838:	6013      	str	r3, [r2, #0]


	// Kalman Angle Solve
	double dt = (double)(HAL_GetTick() - timer) / 1000;
 800183a:	f000 fd69 	bl	8002310 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <MPU6050_Read_All+0x29c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe38 	bl	80004bc <__aeabi_ui2d>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <MPU6050_Read_All+0x2a0>)
 8001852:	f7fe ffd7 	bl	8000804 <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 800185e:	f000 fd57 	bl	8002310 <HAL_GetTick>
 8001862:	4603      	mov	r3, r0
 8001864:	4a35      	ldr	r2, [pc, #212]	; (800193c <MPU6050_Read_All+0x29c>)
 8001866:	6013      	str	r3, [r2, #0]

	double roll;
	double roll_sqrt = sqrt(Accel_X_RAW * Accel_X_RAW + Accel_Z_RAW * Accel_Z_RAW);
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <MPU6050_Read_All+0x26c>)
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	461a      	mov	r2, r3
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <MPU6050_Read_All+0x26c>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MPU6050_Read_All+0x274>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	4619      	mov	r1, r3
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <MPU6050_Read_All+0x274>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe24 	bl	80004dc <__aeabi_i2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f005 fdbb 	bl	8007416 <sqrt>
 80018a0:	e9c7 0108 	strd	r0, r1, [r7, #32]

	if (roll_sqrt != 0)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018b0:	f7ff f8e6 	bl	8000a80 <__aeabi_dcmpeq>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d144      	bne.n	8001944 <MPU6050_Read_All+0x2a4>
	{
		roll = atan(Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MPU6050_Read_All+0x270>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe0b 	bl	80004dc <__aeabi_i2d>
 80018c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ca:	f7fe ff9b 	bl	8000804 <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f005 fc0f 	bl	80070f8 <atan>
 80018da:	a309      	add	r3, pc, #36	; (adr r3, 8001900 <MPU6050_Read_All+0x260>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe66 	bl	80005b0 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80018ec:	e030      	b.n	8001950 <MPU6050_Read_All+0x2b0>
 80018ee:	bf00      	nop
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40d01900 	.word	0x40d01900
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40606000 	.word	0x40606000
 8001900:	1a63c1f8 	.word	0x1a63c1f8
 8001904:	404ca5dc 	.word	0x404ca5dc
 8001908:	2000028c 	.word	0x2000028c
 800190c:	20000328 	.word	0x20000328
 8001910:	2000032a 	.word	0x2000032a
 8001914:	2000032c 	.word	0x2000032c
 8001918:	20000334 	.word	0x20000334
 800191c:	20000338 	.word	0x20000338
 8001920:	2000033c 	.word	0x2000033c
 8001924:	2000032e 	.word	0x2000032e
 8001928:	20000330 	.word	0x20000330
 800192c:	20000332 	.word	0x20000332
 8001930:	20000340 	.word	0x20000340
 8001934:	20000344 	.word	0x20000344
 8001938:	20000348 	.word	0x20000348
 800193c:	2000034c 	.word	0x2000034c
 8001940:	408f4000 	.word	0x408f4000
	}
	else
	{
		roll = 0.0;
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	double pitch = atan2(-Accel_X_RAW,Accel_Z_RAW) * RAD_TO_DEG;
 8001950:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <MPU6050_Read_All+0x428>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	425b      	negs	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdbf 	bl	80004dc <__aeabi_i2d>
 800195e:	4680      	mov	r8, r0
 8001960:	4689      	mov	r9, r1
 8001962:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <MPU6050_Read_All+0x42c>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdb7 	bl	80004dc <__aeabi_i2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	f005 fd4c 	bl	8007412 <atan2>
 800197a:	a351      	add	r3, pc, #324	; (adr r3, 8001ac0 <MPU6050_Read_All+0x420>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe16 	bl	80005b0 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && KalmanAngleY > 90) || (pitch > 90 && KalmanAngleY < -90))
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b4f      	ldr	r3, [pc, #316]	; (8001ad0 <MPU6050_Read_All+0x430>)
 8001992:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001996:	f7ff f87d 	bl	8000a94 <__aeabi_dcmplt>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00a      	beq.n	80019b6 <MPU6050_Read_All+0x316>
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <MPU6050_Read_All+0x434>)
 80019a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <MPU6050_Read_All+0x438>)
 80019ac:	f7ff f890 	bl	8000ad0 <__aeabi_dcmpgt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d114      	bne.n	80019e0 <MPU6050_Read_All+0x340>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <MPU6050_Read_All+0x438>)
 80019bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019c0:	f7ff f886 	bl	8000ad0 <__aeabi_dcmpgt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d015      	beq.n	80019f6 <MPU6050_Read_All+0x356>
 80019ca:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <MPU6050_Read_All+0x434>)
 80019cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <MPU6050_Read_All+0x430>)
 80019d6:	f7ff f85d 	bl	8000a94 <__aeabi_dcmplt>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <MPU6050_Read_All+0x356>
	{
		KalmanY.angle = pitch;
 80019e0:	493e      	ldr	r1, [pc, #248]	; (8001adc <MPU6050_Read_All+0x43c>)
 80019e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		KalmanAngleY = pitch;
 80019ea:	493a      	ldr	r1, [pc, #232]	; (8001ad4 <MPU6050_Read_All+0x434>)
 80019ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f0:	e9c1 2300 	strd	r2, r3, [r1]
 80019f4:	e014      	b.n	8001a20 <MPU6050_Read_All+0x380>
	}
	else
	{
		KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, Gy, dt);
 80019f6:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <MPU6050_Read_All+0x440>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd80 	bl	8000500 <__aeabi_f2d>
 8001a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a08:	e9cd 0100 	strd	r0, r1, [sp]
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	4832      	ldr	r0, [pc, #200]	; (8001adc <MPU6050_Read_All+0x43c>)
 8001a12:	f7ff fcef 	bl	80013f4 <Kalman_getAngle>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	492e      	ldr	r1, [pc, #184]	; (8001ad4 <MPU6050_Read_All+0x434>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]

	}
	if (fabs(KalmanAngleY) > 90)
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <MPU6050_Read_All+0x434>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	4614      	mov	r4, r2
 8001a28:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <MPU6050_Read_All+0x438>)
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7ff f84b 	bl	8000ad0 <__aeabi_dcmpgt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <MPU6050_Read_All+0x3ac>
	{
		Gx = -Gx;
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <MPU6050_Read_All+0x444>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <MPU6050_Read_All+0x444>)
 8001a4a:	6013      	str	r3, [r2, #0]
	}

	KalmanAngleX = Kalman_getAngle(&KalmanX, roll, Gx, dt);
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <MPU6050_Read_All+0x444>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd55 	bl	8000500 <__aeabi_f2d>
 8001a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a5e:	e9cd 0100 	strd	r0, r1, [sp]
 8001a62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a66:	4820      	ldr	r0, [pc, #128]	; (8001ae8 <MPU6050_Read_All+0x448>)
 8001a68:	f7ff fcc4 	bl	80013f4 <Kalman_getAngle>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	491e      	ldr	r1, [pc, #120]	; (8001aec <MPU6050_Read_All+0x44c>)
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]

	double yaw = 0;
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	yaw += Gz/dt;
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MPU6050_Read_All+0x450>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd3a 	bl	8000500 <__aeabi_f2d>
 8001a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a90:	f7fe feb8 	bl	8000804 <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a9c:	f7fe fbd2 	bl	8000244 <__adddf3>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	KalmanAngleZ = yaw;
 8001aa8:	4912      	ldr	r1, [pc, #72]	; (8001af4 <MPU6050_Read_All+0x454>)
 8001aaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aae:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001ab2:	bf00      	nop
 8001ab4:	3738      	adds	r7, #56	; 0x38
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001abc:	f3af 8000 	nop.w
 8001ac0:	1a63c1f8 	.word	0x1a63c1f8
 8001ac4:	404ca5dc 	.word	0x404ca5dc
 8001ac8:	20000328 	.word	0x20000328
 8001acc:	2000032c 	.word	0x2000032c
 8001ad0:	c0568000 	.word	0xc0568000
 8001ad4:	20000358 	.word	0x20000358
 8001ad8:	40568000 	.word	0x40568000
 8001adc:	20000048 	.word	0x20000048
 8001ae0:	20000344 	.word	0x20000344
 8001ae4:	20000340 	.word	0x20000340
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000350 	.word	0x20000350
 8001af0:	20000348 	.word	0x20000348
 8001af4:	20000360 	.word	0x20000360

08001af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	//  __HAL_RCC_I2C2_CLK_ENABLE();
	  HAL_Init();
 8001afe:	f000 fbaf 	bl	8002260 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8001b02:	f000 f883 	bl	8001c0c <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8001b06:	f000 f8f5 	bl	8001cf4 <MX_GPIO_Init>
	  MX_FSMC_Init();
 8001b0a:	f000 f96b 	bl	8001de4 <MX_FSMC_Init>
	  MX_I2C2_Init();
 8001b0e:	f000 f8c3 	bl	8001c98 <MX_I2C2_Init>
	  LCD_INIT();
 8001b12:	f7ff f886 	bl	8000c22 <LCD_INIT>
	  /* USER CODE BEGIN 2 */
	  LCD_INIT();
 8001b16:	f7ff f884 	bl	8000c22 <LCD_INIT>
	  MPU6050_Init();
 8001b1a:	f7ff fb15 	bl	8001148 <MPU6050_Init>

	  LCD_DrawString(20,20, "Initialized");
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <main+0xf4>)
 8001b20:	2114      	movs	r1, #20
 8001b22:	2014      	movs	r0, #20
 8001b24:	f7ff fae0 	bl	80010e8 <LCD_DrawString>

	  HAL_Delay(1000);
 8001b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2c:	f000 fbfa 	bl	8002324 <HAL_Delay>

	  LCD_DrawString(50, 20, "MPU6050");
 8001b30:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <main+0xf8>)
 8001b32:	2114      	movs	r1, #20
 8001b34:	2032      	movs	r0, #50	; 0x32
 8001b36:	f7ff fad7 	bl	80010e8 <LCD_DrawString>
	    /* USER CODE END WHILE */



	    /* USER CODE BEGIN 3 */
		  MPU6050_Read_Accel();
 8001b3a:	f7ff fb5d 	bl	80011f8 <MPU6050_Read_Accel>
		  MPU6050_Read_Gyro();
 8001b3e:	f7ff fbdb 	bl	80012f8 <MPU6050_Read_Gyro>
		  MPU6050_Read_All();
 8001b42:	f7ff fdad 	bl	80016a0 <MPU6050_Read_All>

		 //Printing on LCD
		  sprintf(buf, "%.2f",Gx);
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <main+0xfc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcd8 	bl	8000500 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	1d38      	adds	r0, r7, #4
 8001b56:	4928      	ldr	r1, [pc, #160]	; (8001bf8 <main+0x100>)
 8001b58:	f003 f854 	bl	8004c04 <siprintf>
		  LCD_DrawString(100,100, buf);
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2164      	movs	r1, #100	; 0x64
 8001b62:	2064      	movs	r0, #100	; 0x64
 8001b64:	f7ff fac0 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",Gy);
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <main+0x104>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcc7 	bl	8000500 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	1d38      	adds	r0, r7, #4
 8001b78:	491f      	ldr	r1, [pc, #124]	; (8001bf8 <main+0x100>)
 8001b7a:	f003 f843 	bl	8004c04 <siprintf>
		  LCD_DrawString(100,200, buf);
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	461a      	mov	r2, r3
 8001b82:	21c8      	movs	r1, #200	; 0xc8
 8001b84:	2064      	movs	r0, #100	; 0x64
 8001b86:	f7ff faaf 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",Gz);
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <main+0x108>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcb6 	bl	8000500 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	1d38      	adds	r0, r7, #4
 8001b9a:	4917      	ldr	r1, [pc, #92]	; (8001bf8 <main+0x100>)
 8001b9c:	f003 f832 	bl	8004c04 <siprintf>
		  LCD_DrawString(100,300, buf);
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ba8:	2064      	movs	r0, #100	; 0x64
 8001baa:	f7ff fa9d 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",KalmanAngleX);
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <main+0x10c>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	1d38      	adds	r0, r7, #4
 8001bb6:	4910      	ldr	r1, [pc, #64]	; (8001bf8 <main+0x100>)
 8001bb8:	f003 f824 	bl	8004c04 <siprintf>
		  LCD_DrawString(90, 50, buf);
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2132      	movs	r1, #50	; 0x32
 8001bc2:	205a      	movs	r0, #90	; 0x5a
 8001bc4:	f7ff fa90 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",KalmanAngleY);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <main+0x110>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	1d38      	adds	r0, r7, #4
 8001bd0:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <main+0x100>)
 8001bd2:	f003 f817 	bl	8004c04 <siprintf>
		  LCD_DrawString(90,90, buf);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	461a      	mov	r2, r3
 8001bda:	215a      	movs	r1, #90	; 0x5a
 8001bdc:	205a      	movs	r0, #90	; 0x5a
 8001bde:	f7ff fa83 	bl	80010e8 <LCD_DrawString>


		  HAL_Delay(100);
 8001be2:	2064      	movs	r0, #100	; 0x64
 8001be4:	f000 fb9e 	bl	8002324 <HAL_Delay>
		  MPU6050_Read_Accel();
 8001be8:	e7a7      	b.n	8001b3a <main+0x42>
 8001bea:	bf00      	nop
 8001bec:	08007780 	.word	0x08007780
 8001bf0:	0800778c 	.word	0x0800778c
 8001bf4:	20000340 	.word	0x20000340
 8001bf8:	08007794 	.word	0x08007794
 8001bfc:	20000344 	.word	0x20000344
 8001c00:	20000348 	.word	0x20000348
 8001c04:	20000350 	.word	0x20000350
 8001c08:	20000358 	.word	0x20000358

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0318 	add.w	r3, r7, #24
 8001c16:	2228      	movs	r2, #40	; 0x28
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fb8a 	bl	8004334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c40:	2302      	movs	r3, #2
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fe19 	bl	800388c <HAL_RCC_OscConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c60:	f000 f924 	bl	8001eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c64:	230f      	movs	r3, #15
 8001c66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 f886 	bl	8003d90 <HAL_RCC_ClockConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c8a:	f000 f90f 	bl	8001eac <Error_Handler>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3740      	adds	r7, #64	; 0x40
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001c9e:	4a13      	ldr	r2, [pc, #76]	; (8001cec <MX_I2C2_Init+0x54>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001ca4:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <MX_I2C2_Init+0x58>)
 8001ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cd6:	f000 fdd9 	bl	800288c <HAL_I2C_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ce0:	f000 f8e4 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000028c 	.word	0x2000028c
 8001cec:	40005800 	.word	0x40005800
 8001cf0:	000186a0 	.word	0x000186a0

08001cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a32      	ldr	r2, [pc, #200]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d86:	4815      	ldr	r0, [pc, #84]	; (8001ddc <MX_GPIO_Init+0xe8>)
 8001d88:	f000 fd68 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2102      	movs	r1, #2
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <MX_GPIO_Init+0xec>)
 8001d92:	f000 fd63 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	4619      	mov	r1, r3
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <MX_GPIO_Init+0xe8>)
 8001db0:	f000 fbc0 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_GPIO_Init+0xec>)
 8001dcc:	f000 fbb2 	bl	8002534 <HAL_GPIO_Init>

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40011400 	.word	0x40011400
 8001de0:	40011800 	.word	0x40011800

08001de4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001dfe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e02:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e06:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <MX_FSMC_Init+0xc0>)
 8001e08:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e0a:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e1e:	2210      	movs	r2, #16
 8001e20:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e62:	23ff      	movs	r3, #255	; 0xff
 8001e64:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e66:	230f      	movs	r3, #15
 8001e68:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e6e:	2311      	movs	r3, #17
 8001e70:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <MX_FSMC_Init+0xbc>)
 8001e7e:	f002 f90b 	bl	8004098 <HAL_SRAM_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001e88:	f000 f810 	bl	8001eac <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_FSMC_Init+0xc4>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <MX_FSMC_Init+0xc4>)
 8001e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e96:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200002e0 	.word	0x200002e0
 8001ea4:	a0000104 	.word	0xa0000104
 8001ea8:	40010000 	.word	0x40010000

08001eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <Error_Handler+0x8>
	...

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_MspInit+0x5c>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_MspInit+0x5c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6193      	str	r3, [r2, #24]
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_MspInit+0x5c>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_MspInit+0x5c>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_MspInit+0x5c>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_MspInit+0x5c>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_MspInit+0x60>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_MspInit+0x60>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010000 	.word	0x40010000

08001f1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_I2C_MspInit+0x74>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d124      	bne.n	8001f86 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_I2C_MspInit+0x78>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_I2C_MspInit+0x78>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_I2C_MspInit+0x78>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5a:	2312      	movs	r3, #18
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4619      	mov	r1, r3
 8001f68:	480b      	ldr	r0, [pc, #44]	; (8001f98 <HAL_I2C_MspInit+0x7c>)
 8001f6a:	f000 fae3 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_I2C_MspInit+0x78>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_I2C_MspInit+0x78>)
 8001f74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_I2C_MspInit+0x78>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f86:	bf00      	nop
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40005800 	.word	0x40005800
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010c00 	.word	0x40010c00

08001f9c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_FSMC_MspInit+0x78>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d129      	bne.n	800200c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_FSMC_MspInit+0x78>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_FSMC_MspInit+0x7c>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <HAL_FSMC_MspInit+0x7c>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_FSMC_MspInit+0x7c>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001fd6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001fda:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <HAL_FSMC_MspInit+0x80>)
 8001fec:	f000 faa2 	bl	8002534 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ff0:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001ff4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4619      	mov	r1, r3
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <HAL_FSMC_MspInit+0x84>)
 8002006:	f000 fa95 	bl	8002534 <HAL_GPIO_Init>
 800200a:	e000      	b.n	800200e <HAL_FSMC_MspInit+0x72>
    return;
 800200c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000368 	.word	0x20000368
 8002018:	40021000 	.word	0x40021000
 800201c:	40011800 	.word	0x40011800
 8002020:	40011400 	.word	0x40011400

08002024 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800202c:	f7ff ffb6 	bl	8001f9c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207e:	f000 f935 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
	return 1;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <_kill>:

int _kill(int pid, int sig)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800209e:	f002 f91f 	bl	80042e0 <__errno>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2216      	movs	r2, #22
 80020a6:	601a      	str	r2, [r3, #0]
	return -1;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_exit>:

void _exit (int status)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ffe7 	bl	8002094 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020c6:	e7fe      	b.n	80020c6 <_exit+0x12>

080020c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e00a      	b.n	80020f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020da:	f3af 8000 	nop.w
 80020de:	4601      	mov	r1, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3301      	adds	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dbf0      	blt.n	80020da <_read+0x12>
	}

return len;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e009      	b.n	8002128 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf1      	blt.n	8002114 <_write+0x12>
	}
	return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_close>:

int _close(int file)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	return -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002160:	605a      	str	r2, [r3, #4]
	return 0;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <_isatty>:

int _isatty(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	return 1;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
	return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f002 f888 	bl	80042e0 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20010000 	.word	0x20010000
 80021fc:	00000400 	.word	0x00000400
 8002200:	2000036c 	.word	0x2000036c
 8002204:	20000388 	.word	0x20000388

08002208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f7ff ffe5 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f002 f855 	bl	80042ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002242:	f7ff fc59 	bl	8001af8 <main>
  bx lr
 8002246:	4770      	bx	lr
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002250:	08008208 	.word	0x08008208
  ldr r2, =_sbss
 8002254:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002258:	20000384 	.word	0x20000384

0800225c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x28>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x28>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f92b 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fe1c 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f935 	bl	800251a <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c8:	f000 f90b 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000090 	.word	0x20000090
 80022e4:	20000098 	.word	0x20000098
 80022e8:	20000094 	.word	0x20000094

080022ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x1c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_IncTick+0x20>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_IncTick+0x20>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000098 	.word	0x20000098
 800230c:	20000370 	.word	0x20000370

08002310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_GetTick+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000370 	.word	0x20000370

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fff0 	bl	8002310 <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffe0 	bl	8002310 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000098 	.word	0x20000098

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ac:	f7ff ff90 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff49 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff5e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff90 	bl	8002424 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5f 	bl	80023d0 <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffb0 	bl	8002488 <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b08b      	sub	sp, #44	; 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	e179      	b.n	800283c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002548:	2201      	movs	r2, #1
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8168 	bne.w	8002836 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a96      	ldr	r2, [pc, #600]	; (80027c4 <HAL_GPIO_Init+0x290>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d05e      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002570:	4a94      	ldr	r2, [pc, #592]	; (80027c4 <HAL_GPIO_Init+0x290>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d875      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 8002576:	4a94      	ldr	r2, [pc, #592]	; (80027c8 <HAL_GPIO_Init+0x294>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d058      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 800257c:	4a92      	ldr	r2, [pc, #584]	; (80027c8 <HAL_GPIO_Init+0x294>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d86f      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 8002582:	4a92      	ldr	r2, [pc, #584]	; (80027cc <HAL_GPIO_Init+0x298>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d052      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002588:	4a90      	ldr	r2, [pc, #576]	; (80027cc <HAL_GPIO_Init+0x298>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d869      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 800258e:	4a90      	ldr	r2, [pc, #576]	; (80027d0 <HAL_GPIO_Init+0x29c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d04c      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002594:	4a8e      	ldr	r2, [pc, #568]	; (80027d0 <HAL_GPIO_Init+0x29c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d863      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 800259a:	4a8e      	ldr	r2, [pc, #568]	; (80027d4 <HAL_GPIO_Init+0x2a0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d046      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 80025a0:	4a8c      	ldr	r2, [pc, #560]	; (80027d4 <HAL_GPIO_Init+0x2a0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d85d      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 80025a6:	2b12      	cmp	r3, #18
 80025a8:	d82a      	bhi.n	8002600 <HAL_GPIO_Init+0xcc>
 80025aa:	2b12      	cmp	r3, #18
 80025ac:	d859      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <HAL_GPIO_Init+0x80>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	0800262f 	.word	0x0800262f
 80025b8:	08002609 	.word	0x08002609
 80025bc:	0800261b 	.word	0x0800261b
 80025c0:	0800265d 	.word	0x0800265d
 80025c4:	08002663 	.word	0x08002663
 80025c8:	08002663 	.word	0x08002663
 80025cc:	08002663 	.word	0x08002663
 80025d0:	08002663 	.word	0x08002663
 80025d4:	08002663 	.word	0x08002663
 80025d8:	08002663 	.word	0x08002663
 80025dc:	08002663 	.word	0x08002663
 80025e0:	08002663 	.word	0x08002663
 80025e4:	08002663 	.word	0x08002663
 80025e8:	08002663 	.word	0x08002663
 80025ec:	08002663 	.word	0x08002663
 80025f0:	08002663 	.word	0x08002663
 80025f4:	08002663 	.word	0x08002663
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002625 	.word	0x08002625
 8002600:	4a75      	ldr	r2, [pc, #468]	; (80027d8 <HAL_GPIO_Init+0x2a4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002606:	e02c      	b.n	8002662 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	623b      	str	r3, [r7, #32]
          break;
 800260e:	e029      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	3304      	adds	r3, #4
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	e024      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	3308      	adds	r3, #8
 8002620:	623b      	str	r3, [r7, #32]
          break;
 8002622:	e01f      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	330c      	adds	r3, #12
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	e01a      	b.n	8002664 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002636:	2304      	movs	r3, #4
 8002638:	623b      	str	r3, [r7, #32]
          break;
 800263a:	e013      	b.n	8002664 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002644:	2308      	movs	r3, #8
 8002646:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	611a      	str	r2, [r3, #16]
          break;
 800264e:	e009      	b.n	8002664 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002650:	2308      	movs	r3, #8
 8002652:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	615a      	str	r2, [r3, #20]
          break;
 800265a:	e003      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x130>
          break;
 8002662:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2bff      	cmp	r3, #255	; 0xff
 8002668:	d801      	bhi.n	800266e <HAL_GPIO_Init+0x13a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	e001      	b.n	8002672 <HAL_GPIO_Init+0x13e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d802      	bhi.n	8002680 <HAL_GPIO_Init+0x14c>
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	e002      	b.n	8002686 <HAL_GPIO_Init+0x152>
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	3b08      	subs	r3, #8
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	210f      	movs	r1, #15
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80c1 	beq.w	8002836 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026b4:	4b49      	ldr	r3, [pc, #292]	; (80027dc <HAL_GPIO_Init+0x2a8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <HAL_GPIO_Init+0x2a8>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b46      	ldr	r3, [pc, #280]	; (80027dc <HAL_GPIO_Init+0x2a8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026cc:	4a44      	ldr	r2, [pc, #272]	; (80027e0 <HAL_GPIO_Init+0x2ac>)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3c      	ldr	r2, [pc, #240]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d01f      	beq.n	8002738 <HAL_GPIO_Init+0x204>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <HAL_GPIO_Init+0x2b4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d019      	beq.n	8002734 <HAL_GPIO_Init+0x200>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <HAL_GPIO_Init+0x2b8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_GPIO_Init+0x1fc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <HAL_GPIO_Init+0x2bc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00d      	beq.n	800272c <HAL_GPIO_Init+0x1f8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <HAL_GPIO_Init+0x2c0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <HAL_GPIO_Init+0x1f4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a37      	ldr	r2, [pc, #220]	; (80027f8 <HAL_GPIO_Init+0x2c4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_GPIO_Init+0x1f0>
 8002720:	2305      	movs	r3, #5
 8002722:	e00a      	b.n	800273a <HAL_GPIO_Init+0x206>
 8002724:	2306      	movs	r3, #6
 8002726:	e008      	b.n	800273a <HAL_GPIO_Init+0x206>
 8002728:	2304      	movs	r3, #4
 800272a:	e006      	b.n	800273a <HAL_GPIO_Init+0x206>
 800272c:	2303      	movs	r3, #3
 800272e:	e004      	b.n	800273a <HAL_GPIO_Init+0x206>
 8002730:	2302      	movs	r3, #2
 8002732:	e002      	b.n	800273a <HAL_GPIO_Init+0x206>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_GPIO_Init+0x206>
 8002738:	2300      	movs	r3, #0
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	f002 0203 	and.w	r2, r2, #3
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	4093      	lsls	r3, r2
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800274a:	4925      	ldr	r1, [pc, #148]	; (80027e0 <HAL_GPIO_Init+0x2ac>)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4924      	ldr	r1, [pc, #144]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	43db      	mvns	r3, r3
 800277a:	4920      	ldr	r1, [pc, #128]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 800277c:	4013      	ands	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	491a      	ldr	r1, [pc, #104]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d025      	beq.n	8002800 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	4910      	ldr	r1, [pc, #64]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
 80027c0:	e025      	b.n	800280e <HAL_GPIO_Init+0x2da>
 80027c2:	bf00      	nop
 80027c4:	10320000 	.word	0x10320000
 80027c8:	10310000 	.word	0x10310000
 80027cc:	10220000 	.word	0x10220000
 80027d0:	10210000 	.word	0x10210000
 80027d4:	10120000 	.word	0x10120000
 80027d8:	10110000 	.word	0x10110000
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40010800 	.word	0x40010800
 80027e8:	40010c00 	.word	0x40010c00
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40011400 	.word	0x40011400
 80027f4:	40011800 	.word	0x40011800
 80027f8:	40011c00 	.word	0x40011c00
 80027fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_GPIO_Init+0x324>)
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	43db      	mvns	r3, r3
 8002808:	4913      	ldr	r1, [pc, #76]	; (8002858 <HAL_GPIO_Init+0x324>)
 800280a:	4013      	ands	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_GPIO_Init+0x324>)
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	490e      	ldr	r1, [pc, #56]	; (8002858 <HAL_GPIO_Init+0x324>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
 8002826:	e006      	b.n	8002836 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_GPIO_Init+0x324>)
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	43db      	mvns	r3, r3
 8002830:	4909      	ldr	r1, [pc, #36]	; (8002858 <HAL_GPIO_Init+0x324>)
 8002832:	4013      	ands	r3, r2
 8002834:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3301      	adds	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	f47f ae7e 	bne.w	8002548 <HAL_GPIO_Init+0x14>
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	372c      	adds	r7, #44	; 0x2c
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002878:	e003      	b.n	8002882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	041a      	lsls	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e12b      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fb32 	bl	8001f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f0:	f001 fba0 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 80028f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a81      	ldr	r2, [pc, #516]	; (8002b00 <HAL_I2C_Init+0x274>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d807      	bhi.n	8002910 <HAL_I2C_Init+0x84>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a80      	ldr	r2, [pc, #512]	; (8002b04 <HAL_I2C_Init+0x278>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e006      	b.n	800291e <HAL_I2C_Init+0x92>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a7d      	ldr	r2, [pc, #500]	; (8002b08 <HAL_I2C_Init+0x27c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0e7      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a78      	ldr	r2, [pc, #480]	; (8002b0c <HAL_I2C_Init+0x280>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_I2C_Init+0x274>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d802      	bhi.n	8002960 <HAL_I2C_Init+0xd4>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3301      	adds	r3, #1
 800295e:	e009      	b.n	8002974 <HAL_I2C_Init+0xe8>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_I2C_Init+0x284>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	3301      	adds	r3, #1
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	495c      	ldr	r1, [pc, #368]	; (8002b00 <HAL_I2C_Init+0x274>)
 8002990:	428b      	cmp	r3, r1
 8002992:	d819      	bhi.n	80029c8 <HAL_I2C_Init+0x13c>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e59      	subs	r1, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029a8:	400b      	ands	r3, r1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_I2C_Init+0x138>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e59      	subs	r1, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	e051      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c4:	2304      	movs	r3, #4
 80029c6:	e04f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_I2C_Init+0x168>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e012      	b.n	8002a1a <HAL_I2C_Init+0x18e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x196>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e022      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10e      	bne.n	8002a48 <HAL_I2C_Init+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e58      	subs	r0, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	0099      	lsls	r1, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6809      	ldr	r1, [r1, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6911      	ldr	r1, [r2, #16]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	000186a0 	.word	0x000186a0
 8002b04:	001e847f 	.word	0x001e847f
 8002b08:	003d08ff 	.word	0x003d08ff
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	10624dd3 	.word	0x10624dd3

08002b14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	817b      	strh	r3, [r7, #10]
 8002b26:	460b      	mov	r3, r1
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7ff fbef 	bl	8002310 <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	f040 80d9 	bne.w	8002cf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2319      	movs	r3, #25
 8002b48:	2201      	movs	r2, #1
 8002b4a:	496d      	ldr	r1, [pc, #436]	; (8002d00 <HAL_I2C_Mem_Write+0x1ec>)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fcc1 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0cc      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Mem_Write+0x56>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0c5      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d007      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2221      	movs	r2, #33	; 0x21
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a3a      	ldr	r2, [r7, #32]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a4d      	ldr	r2, [pc, #308]	; (8002d04 <HAL_I2C_Mem_Write+0x1f0>)
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd2:	88f8      	ldrh	r0, [r7, #6]
 8002bd4:	893a      	ldrh	r2, [r7, #8]
 8002bd6:	8979      	ldrh	r1, [r7, #10]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	4603      	mov	r3, r0
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 faf8 	bl	80031d8 <I2C_RequestMemoryWrite>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d052      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e081      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fd42 	bl	8003680 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d107      	bne.n	8002c1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06b      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d11b      	bne.n	8002c94 <HAL_I2C_Mem_Write+0x180>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d017      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1aa      	bne.n	8002bf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fd2e 	bl	8003702 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d107      	bne.n	8002cc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e016      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	00100002 	.word	0x00100002
 8002d04:	ffff0000 	.word	0xffff0000

08002d08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d26:	f7ff faf3 	bl	8002310 <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	f040 8244 	bne.w	80031c2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2319      	movs	r3, #25
 8002d40:	2201      	movs	r2, #1
 8002d42:	4982      	ldr	r1, [pc, #520]	; (8002f4c <HAL_I2C_Mem_Read+0x244>)
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fbc5 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
 8002d52:	e237      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Mem_Read+0x5a>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e230      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d007      	beq.n	8002d88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2222      	movs	r2, #34	; 0x22
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a62      	ldr	r2, [pc, #392]	; (8002f50 <HAL_I2C_Mem_Read+0x248>)
 8002dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dca:	88f8      	ldrh	r0, [r7, #6]
 8002dcc:	893a      	ldrh	r2, [r7, #8]
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4603      	mov	r3, r0
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fa92 	bl	8003304 <I2C_RequestMemoryRead>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1ec      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d113      	bne.n	8002e1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e1c0      	b.n	800319c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d11e      	bne.n	8002e60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e32:	b672      	cpsid	i
}
 8002e34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e5c:	b662      	cpsie	i
}
 8002e5e:	e035      	b.n	8002ecc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d11e      	bne.n	8002ea6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e78:	b672      	cpsid	i
}
 8002e7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ea2:	b662      	cpsie	i
}
 8002ea4:	e012      	b.n	8002ecc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ecc:	e166      	b.n	800319c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	f200 811f 	bhi.w	8003116 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d123      	bne.n	8002f28 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fc4d 	bl	8003784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e167      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f26:	e139      	b.n	800319c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d152      	bne.n	8002fd6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	2200      	movs	r2, #0
 8002f38:	4906      	ldr	r1, [pc, #24]	; (8002f54 <HAL_I2C_Mem_Read+0x24c>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 faca 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e13c      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
 8002f4a:	bf00      	nop
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000
 8002f54:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f58:	b672      	cpsid	i
}
 8002f5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f9e:	b662      	cpsie	i
}
 8002fa0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd4:	e0e2      	b.n	800319c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2200      	movs	r2, #0
 8002fde:	497b      	ldr	r1, [pc, #492]	; (80031cc <HAL_I2C_Mem_Read+0x4c4>)
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fa77 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0e9      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003000:	b672      	cpsid	i
}
 8003002:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003036:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_I2C_Mem_Read+0x4c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <HAL_I2C_Mem_Read+0x4cc>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0a1a      	lsrs	r2, r3, #8
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00da      	lsls	r2, r3, #3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	3b01      	subs	r3, #1
 8003054:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d118      	bne.n	800308e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800307e:	b662      	cpsie	i
}
 8003080:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e09a      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d1d9      	bne.n	8003050 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030de:	b662      	cpsie	i
}
 80030e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003114:	e042      	b.n	800319c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fb32 	bl	8003784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e04c      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d118      	bne.n	800319c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f47f ae94 	bne.w	8002ece <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	00010004 	.word	0x00010004
 80031d0:	20000090 	.word	0x20000090
 80031d4:	14f8b589 	.word	0x14f8b589

080031d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	4608      	mov	r0, r1
 80031e2:	4611      	mov	r1, r2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	817b      	strh	r3, [r7, #10]
 80031ea:	460b      	mov	r3, r1
 80031ec:	813b      	strh	r3, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	2200      	movs	r2, #0
 800320a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f960 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003228:	d103      	bne.n	8003232 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e05f      	b.n	80032f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003244:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	492d      	ldr	r1, [pc, #180]	; (8003300 <I2C_RequestMemoryWrite+0x128>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f998 	bl	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e04c      	b.n	80032f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fa02 	bl	8003680 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e02b      	b.n	80032f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a4:	893b      	ldrh	r3, [r7, #8]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	611a      	str	r2, [r3, #16]
 80032ae:	e021      	b.n	80032f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	6a39      	ldr	r1, [r7, #32]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f9dc 	bl	8003680 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d107      	bne.n	80032e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e005      	b.n	80032f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ea:	893b      	ldrh	r3, [r7, #8]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	00010002 	.word	0x00010002

08003304 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	817b      	strh	r3, [r7, #10]
 8003316:	460b      	mov	r3, r1
 8003318:	813b      	strh	r3, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800332c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2200      	movs	r2, #0
 8003346:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f8c2 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d103      	bne.n	800336e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0aa      	b.n	80034c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	4952      	ldr	r1, [pc, #328]	; (80034d0 <I2C_RequestMemoryRead+0x1cc>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f8fa 	bl	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e097      	b.n	80034c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f964 	bl	8003680 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d107      	bne.n	80033d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e076      	b.n	80034c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e0:	893b      	ldrh	r3, [r7, #8]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]
 80033ea:	e021      	b.n	8003430 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f93e 	bl	8003680 <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e050      	b.n	80034c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	6a39      	ldr	r1, [r7, #32]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f923 	bl	8003680 <I2C_WaitOnTXEFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b04      	cmp	r3, #4
 8003446:	d107      	bne.n	8003458 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e035      	b.n	80034c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2200      	movs	r2, #0
 8003474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f82b 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003492:	d103      	bne.n	800349c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e013      	b.n	80034c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034a0:	897b      	ldrh	r3, [r7, #10]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	6a3a      	ldr	r2, [r7, #32]
 80034b4:	4906      	ldr	r1, [pc, #24]	; (80034d0 <I2C_RequestMemoryRead+0x1cc>)
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f863 	bl	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	00010002 	.word	0x00010002

080034d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e4:	e025      	b.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ec:	d021      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7fe ff0f 	bl	8002310 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d116      	bne.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e023      	b.n	800357a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10d      	bne.n	8003558 <I2C_WaitOnFlagUntilTimeout+0x84>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf0c      	ite	eq
 800354e:	2301      	moveq	r3, #1
 8003550:	2300      	movne	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	e00c      	b.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4013      	ands	r3, r2
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	429a      	cmp	r2, r3
 8003576:	d0b6      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003590:	e051      	b.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a0:	d123      	bne.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f043 0204 	orr.w	r2, r3, #4
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e046      	b.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f0:	d021      	beq.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe fe8d 	bl	8002310 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d116      	bne.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e020      	b.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10c      	bne.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e00b      	b.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	43da      	mvns	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4013      	ands	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d18d      	bne.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800368c:	e02d      	b.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f8ce 	bl	8003830 <I2C_IsAcknowledgeFailed>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e02d      	b.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a4:	d021      	beq.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe fe33 	bl	8002310 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d116      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e007      	b.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	d1ca      	bne.n	800368e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800370e:	e02d      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f88d 	bl	8003830 <I2C_IsAcknowledgeFailed>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e02d      	b.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003726:	d021      	beq.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003728:	f7fe fdf2 	bl	8002310 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d302      	bcc.n	800373e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d116      	bne.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e007      	b.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b04      	cmp	r3, #4
 8003778:	d1ca      	bne.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003790:	e042      	b.n	8003818 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b10      	cmp	r3, #16
 800379e:	d119      	bne.n	80037d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0210 	mvn.w	r2, #16
 80037a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e029      	b.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d4:	f7fe fd9c 	bl	8002310 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e007      	b.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d1b5      	bne.n	8003792 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d11b      	bne.n	8003880 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003850:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f043 0204 	orr.w	r2, r3, #4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e272      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8087 	beq.w	80039ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ac:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d00c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038b8:	4b8f      	ldr	r3, [pc, #572]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d112      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
 80038c4:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d0:	d10b      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x12c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d168      	bne.n	80039b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e24c      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x76>
 80038f4:	4b80      	ldr	r3, [pc, #512]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7f      	ldr	r2, [pc, #508]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x98>
 800390a:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a77      	ldr	r2, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0xbc>
 800392e:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a71      	ldr	r2, [pc, #452]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6e      	ldr	r2, [pc, #440]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a67      	ldr	r2, [pc, #412]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fcd2 	bl	8002310 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fcce 	bl	8002310 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e200      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b5d      	ldr	r3, [pc, #372]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xe4>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe fcbe 	bl	8002310 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe fcba 	bl	8002310 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1ec      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x10c>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d063      	beq.n	8003a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c6:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039d2:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d11c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x18c>
 80039de:	4b46      	ldr	r3, [pc, #280]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d116      	bne.n	8003a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x176>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e1c0      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4939      	ldr	r1, [pc, #228]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	e03a      	b.n	8003a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a20:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe fc73 	bl	8002310 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fc6f 	bl	8002310 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1a1      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4927      	ldr	r1, [pc, #156]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fc52 	bl	8002310 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe fc4e 	bl	8002310 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e180      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d03a      	beq.n	8003b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fc32 	bl	8002310 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fc2e 	bl	8002310 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e160      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f000 fac4 	bl	800405c <RCC_Delay>
 8003ad4:	e01c      	b.n	8003b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7fe fc18 	bl	8002310 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae2:	e00f      	b.n	8003b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fc14 	bl	8002310 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d908      	bls.n	8003b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e146      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	42420000 	.word	0x42420000
 8003b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e9      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a6 	beq.w	8003c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b8b      	ldr	r3, [pc, #556]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4a87      	ldr	r2, [pc, #540]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	61d3      	str	r3, [r2, #28]
 8003b3a:	4b85      	ldr	r3, [pc, #532]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b82      	ldr	r3, [pc, #520]	; (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b7f      	ldr	r3, [pc, #508]	; (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	; (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fbd5 	bl	8002310 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fe fbd1 	bl	8002310 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e103      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b75      	ldr	r3, [pc, #468]	; (8003d54 <HAL_RCC_OscConfig+0x4c8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x312>
 8003b90:	4b6f      	ldr	r3, [pc, #444]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a6e      	ldr	r2, [pc, #440]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	e02d      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x334>
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4a69      	ldr	r2, [pc, #420]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6213      	str	r3, [r2, #32]
 8003bb2:	4b67      	ldr	r3, [pc, #412]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a66      	ldr	r2, [pc, #408]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	e01c      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x356>
 8003bc8:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a60      	ldr	r2, [pc, #384]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a5d      	ldr	r2, [pc, #372]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003be2:	4b5b      	ldr	r3, [pc, #364]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a5a      	ldr	r2, [pc, #360]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	4b58      	ldr	r3, [pc, #352]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a57      	ldr	r2, [pc, #348]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fb85 	bl	8002310 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fe fb81 	bl	8002310 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0b1      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	4b4b      	ldr	r3, [pc, #300]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RCC_OscConfig+0x37e>
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fb6f 	bl	8002310 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe fb6b 	bl	8002310 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e09b      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ee      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4a3b      	ldr	r2, [pc, #236]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8087 	beq.w	8003d82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d061      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d146      	bne.n	8003d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_RCC_OscConfig+0x4cc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fb3f 	bl	8002310 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe fb3b 	bl	8002310 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e06d      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	4921      	ldr	r1, [pc, #132]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a19      	ldr	r1, [r3, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	491b      	ldr	r1, [pc, #108]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe fb0f 	bl	8002310 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fe fb0b 	bl	8002310 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e03d      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x46a>
 8003d14:	e035      	b.n	8003d82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_RCC_OscConfig+0x4cc>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe faf8 	bl	8002310 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe faf4 	bl	8002310 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e026      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x498>
 8003d42:	e01e      	b.n	8003d82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e019      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40007000 	.word	0x40007000
 8003d58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_OscConfig+0x500>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000

08003d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0d0      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da4:	4b6a      	ldr	r3, [pc, #424]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d910      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b67      	ldr	r3, [pc, #412]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 0207 	bic.w	r2, r3, #7
 8003dba:	4965      	ldr	r1, [pc, #404]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b63      	ldr	r3, [pc, #396]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0b8      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dec:	4b59      	ldr	r3, [pc, #356]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a58      	ldr	r2, [pc, #352]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e04:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a52      	ldr	r2, [pc, #328]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	494d      	ldr	r1, [pc, #308]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d040      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d115      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e073      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e06b      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e6e:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f023 0203 	bic.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4936      	ldr	r1, [pc, #216]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e80:	f7fe fa46 	bl	8002310 <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e88:	f7fe fa42 	bl	8002310 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e053      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 020c 	and.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d1eb      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d210      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	4922      	ldr	r1, [pc, #136]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e032      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4916      	ldr	r1, [pc, #88]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	490e      	ldr	r1, [pc, #56]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f1e:	f000 f821 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	490a      	ldr	r1, [pc, #40]	; (8003f58 <HAL_RCC_ClockConfig+0x1c8>)
 8003f30:	5ccb      	ldrb	r3, [r1, r3]
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1cc>)
 8003f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1d0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe f9a4 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08007d9c 	.word	0x08007d9c
 8003f5c:	20000090 	.word	0x20000090
 8003f60:	20000094 	.word	0x20000094

08003f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	b490      	push	{r4, r7}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f6a:	4b29      	ldr	r3, [pc, #164]	; (8004010 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f6c:	1d3c      	adds	r4, r7, #4
 8003f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f74:	f240 2301 	movw	r3, #513	; 0x201
 8003f78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	2300      	movs	r3, #0
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x46>
 8003fa2:	e02b      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fa6:	623b      	str	r3, [r7, #32]
      break;
 8003fa8:	e02b      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	0c9b      	lsrs	r3, r3, #18
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	3328      	adds	r3, #40	; 0x28
 8003fb4:	443b      	add	r3, r7
 8003fb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0c5b      	lsrs	r3, r3, #17
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	3328      	adds	r3, #40	; 0x28
 8003fd2:	443b      	add	r3, r7
 8003fd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fde:	fb03 f202 	mul.w	r2, r3, r2
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	e004      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4a0b      	ldr	r2, [pc, #44]	; (800401c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	623b      	str	r3, [r7, #32]
      break;
 8003ffa:	e002      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ffe:	623b      	str	r3, [r7, #32]
      break;
 8004000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004002:	6a3b      	ldr	r3, [r7, #32]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bc90      	pop	{r4, r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	0800779c 	.word	0x0800779c
 8004014:	40021000 	.word	0x40021000
 8004018:	007a1200 	.word	0x007a1200
 800401c:	003d0900 	.word	0x003d0900

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b02      	ldr	r3, [pc, #8]	; (8004030 <HAL_RCC_GetHCLKFreq+0x10>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	20000090 	.word	0x20000090

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004038:	f7ff fff2 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4903      	ldr	r1, [pc, #12]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	08007dac 	.word	0x08007dac

0800405c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <RCC_Delay+0x34>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <RCC_Delay+0x38>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0a5b      	lsrs	r3, r3, #9
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004078:	bf00      	nop
  }
  while (Delay --);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1e5a      	subs	r2, r3, #1
 800407e:	60fa      	str	r2, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f9      	bne.n	8004078 <RCC_Delay+0x1c>
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	20000090 	.word	0x20000090
 8004094:	10624dd3 	.word	0x10624dd3

08004098 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_SRAM_Init+0x1c>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d101      	bne.n	80040b8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e038      	b.n	800412a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7fd ffa9 	bl	8002024 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3308      	adds	r3, #8
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f000 f829 	bl	8004134 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	f000 f88b 	bl	8004208 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6858      	ldr	r0, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	f000 f8b6 	bl	8004270 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6892      	ldr	r2, [r2, #8]
 800410c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	6892      	ldr	r2, [r2, #8]
 8004118:	f041 0101 	orr.w	r1, r1, #1
 800411c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	f023 0101 	bic.w	r1, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b08      	cmp	r3, #8
 800415c:	d102      	bne.n	8004164 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e001      	b.n	8004168 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004174:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800417a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004180:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004186:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800418c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004192:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004198:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800419e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80041a4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <FSMC_NORSRAM_Init+0xd0>)
 80041c4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041cc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80041d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	ea02 0103 	and.w	r1, r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4319      	orrs	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	0008fb7f 	.word	0x0008fb7f

08004208 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	431a      	orrs	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	431a      	orrs	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	431a      	orrs	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	3b01      	subs	r3, #1
 8004244:	051b      	lsls	r3, r3, #20
 8004246:	431a      	orrs	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	3b02      	subs	r3, #2
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	431a      	orrs	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	3201      	adds	r2, #1
 800425c:	4319      	orrs	r1, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d11d      	bne.n	80042c2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004290:	4013      	ands	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	6852      	ldr	r2, [r2, #4]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	4311      	orrs	r1, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	6892      	ldr	r2, [r2, #8]
 80042a2:	0212      	lsls	r2, r2, #8
 80042a4:	4311      	orrs	r1, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	6992      	ldr	r2, [r2, #24]
 80042aa:	4311      	orrs	r1, r2
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	68d2      	ldr	r2, [r2, #12]
 80042b0:	0412      	lsls	r2, r2, #16
 80042b2:	430a      	orrs	r2, r1
 80042b4:	ea43 0102 	orr.w	r1, r3, r2
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80042c0:	e005      	b.n	80042ce <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80042ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	cff00000 	.word	0xcff00000

080042e0 <__errno>:
 80042e0:	4b01      	ldr	r3, [pc, #4]	; (80042e8 <__errno+0x8>)
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	2000009c 	.word	0x2000009c

080042ec <__libc_init_array>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	2600      	movs	r6, #0
 80042f0:	4d0c      	ldr	r5, [pc, #48]	; (8004324 <__libc_init_array+0x38>)
 80042f2:	4c0d      	ldr	r4, [pc, #52]	; (8004328 <__libc_init_array+0x3c>)
 80042f4:	1b64      	subs	r4, r4, r5
 80042f6:	10a4      	asrs	r4, r4, #2
 80042f8:	42a6      	cmp	r6, r4
 80042fa:	d109      	bne.n	8004310 <__libc_init_array+0x24>
 80042fc:	f003 fa32 	bl	8007764 <_init>
 8004300:	2600      	movs	r6, #0
 8004302:	4d0a      	ldr	r5, [pc, #40]	; (800432c <__libc_init_array+0x40>)
 8004304:	4c0a      	ldr	r4, [pc, #40]	; (8004330 <__libc_init_array+0x44>)
 8004306:	1b64      	subs	r4, r4, r5
 8004308:	10a4      	asrs	r4, r4, #2
 800430a:	42a6      	cmp	r6, r4
 800430c:	d105      	bne.n	800431a <__libc_init_array+0x2e>
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	f855 3b04 	ldr.w	r3, [r5], #4
 8004314:	4798      	blx	r3
 8004316:	3601      	adds	r6, #1
 8004318:	e7ee      	b.n	80042f8 <__libc_init_array+0xc>
 800431a:	f855 3b04 	ldr.w	r3, [r5], #4
 800431e:	4798      	blx	r3
 8004320:	3601      	adds	r6, #1
 8004322:	e7f2      	b.n	800430a <__libc_init_array+0x1e>
 8004324:	08008200 	.word	0x08008200
 8004328:	08008200 	.word	0x08008200
 800432c:	08008200 	.word	0x08008200
 8004330:	08008204 	.word	0x08008204

08004334 <memset>:
 8004334:	4603      	mov	r3, r0
 8004336:	4402      	add	r2, r0
 8004338:	4293      	cmp	r3, r2
 800433a:	d100      	bne.n	800433e <memset+0xa>
 800433c:	4770      	bx	lr
 800433e:	f803 1b01 	strb.w	r1, [r3], #1
 8004342:	e7f9      	b.n	8004338 <memset+0x4>

08004344 <__cvt>:
 8004344:	2b00      	cmp	r3, #0
 8004346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800434a:	461f      	mov	r7, r3
 800434c:	bfbb      	ittet	lt
 800434e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004352:	461f      	movlt	r7, r3
 8004354:	2300      	movge	r3, #0
 8004356:	232d      	movlt	r3, #45	; 0x2d
 8004358:	b088      	sub	sp, #32
 800435a:	4614      	mov	r4, r2
 800435c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800435e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004360:	7013      	strb	r3, [r2, #0]
 8004362:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004364:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004368:	f023 0820 	bic.w	r8, r3, #32
 800436c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004370:	d005      	beq.n	800437e <__cvt+0x3a>
 8004372:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004376:	d100      	bne.n	800437a <__cvt+0x36>
 8004378:	3501      	adds	r5, #1
 800437a:	2302      	movs	r3, #2
 800437c:	e000      	b.n	8004380 <__cvt+0x3c>
 800437e:	2303      	movs	r3, #3
 8004380:	aa07      	add	r2, sp, #28
 8004382:	9204      	str	r2, [sp, #16]
 8004384:	aa06      	add	r2, sp, #24
 8004386:	e9cd a202 	strd	sl, r2, [sp, #8]
 800438a:	e9cd 3500 	strd	r3, r5, [sp]
 800438e:	4622      	mov	r2, r4
 8004390:	463b      	mov	r3, r7
 8004392:	f000 fce5 	bl	8004d60 <_dtoa_r>
 8004396:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800439a:	4606      	mov	r6, r0
 800439c:	d102      	bne.n	80043a4 <__cvt+0x60>
 800439e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043a0:	07db      	lsls	r3, r3, #31
 80043a2:	d522      	bpl.n	80043ea <__cvt+0xa6>
 80043a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043a8:	eb06 0905 	add.w	r9, r6, r5
 80043ac:	d110      	bne.n	80043d0 <__cvt+0x8c>
 80043ae:	7833      	ldrb	r3, [r6, #0]
 80043b0:	2b30      	cmp	r3, #48	; 0x30
 80043b2:	d10a      	bne.n	80043ca <__cvt+0x86>
 80043b4:	2200      	movs	r2, #0
 80043b6:	2300      	movs	r3, #0
 80043b8:	4620      	mov	r0, r4
 80043ba:	4639      	mov	r1, r7
 80043bc:	f7fc fb60 	bl	8000a80 <__aeabi_dcmpeq>
 80043c0:	b918      	cbnz	r0, 80043ca <__cvt+0x86>
 80043c2:	f1c5 0501 	rsb	r5, r5, #1
 80043c6:	f8ca 5000 	str.w	r5, [sl]
 80043ca:	f8da 3000 	ldr.w	r3, [sl]
 80043ce:	4499      	add	r9, r3
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	4620      	mov	r0, r4
 80043d6:	4639      	mov	r1, r7
 80043d8:	f7fc fb52 	bl	8000a80 <__aeabi_dcmpeq>
 80043dc:	b108      	cbz	r0, 80043e2 <__cvt+0x9e>
 80043de:	f8cd 901c 	str.w	r9, [sp, #28]
 80043e2:	2230      	movs	r2, #48	; 0x30
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	454b      	cmp	r3, r9
 80043e8:	d307      	bcc.n	80043fa <__cvt+0xb6>
 80043ea:	4630      	mov	r0, r6
 80043ec:	9b07      	ldr	r3, [sp, #28]
 80043ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043f0:	1b9b      	subs	r3, r3, r6
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	b008      	add	sp, #32
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	1c59      	adds	r1, r3, #1
 80043fc:	9107      	str	r1, [sp, #28]
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e7f0      	b.n	80043e4 <__cvt+0xa0>

08004402 <__exponent>:
 8004402:	4603      	mov	r3, r0
 8004404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004406:	2900      	cmp	r1, #0
 8004408:	f803 2b02 	strb.w	r2, [r3], #2
 800440c:	bfb6      	itet	lt
 800440e:	222d      	movlt	r2, #45	; 0x2d
 8004410:	222b      	movge	r2, #43	; 0x2b
 8004412:	4249      	neglt	r1, r1
 8004414:	2909      	cmp	r1, #9
 8004416:	7042      	strb	r2, [r0, #1]
 8004418:	dd2b      	ble.n	8004472 <__exponent+0x70>
 800441a:	f10d 0407 	add.w	r4, sp, #7
 800441e:	46a4      	mov	ip, r4
 8004420:	270a      	movs	r7, #10
 8004422:	fb91 f6f7 	sdiv	r6, r1, r7
 8004426:	460a      	mov	r2, r1
 8004428:	46a6      	mov	lr, r4
 800442a:	fb07 1516 	mls	r5, r7, r6, r1
 800442e:	2a63      	cmp	r2, #99	; 0x63
 8004430:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004434:	4631      	mov	r1, r6
 8004436:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800443a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800443e:	dcf0      	bgt.n	8004422 <__exponent+0x20>
 8004440:	3130      	adds	r1, #48	; 0x30
 8004442:	f1ae 0502 	sub.w	r5, lr, #2
 8004446:	f804 1c01 	strb.w	r1, [r4, #-1]
 800444a:	4629      	mov	r1, r5
 800444c:	1c44      	adds	r4, r0, #1
 800444e:	4561      	cmp	r1, ip
 8004450:	d30a      	bcc.n	8004468 <__exponent+0x66>
 8004452:	f10d 0209 	add.w	r2, sp, #9
 8004456:	eba2 020e 	sub.w	r2, r2, lr
 800445a:	4565      	cmp	r5, ip
 800445c:	bf88      	it	hi
 800445e:	2200      	movhi	r2, #0
 8004460:	4413      	add	r3, r2
 8004462:	1a18      	subs	r0, r3, r0
 8004464:	b003      	add	sp, #12
 8004466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004468:	f811 2b01 	ldrb.w	r2, [r1], #1
 800446c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004470:	e7ed      	b.n	800444e <__exponent+0x4c>
 8004472:	2330      	movs	r3, #48	; 0x30
 8004474:	3130      	adds	r1, #48	; 0x30
 8004476:	7083      	strb	r3, [r0, #2]
 8004478:	70c1      	strb	r1, [r0, #3]
 800447a:	1d03      	adds	r3, r0, #4
 800447c:	e7f1      	b.n	8004462 <__exponent+0x60>
	...

08004480 <_printf_float>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	b091      	sub	sp, #68	; 0x44
 8004486:	460c      	mov	r4, r1
 8004488:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800448c:	4616      	mov	r6, r2
 800448e:	461f      	mov	r7, r3
 8004490:	4605      	mov	r5, r0
 8004492:	f001 fa53 	bl	800593c <_localeconv_r>
 8004496:	6803      	ldr	r3, [r0, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	9309      	str	r3, [sp, #36]	; 0x24
 800449c:	f7fb fec4 	bl	8000228 <strlen>
 80044a0:	2300      	movs	r3, #0
 80044a2:	930e      	str	r3, [sp, #56]	; 0x38
 80044a4:	f8d8 3000 	ldr.w	r3, [r8]
 80044a8:	900a      	str	r0, [sp, #40]	; 0x28
 80044aa:	3307      	adds	r3, #7
 80044ac:	f023 0307 	bic.w	r3, r3, #7
 80044b0:	f103 0208 	add.w	r2, r3, #8
 80044b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044b8:	f8d4 b000 	ldr.w	fp, [r4]
 80044bc:	f8c8 2000 	str.w	r2, [r8]
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d6:	4640      	mov	r0, r8
 80044d8:	4b9c      	ldr	r3, [pc, #624]	; (800474c <_printf_float+0x2cc>)
 80044da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044dc:	f7fc fb02 	bl	8000ae4 <__aeabi_dcmpun>
 80044e0:	bb70      	cbnz	r0, 8004540 <_printf_float+0xc0>
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e6:	4640      	mov	r0, r8
 80044e8:	4b98      	ldr	r3, [pc, #608]	; (800474c <_printf_float+0x2cc>)
 80044ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ec:	f7fc fadc 	bl	8000aa8 <__aeabi_dcmple>
 80044f0:	bb30      	cbnz	r0, 8004540 <_printf_float+0xc0>
 80044f2:	2200      	movs	r2, #0
 80044f4:	2300      	movs	r3, #0
 80044f6:	4640      	mov	r0, r8
 80044f8:	4651      	mov	r1, sl
 80044fa:	f7fc facb 	bl	8000a94 <__aeabi_dcmplt>
 80044fe:	b110      	cbz	r0, 8004506 <_printf_float+0x86>
 8004500:	232d      	movs	r3, #45	; 0x2d
 8004502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004506:	4b92      	ldr	r3, [pc, #584]	; (8004750 <_printf_float+0x2d0>)
 8004508:	4892      	ldr	r0, [pc, #584]	; (8004754 <_printf_float+0x2d4>)
 800450a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800450e:	bf94      	ite	ls
 8004510:	4698      	movls	r8, r3
 8004512:	4680      	movhi	r8, r0
 8004514:	2303      	movs	r3, #3
 8004516:	f04f 0a00 	mov.w	sl, #0
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	f02b 0304 	bic.w	r3, fp, #4
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	4633      	mov	r3, r6
 8004524:	4621      	mov	r1, r4
 8004526:	4628      	mov	r0, r5
 8004528:	9700      	str	r7, [sp, #0]
 800452a:	aa0f      	add	r2, sp, #60	; 0x3c
 800452c:	f000 f9d4 	bl	80048d8 <_printf_common>
 8004530:	3001      	adds	r0, #1
 8004532:	f040 8090 	bne.w	8004656 <_printf_float+0x1d6>
 8004536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800453a:	b011      	add	sp, #68	; 0x44
 800453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004540:	4642      	mov	r2, r8
 8004542:	4653      	mov	r3, sl
 8004544:	4640      	mov	r0, r8
 8004546:	4651      	mov	r1, sl
 8004548:	f7fc facc 	bl	8000ae4 <__aeabi_dcmpun>
 800454c:	b148      	cbz	r0, 8004562 <_printf_float+0xe2>
 800454e:	f1ba 0f00 	cmp.w	sl, #0
 8004552:	bfb8      	it	lt
 8004554:	232d      	movlt	r3, #45	; 0x2d
 8004556:	4880      	ldr	r0, [pc, #512]	; (8004758 <_printf_float+0x2d8>)
 8004558:	bfb8      	it	lt
 800455a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800455e:	4b7f      	ldr	r3, [pc, #508]	; (800475c <_printf_float+0x2dc>)
 8004560:	e7d3      	b.n	800450a <_printf_float+0x8a>
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	d142      	bne.n	80045f2 <_printf_float+0x172>
 800456c:	2306      	movs	r3, #6
 800456e:	6063      	str	r3, [r4, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	9206      	str	r2, [sp, #24]
 8004574:	aa0e      	add	r2, sp, #56	; 0x38
 8004576:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800457a:	aa0d      	add	r2, sp, #52	; 0x34
 800457c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004580:	9203      	str	r2, [sp, #12]
 8004582:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004586:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	6863      	ldr	r3, [r4, #4]
 800458e:	4642      	mov	r2, r8
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	4628      	mov	r0, r5
 8004594:	4653      	mov	r3, sl
 8004596:	910b      	str	r1, [sp, #44]	; 0x2c
 8004598:	f7ff fed4 	bl	8004344 <__cvt>
 800459c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800459e:	4680      	mov	r8, r0
 80045a0:	2947      	cmp	r1, #71	; 0x47
 80045a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045a4:	d108      	bne.n	80045b8 <_printf_float+0x138>
 80045a6:	1cc8      	adds	r0, r1, #3
 80045a8:	db02      	blt.n	80045b0 <_printf_float+0x130>
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	4299      	cmp	r1, r3
 80045ae:	dd40      	ble.n	8004632 <_printf_float+0x1b2>
 80045b0:	f1a9 0902 	sub.w	r9, r9, #2
 80045b4:	fa5f f989 	uxtb.w	r9, r9
 80045b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045bc:	d81f      	bhi.n	80045fe <_printf_float+0x17e>
 80045be:	464a      	mov	r2, r9
 80045c0:	3901      	subs	r1, #1
 80045c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045c6:	910d      	str	r1, [sp, #52]	; 0x34
 80045c8:	f7ff ff1b 	bl	8004402 <__exponent>
 80045cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045ce:	4682      	mov	sl, r0
 80045d0:	1813      	adds	r3, r2, r0
 80045d2:	2a01      	cmp	r2, #1
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	dc02      	bgt.n	80045de <_printf_float+0x15e>
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	07d2      	lsls	r2, r2, #31
 80045dc:	d501      	bpl.n	80045e2 <_printf_float+0x162>
 80045de:	3301      	adds	r3, #1
 80045e0:	6123      	str	r3, [r4, #16]
 80045e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d09b      	beq.n	8004522 <_printf_float+0xa2>
 80045ea:	232d      	movs	r3, #45	; 0x2d
 80045ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f0:	e797      	b.n	8004522 <_printf_float+0xa2>
 80045f2:	2947      	cmp	r1, #71	; 0x47
 80045f4:	d1bc      	bne.n	8004570 <_printf_float+0xf0>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ba      	bne.n	8004570 <_printf_float+0xf0>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e7b7      	b.n	800456e <_printf_float+0xee>
 80045fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004602:	d118      	bne.n	8004636 <_printf_float+0x1b6>
 8004604:	2900      	cmp	r1, #0
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	dd0b      	ble.n	8004622 <_printf_float+0x1a2>
 800460a:	6121      	str	r1, [r4, #16]
 800460c:	b913      	cbnz	r3, 8004614 <_printf_float+0x194>
 800460e:	6822      	ldr	r2, [r4, #0]
 8004610:	07d0      	lsls	r0, r2, #31
 8004612:	d502      	bpl.n	800461a <_printf_float+0x19a>
 8004614:	3301      	adds	r3, #1
 8004616:	440b      	add	r3, r1
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	f04f 0a00 	mov.w	sl, #0
 800461e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004620:	e7df      	b.n	80045e2 <_printf_float+0x162>
 8004622:	b913      	cbnz	r3, 800462a <_printf_float+0x1aa>
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	07d2      	lsls	r2, r2, #31
 8004628:	d501      	bpl.n	800462e <_printf_float+0x1ae>
 800462a:	3302      	adds	r3, #2
 800462c:	e7f4      	b.n	8004618 <_printf_float+0x198>
 800462e:	2301      	movs	r3, #1
 8004630:	e7f2      	b.n	8004618 <_printf_float+0x198>
 8004632:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004638:	4299      	cmp	r1, r3
 800463a:	db05      	blt.n	8004648 <_printf_float+0x1c8>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	6121      	str	r1, [r4, #16]
 8004640:	07d8      	lsls	r0, r3, #31
 8004642:	d5ea      	bpl.n	800461a <_printf_float+0x19a>
 8004644:	1c4b      	adds	r3, r1, #1
 8004646:	e7e7      	b.n	8004618 <_printf_float+0x198>
 8004648:	2900      	cmp	r1, #0
 800464a:	bfcc      	ite	gt
 800464c:	2201      	movgt	r2, #1
 800464e:	f1c1 0202 	rsble	r2, r1, #2
 8004652:	4413      	add	r3, r2
 8004654:	e7e0      	b.n	8004618 <_printf_float+0x198>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	055a      	lsls	r2, r3, #21
 800465a:	d407      	bmi.n	800466c <_printf_float+0x1ec>
 800465c:	6923      	ldr	r3, [r4, #16]
 800465e:	4642      	mov	r2, r8
 8004660:	4631      	mov	r1, r6
 8004662:	4628      	mov	r0, r5
 8004664:	47b8      	blx	r7
 8004666:	3001      	adds	r0, #1
 8004668:	d12b      	bne.n	80046c2 <_printf_float+0x242>
 800466a:	e764      	b.n	8004536 <_printf_float+0xb6>
 800466c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004670:	f240 80dd 	bls.w	800482e <_printf_float+0x3ae>
 8004674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004678:	2200      	movs	r2, #0
 800467a:	2300      	movs	r3, #0
 800467c:	f7fc fa00 	bl	8000a80 <__aeabi_dcmpeq>
 8004680:	2800      	cmp	r0, #0
 8004682:	d033      	beq.n	80046ec <_printf_float+0x26c>
 8004684:	2301      	movs	r3, #1
 8004686:	4631      	mov	r1, r6
 8004688:	4628      	mov	r0, r5
 800468a:	4a35      	ldr	r2, [pc, #212]	; (8004760 <_printf_float+0x2e0>)
 800468c:	47b8      	blx	r7
 800468e:	3001      	adds	r0, #1
 8004690:	f43f af51 	beq.w	8004536 <_printf_float+0xb6>
 8004694:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004698:	429a      	cmp	r2, r3
 800469a:	db02      	blt.n	80046a2 <_printf_float+0x222>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	07d8      	lsls	r0, r3, #31
 80046a0:	d50f      	bpl.n	80046c2 <_printf_float+0x242>
 80046a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	f43f af42 	beq.w	8004536 <_printf_float+0xb6>
 80046b2:	f04f 0800 	mov.w	r8, #0
 80046b6:	f104 091a 	add.w	r9, r4, #26
 80046ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046bc:	3b01      	subs	r3, #1
 80046be:	4543      	cmp	r3, r8
 80046c0:	dc09      	bgt.n	80046d6 <_printf_float+0x256>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	079b      	lsls	r3, r3, #30
 80046c6:	f100 8102 	bmi.w	80048ce <_printf_float+0x44e>
 80046ca:	68e0      	ldr	r0, [r4, #12]
 80046cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046ce:	4298      	cmp	r0, r3
 80046d0:	bfb8      	it	lt
 80046d2:	4618      	movlt	r0, r3
 80046d4:	e731      	b.n	800453a <_printf_float+0xba>
 80046d6:	2301      	movs	r3, #1
 80046d8:	464a      	mov	r2, r9
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	f43f af28 	beq.w	8004536 <_printf_float+0xb6>
 80046e6:	f108 0801 	add.w	r8, r8, #1
 80046ea:	e7e6      	b.n	80046ba <_printf_float+0x23a>
 80046ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dc38      	bgt.n	8004764 <_printf_float+0x2e4>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	4a19      	ldr	r2, [pc, #100]	; (8004760 <_printf_float+0x2e0>)
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	f43f af1a 	beq.w	8004536 <_printf_float+0xb6>
 8004702:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004706:	4313      	orrs	r3, r2
 8004708:	d102      	bne.n	8004710 <_printf_float+0x290>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	d5d8      	bpl.n	80046c2 <_printf_float+0x242>
 8004710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004714:	4631      	mov	r1, r6
 8004716:	4628      	mov	r0, r5
 8004718:	47b8      	blx	r7
 800471a:	3001      	adds	r0, #1
 800471c:	f43f af0b 	beq.w	8004536 <_printf_float+0xb6>
 8004720:	f04f 0900 	mov.w	r9, #0
 8004724:	f104 0a1a 	add.w	sl, r4, #26
 8004728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800472a:	425b      	negs	r3, r3
 800472c:	454b      	cmp	r3, r9
 800472e:	dc01      	bgt.n	8004734 <_printf_float+0x2b4>
 8004730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004732:	e794      	b.n	800465e <_printf_float+0x1de>
 8004734:	2301      	movs	r3, #1
 8004736:	4652      	mov	r2, sl
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f aef9 	beq.w	8004536 <_printf_float+0xb6>
 8004744:	f109 0901 	add.w	r9, r9, #1
 8004748:	e7ee      	b.n	8004728 <_printf_float+0x2a8>
 800474a:	bf00      	nop
 800474c:	7fefffff 	.word	0x7fefffff
 8004750:	08007db8 	.word	0x08007db8
 8004754:	08007dbc 	.word	0x08007dbc
 8004758:	08007dc4 	.word	0x08007dc4
 800475c:	08007dc0 	.word	0x08007dc0
 8004760:	08007dc8 	.word	0x08007dc8
 8004764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004768:	429a      	cmp	r2, r3
 800476a:	bfa8      	it	ge
 800476c:	461a      	movge	r2, r3
 800476e:	2a00      	cmp	r2, #0
 8004770:	4691      	mov	r9, r2
 8004772:	dc37      	bgt.n	80047e4 <_printf_float+0x364>
 8004774:	f04f 0b00 	mov.w	fp, #0
 8004778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800477c:	f104 021a 	add.w	r2, r4, #26
 8004780:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004784:	ebaa 0309 	sub.w	r3, sl, r9
 8004788:	455b      	cmp	r3, fp
 800478a:	dc33      	bgt.n	80047f4 <_printf_float+0x374>
 800478c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004790:	429a      	cmp	r2, r3
 8004792:	db3b      	blt.n	800480c <_printf_float+0x38c>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	07da      	lsls	r2, r3, #31
 8004798:	d438      	bmi.n	800480c <_printf_float+0x38c>
 800479a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800479c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800479e:	eba3 020a 	sub.w	r2, r3, sl
 80047a2:	eba3 0901 	sub.w	r9, r3, r1
 80047a6:	4591      	cmp	r9, r2
 80047a8:	bfa8      	it	ge
 80047aa:	4691      	movge	r9, r2
 80047ac:	f1b9 0f00 	cmp.w	r9, #0
 80047b0:	dc34      	bgt.n	800481c <_printf_float+0x39c>
 80047b2:	f04f 0800 	mov.w	r8, #0
 80047b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047ba:	f104 0a1a 	add.w	sl, r4, #26
 80047be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	eba3 0309 	sub.w	r3, r3, r9
 80047c8:	4543      	cmp	r3, r8
 80047ca:	f77f af7a 	ble.w	80046c2 <_printf_float+0x242>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4652      	mov	r2, sl
 80047d2:	4631      	mov	r1, r6
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f aeac 	beq.w	8004536 <_printf_float+0xb6>
 80047de:	f108 0801 	add.w	r8, r8, #1
 80047e2:	e7ec      	b.n	80047be <_printf_float+0x33e>
 80047e4:	4613      	mov	r3, r2
 80047e6:	4631      	mov	r1, r6
 80047e8:	4642      	mov	r2, r8
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b8      	blx	r7
 80047ee:	3001      	adds	r0, #1
 80047f0:	d1c0      	bne.n	8004774 <_printf_float+0x2f4>
 80047f2:	e6a0      	b.n	8004536 <_printf_float+0xb6>
 80047f4:	2301      	movs	r3, #1
 80047f6:	4631      	mov	r1, r6
 80047f8:	4628      	mov	r0, r5
 80047fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	f43f ae99 	beq.w	8004536 <_printf_float+0xb6>
 8004804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004806:	f10b 0b01 	add.w	fp, fp, #1
 800480a:	e7b9      	b.n	8004780 <_printf_float+0x300>
 800480c:	4631      	mov	r1, r6
 800480e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004812:	4628      	mov	r0, r5
 8004814:	47b8      	blx	r7
 8004816:	3001      	adds	r0, #1
 8004818:	d1bf      	bne.n	800479a <_printf_float+0x31a>
 800481a:	e68c      	b.n	8004536 <_printf_float+0xb6>
 800481c:	464b      	mov	r3, r9
 800481e:	4631      	mov	r1, r6
 8004820:	4628      	mov	r0, r5
 8004822:	eb08 020a 	add.w	r2, r8, sl
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	d1c2      	bne.n	80047b2 <_printf_float+0x332>
 800482c:	e683      	b.n	8004536 <_printf_float+0xb6>
 800482e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004830:	2a01      	cmp	r2, #1
 8004832:	dc01      	bgt.n	8004838 <_printf_float+0x3b8>
 8004834:	07db      	lsls	r3, r3, #31
 8004836:	d537      	bpl.n	80048a8 <_printf_float+0x428>
 8004838:	2301      	movs	r3, #1
 800483a:	4642      	mov	r2, r8
 800483c:	4631      	mov	r1, r6
 800483e:	4628      	mov	r0, r5
 8004840:	47b8      	blx	r7
 8004842:	3001      	adds	r0, #1
 8004844:	f43f ae77 	beq.w	8004536 <_printf_float+0xb6>
 8004848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800484c:	4631      	mov	r1, r6
 800484e:	4628      	mov	r0, r5
 8004850:	47b8      	blx	r7
 8004852:	3001      	adds	r0, #1
 8004854:	f43f ae6f 	beq.w	8004536 <_printf_float+0xb6>
 8004858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	f7fc f90e 	bl	8000a80 <__aeabi_dcmpeq>
 8004864:	b9d8      	cbnz	r0, 800489e <_printf_float+0x41e>
 8004866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004868:	f108 0201 	add.w	r2, r8, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	d10e      	bne.n	8004896 <_printf_float+0x416>
 8004878:	e65d      	b.n	8004536 <_printf_float+0xb6>
 800487a:	2301      	movs	r3, #1
 800487c:	464a      	mov	r2, r9
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	f43f ae56 	beq.w	8004536 <_printf_float+0xb6>
 800488a:	f108 0801 	add.w	r8, r8, #1
 800488e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004890:	3b01      	subs	r3, #1
 8004892:	4543      	cmp	r3, r8
 8004894:	dcf1      	bgt.n	800487a <_printf_float+0x3fa>
 8004896:	4653      	mov	r3, sl
 8004898:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800489c:	e6e0      	b.n	8004660 <_printf_float+0x1e0>
 800489e:	f04f 0800 	mov.w	r8, #0
 80048a2:	f104 091a 	add.w	r9, r4, #26
 80048a6:	e7f2      	b.n	800488e <_printf_float+0x40e>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4642      	mov	r2, r8
 80048ac:	e7df      	b.n	800486e <_printf_float+0x3ee>
 80048ae:	2301      	movs	r3, #1
 80048b0:	464a      	mov	r2, r9
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f ae3c 	beq.w	8004536 <_printf_float+0xb6>
 80048be:	f108 0801 	add.w	r8, r8, #1
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048c6:	1a5b      	subs	r3, r3, r1
 80048c8:	4543      	cmp	r3, r8
 80048ca:	dcf0      	bgt.n	80048ae <_printf_float+0x42e>
 80048cc:	e6fd      	b.n	80046ca <_printf_float+0x24a>
 80048ce:	f04f 0800 	mov.w	r8, #0
 80048d2:	f104 0919 	add.w	r9, r4, #25
 80048d6:	e7f4      	b.n	80048c2 <_printf_float+0x442>

080048d8 <_printf_common>:
 80048d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	4616      	mov	r6, r2
 80048de:	4699      	mov	r9, r3
 80048e0:	688a      	ldr	r2, [r1, #8]
 80048e2:	690b      	ldr	r3, [r1, #16]
 80048e4:	4607      	mov	r7, r0
 80048e6:	4293      	cmp	r3, r2
 80048e8:	bfb8      	it	lt
 80048ea:	4613      	movlt	r3, r2
 80048ec:	6033      	str	r3, [r6, #0]
 80048ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f2:	460c      	mov	r4, r1
 80048f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048f8:	b10a      	cbz	r2, 80048fe <_printf_common+0x26>
 80048fa:	3301      	adds	r3, #1
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	0699      	lsls	r1, r3, #26
 8004902:	bf42      	ittt	mi
 8004904:	6833      	ldrmi	r3, [r6, #0]
 8004906:	3302      	addmi	r3, #2
 8004908:	6033      	strmi	r3, [r6, #0]
 800490a:	6825      	ldr	r5, [r4, #0]
 800490c:	f015 0506 	ands.w	r5, r5, #6
 8004910:	d106      	bne.n	8004920 <_printf_common+0x48>
 8004912:	f104 0a19 	add.w	sl, r4, #25
 8004916:	68e3      	ldr	r3, [r4, #12]
 8004918:	6832      	ldr	r2, [r6, #0]
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	42ab      	cmp	r3, r5
 800491e:	dc28      	bgt.n	8004972 <_printf_common+0x9a>
 8004920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004924:	1e13      	subs	r3, r2, #0
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	bf18      	it	ne
 800492a:	2301      	movne	r3, #1
 800492c:	0692      	lsls	r2, r2, #26
 800492e:	d42d      	bmi.n	800498c <_printf_common+0xb4>
 8004930:	4649      	mov	r1, r9
 8004932:	4638      	mov	r0, r7
 8004934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004938:	47c0      	blx	r8
 800493a:	3001      	adds	r0, #1
 800493c:	d020      	beq.n	8004980 <_printf_common+0xa8>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	68e5      	ldr	r5, [r4, #12]
 8004942:	f003 0306 	and.w	r3, r3, #6
 8004946:	2b04      	cmp	r3, #4
 8004948:	bf18      	it	ne
 800494a:	2500      	movne	r5, #0
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	f04f 0600 	mov.w	r6, #0
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	bf08      	it	eq
 8004956:	1aad      	subeq	r5, r5, r2
 8004958:	6922      	ldr	r2, [r4, #16]
 800495a:	bf08      	it	eq
 800495c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004960:	4293      	cmp	r3, r2
 8004962:	bfc4      	itt	gt
 8004964:	1a9b      	subgt	r3, r3, r2
 8004966:	18ed      	addgt	r5, r5, r3
 8004968:	341a      	adds	r4, #26
 800496a:	42b5      	cmp	r5, r6
 800496c:	d11a      	bne.n	80049a4 <_printf_common+0xcc>
 800496e:	2000      	movs	r0, #0
 8004970:	e008      	b.n	8004984 <_printf_common+0xac>
 8004972:	2301      	movs	r3, #1
 8004974:	4652      	mov	r2, sl
 8004976:	4649      	mov	r1, r9
 8004978:	4638      	mov	r0, r7
 800497a:	47c0      	blx	r8
 800497c:	3001      	adds	r0, #1
 800497e:	d103      	bne.n	8004988 <_printf_common+0xb0>
 8004980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004988:	3501      	adds	r5, #1
 800498a:	e7c4      	b.n	8004916 <_printf_common+0x3e>
 800498c:	2030      	movs	r0, #48	; 0x30
 800498e:	18e1      	adds	r1, r4, r3
 8004990:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800499a:	4422      	add	r2, r4
 800499c:	3302      	adds	r3, #2
 800499e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a2:	e7c5      	b.n	8004930 <_printf_common+0x58>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4622      	mov	r2, r4
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d0e6      	beq.n	8004980 <_printf_common+0xa8>
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7d9      	b.n	800496a <_printf_common+0x92>
	...

080049b8 <_printf_i>:
 80049b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	7e0f      	ldrb	r7, [r1, #24]
 80049be:	4691      	mov	r9, r2
 80049c0:	2f78      	cmp	r7, #120	; 0x78
 80049c2:	4680      	mov	r8, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	469a      	mov	sl, r3
 80049c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ce:	d807      	bhi.n	80049e0 <_printf_i+0x28>
 80049d0:	2f62      	cmp	r7, #98	; 0x62
 80049d2:	d80a      	bhi.n	80049ea <_printf_i+0x32>
 80049d4:	2f00      	cmp	r7, #0
 80049d6:	f000 80d9 	beq.w	8004b8c <_printf_i+0x1d4>
 80049da:	2f58      	cmp	r7, #88	; 0x58
 80049dc:	f000 80a4 	beq.w	8004b28 <_printf_i+0x170>
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e8:	e03a      	b.n	8004a60 <_printf_i+0xa8>
 80049ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ee:	2b15      	cmp	r3, #21
 80049f0:	d8f6      	bhi.n	80049e0 <_printf_i+0x28>
 80049f2:	a101      	add	r1, pc, #4	; (adr r1, 80049f8 <_printf_i+0x40>)
 80049f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a65 	.word	0x08004a65
 8004a00:	080049e1 	.word	0x080049e1
 8004a04:	080049e1 	.word	0x080049e1
 8004a08:	080049e1 	.word	0x080049e1
 8004a0c:	080049e1 	.word	0x080049e1
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	080049e1 	.word	0x080049e1
 8004a18:	080049e1 	.word	0x080049e1
 8004a1c:	080049e1 	.word	0x080049e1
 8004a20:	080049e1 	.word	0x080049e1
 8004a24:	08004b73 	.word	0x08004b73
 8004a28:	08004a95 	.word	0x08004a95
 8004a2c:	08004b55 	.word	0x08004b55
 8004a30:	080049e1 	.word	0x080049e1
 8004a34:	080049e1 	.word	0x080049e1
 8004a38:	08004b95 	.word	0x08004b95
 8004a3c:	080049e1 	.word	0x080049e1
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	080049e1 	.word	0x080049e1
 8004a48:	080049e1 	.word	0x080049e1
 8004a4c:	08004b5d 	.word	0x08004b5d
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a4      	b.n	8004bae <_printf_i+0x1f6>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	0606      	lsls	r6, r0, #24
 8004a6a:	f101 0304 	add.w	r3, r1, #4
 8004a6e:	d50a      	bpl.n	8004a86 <_printf_i+0xce>
 8004a70:	680e      	ldr	r6, [r1, #0]
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	2e00      	cmp	r6, #0
 8004a76:	da03      	bge.n	8004a80 <_printf_i+0xc8>
 8004a78:	232d      	movs	r3, #45	; 0x2d
 8004a7a:	4276      	negs	r6, r6
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a80:	230a      	movs	r3, #10
 8004a82:	485e      	ldr	r0, [pc, #376]	; (8004bfc <_printf_i+0x244>)
 8004a84:	e019      	b.n	8004aba <_printf_i+0x102>
 8004a86:	680e      	ldr	r6, [r1, #0]
 8004a88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	bf18      	it	ne
 8004a90:	b236      	sxthne	r6, r6
 8004a92:	e7ef      	b.n	8004a74 <_printf_i+0xbc>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	1d19      	adds	r1, r3, #4
 8004a9a:	6029      	str	r1, [r5, #0]
 8004a9c:	0601      	lsls	r1, r0, #24
 8004a9e:	d501      	bpl.n	8004aa4 <_printf_i+0xec>
 8004aa0:	681e      	ldr	r6, [r3, #0]
 8004aa2:	e002      	b.n	8004aaa <_printf_i+0xf2>
 8004aa4:	0646      	lsls	r6, r0, #25
 8004aa6:	d5fb      	bpl.n	8004aa0 <_printf_i+0xe8>
 8004aa8:	881e      	ldrh	r6, [r3, #0]
 8004aaa:	2f6f      	cmp	r7, #111	; 0x6f
 8004aac:	bf0c      	ite	eq
 8004aae:	2308      	moveq	r3, #8
 8004ab0:	230a      	movne	r3, #10
 8004ab2:	4852      	ldr	r0, [pc, #328]	; (8004bfc <_printf_i+0x244>)
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aba:	6865      	ldr	r5, [r4, #4]
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	bfa8      	it	ge
 8004ac0:	6821      	ldrge	r1, [r4, #0]
 8004ac2:	60a5      	str	r5, [r4, #8]
 8004ac4:	bfa4      	itt	ge
 8004ac6:	f021 0104 	bicge.w	r1, r1, #4
 8004aca:	6021      	strge	r1, [r4, #0]
 8004acc:	b90e      	cbnz	r6, 8004ad2 <_printf_i+0x11a>
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	d04d      	beq.n	8004b6e <_printf_i+0x1b6>
 8004ad2:	4615      	mov	r5, r2
 8004ad4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ad8:	fb03 6711 	mls	r7, r3, r1, r6
 8004adc:	5dc7      	ldrb	r7, [r0, r7]
 8004ade:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae2:	4637      	mov	r7, r6
 8004ae4:	42bb      	cmp	r3, r7
 8004ae6:	460e      	mov	r6, r1
 8004ae8:	d9f4      	bls.n	8004ad4 <_printf_i+0x11c>
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d10b      	bne.n	8004b06 <_printf_i+0x14e>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	07de      	lsls	r6, r3, #31
 8004af2:	d508      	bpl.n	8004b06 <_printf_i+0x14e>
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	6861      	ldr	r1, [r4, #4]
 8004af8:	4299      	cmp	r1, r3
 8004afa:	bfde      	ittt	le
 8004afc:	2330      	movle	r3, #48	; 0x30
 8004afe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b02:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b06:	1b52      	subs	r2, r2, r5
 8004b08:	6122      	str	r2, [r4, #16]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f8cd a000 	str.w	sl, [sp]
 8004b14:	aa03      	add	r2, sp, #12
 8004b16:	f7ff fedf 	bl	80048d8 <_printf_common>
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d14c      	bne.n	8004bb8 <_printf_i+0x200>
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b22:	b004      	add	sp, #16
 8004b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b28:	4834      	ldr	r0, [pc, #208]	; (8004bfc <_printf_i+0x244>)
 8004b2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b2e:	6829      	ldr	r1, [r5, #0]
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b36:	6029      	str	r1, [r5, #0]
 8004b38:	061d      	lsls	r5, r3, #24
 8004b3a:	d514      	bpl.n	8004b66 <_printf_i+0x1ae>
 8004b3c:	07df      	lsls	r7, r3, #31
 8004b3e:	bf44      	itt	mi
 8004b40:	f043 0320 	orrmi.w	r3, r3, #32
 8004b44:	6023      	strmi	r3, [r4, #0]
 8004b46:	b91e      	cbnz	r6, 8004b50 <_printf_i+0x198>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	f023 0320 	bic.w	r3, r3, #32
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	2310      	movs	r3, #16
 8004b52:	e7af      	b.n	8004ab4 <_printf_i+0xfc>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f043 0320 	orr.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	2378      	movs	r3, #120	; 0x78
 8004b5e:	4828      	ldr	r0, [pc, #160]	; (8004c00 <_printf_i+0x248>)
 8004b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b64:	e7e3      	b.n	8004b2e <_printf_i+0x176>
 8004b66:	0659      	lsls	r1, r3, #25
 8004b68:	bf48      	it	mi
 8004b6a:	b2b6      	uxthmi	r6, r6
 8004b6c:	e7e6      	b.n	8004b3c <_printf_i+0x184>
 8004b6e:	4615      	mov	r5, r2
 8004b70:	e7bb      	b.n	8004aea <_printf_i+0x132>
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	6826      	ldr	r6, [r4, #0]
 8004b76:	1d18      	adds	r0, r3, #4
 8004b78:	6961      	ldr	r1, [r4, #20]
 8004b7a:	6028      	str	r0, [r5, #0]
 8004b7c:	0635      	lsls	r5, r6, #24
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	d501      	bpl.n	8004b86 <_printf_i+0x1ce>
 8004b82:	6019      	str	r1, [r3, #0]
 8004b84:	e002      	b.n	8004b8c <_printf_i+0x1d4>
 8004b86:	0670      	lsls	r0, r6, #25
 8004b88:	d5fb      	bpl.n	8004b82 <_printf_i+0x1ca>
 8004b8a:	8019      	strh	r1, [r3, #0]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4615      	mov	r5, r2
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	e7ba      	b.n	8004b0a <_printf_i+0x152>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	2100      	movs	r1, #0
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 fed7 	bl	8005954 <memchr>
 8004ba6:	b108      	cbz	r0, 8004bac <_printf_i+0x1f4>
 8004ba8:	1b40      	subs	r0, r0, r5
 8004baa:	6060      	str	r0, [r4, #4]
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb6:	e7a8      	b.n	8004b0a <_printf_i+0x152>
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	47d0      	blx	sl
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0ab      	beq.n	8004b1e <_printf_i+0x166>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	079b      	lsls	r3, r3, #30
 8004bca:	d413      	bmi.n	8004bf4 <_printf_i+0x23c>
 8004bcc:	68e0      	ldr	r0, [r4, #12]
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	4298      	cmp	r0, r3
 8004bd2:	bfb8      	it	lt
 8004bd4:	4618      	movlt	r0, r3
 8004bd6:	e7a4      	b.n	8004b22 <_printf_i+0x16a>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4632      	mov	r2, r6
 8004bdc:	4649      	mov	r1, r9
 8004bde:	4640      	mov	r0, r8
 8004be0:	47d0      	blx	sl
 8004be2:	3001      	adds	r0, #1
 8004be4:	d09b      	beq.n	8004b1e <_printf_i+0x166>
 8004be6:	3501      	adds	r5, #1
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	9903      	ldr	r1, [sp, #12]
 8004bec:	1a5b      	subs	r3, r3, r1
 8004bee:	42ab      	cmp	r3, r5
 8004bf0:	dcf2      	bgt.n	8004bd8 <_printf_i+0x220>
 8004bf2:	e7eb      	b.n	8004bcc <_printf_i+0x214>
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	f104 0619 	add.w	r6, r4, #25
 8004bfa:	e7f5      	b.n	8004be8 <_printf_i+0x230>
 8004bfc:	08007dca 	.word	0x08007dca
 8004c00:	08007ddb 	.word	0x08007ddb

08004c04 <siprintf>:
 8004c04:	b40e      	push	{r1, r2, r3}
 8004c06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c0a:	b500      	push	{lr}
 8004c0c:	b09c      	sub	sp, #112	; 0x70
 8004c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c10:	9002      	str	r0, [sp, #8]
 8004c12:	9006      	str	r0, [sp, #24]
 8004c14:	9107      	str	r1, [sp, #28]
 8004c16:	9104      	str	r1, [sp, #16]
 8004c18:	4808      	ldr	r0, [pc, #32]	; (8004c3c <siprintf+0x38>)
 8004c1a:	4909      	ldr	r1, [pc, #36]	; (8004c40 <siprintf+0x3c>)
 8004c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c20:	9105      	str	r1, [sp, #20]
 8004c22:	6800      	ldr	r0, [r0, #0]
 8004c24:	a902      	add	r1, sp, #8
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	f001 fb7e 	bl	8006328 <_svfiprintf_r>
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	9b02      	ldr	r3, [sp, #8]
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	b01c      	add	sp, #112	; 0x70
 8004c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c38:	b003      	add	sp, #12
 8004c3a:	4770      	bx	lr
 8004c3c:	2000009c 	.word	0x2000009c
 8004c40:	ffff0208 	.word	0xffff0208

08004c44 <quorem>:
 8004c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	6903      	ldr	r3, [r0, #16]
 8004c4a:	690c      	ldr	r4, [r1, #16]
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	42a3      	cmp	r3, r4
 8004c50:	f2c0 8082 	blt.w	8004d58 <quorem+0x114>
 8004c54:	3c01      	subs	r4, #1
 8004c56:	f100 0514 	add.w	r5, r0, #20
 8004c5a:	f101 0814 	add.w	r8, r1, #20
 8004c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c7c:	d331      	bcc.n	8004ce2 <quorem+0x9e>
 8004c7e:	f04f 0e00 	mov.w	lr, #0
 8004c82:	4640      	mov	r0, r8
 8004c84:	46ac      	mov	ip, r5
 8004c86:	46f2      	mov	sl, lr
 8004c88:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c8c:	b293      	uxth	r3, r2
 8004c8e:	fb06 e303 	mla	r3, r6, r3, lr
 8004c92:	0c12      	lsrs	r2, r2, #16
 8004c94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	fb06 e202 	mla	r2, r6, r2, lr
 8004c9e:	ebaa 0303 	sub.w	r3, sl, r3
 8004ca2:	f8dc a000 	ldr.w	sl, [ip]
 8004ca6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004caa:	fa1f fa8a 	uxth.w	sl, sl
 8004cae:	4453      	add	r3, sl
 8004cb0:	f8dc a000 	ldr.w	sl, [ip]
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004cba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cc4:	4581      	cmp	r9, r0
 8004cc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004cca:	f84c 3b04 	str.w	r3, [ip], #4
 8004cce:	d2db      	bcs.n	8004c88 <quorem+0x44>
 8004cd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004cd4:	b92b      	cbnz	r3, 8004ce2 <quorem+0x9e>
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	429d      	cmp	r5, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	d32f      	bcc.n	8004d40 <quorem+0xfc>
 8004ce0:	613c      	str	r4, [r7, #16]
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	f001 f8d0 	bl	8005e88 <__mcmp>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	db25      	blt.n	8004d38 <quorem+0xf4>
 8004cec:	4628      	mov	r0, r5
 8004cee:	f04f 0c00 	mov.w	ip, #0
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	f858 1b04 	ldr.w	r1, [r8], #4
 8004cf8:	f8d0 e000 	ldr.w	lr, [r0]
 8004cfc:	b28b      	uxth	r3, r1
 8004cfe:	ebac 0303 	sub.w	r3, ip, r3
 8004d02:	fa1f f28e 	uxth.w	r2, lr
 8004d06:	4413      	add	r3, r2
 8004d08:	0c0a      	lsrs	r2, r1, #16
 8004d0a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d18:	45c1      	cmp	r9, r8
 8004d1a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d1e:	f840 3b04 	str.w	r3, [r0], #4
 8004d22:	d2e7      	bcs.n	8004cf4 <quorem+0xb0>
 8004d24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d2c:	b922      	cbnz	r2, 8004d38 <quorem+0xf4>
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	429d      	cmp	r5, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	d30a      	bcc.n	8004d4c <quorem+0x108>
 8004d36:	613c      	str	r4, [r7, #16]
 8004d38:	4630      	mov	r0, r6
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	3b04      	subs	r3, #4
 8004d44:	2a00      	cmp	r2, #0
 8004d46:	d1cb      	bne.n	8004ce0 <quorem+0x9c>
 8004d48:	3c01      	subs	r4, #1
 8004d4a:	e7c6      	b.n	8004cda <quorem+0x96>
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	d1f0      	bne.n	8004d36 <quorem+0xf2>
 8004d54:	3c01      	subs	r4, #1
 8004d56:	e7eb      	b.n	8004d30 <quorem+0xec>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e7ee      	b.n	8004d3a <quorem+0xf6>
 8004d5c:	0000      	movs	r0, r0
	...

08004d60 <_dtoa_r>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	4616      	mov	r6, r2
 8004d66:	461f      	mov	r7, r3
 8004d68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d6a:	b099      	sub	sp, #100	; 0x64
 8004d6c:	4605      	mov	r5, r0
 8004d6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d76:	b974      	cbnz	r4, 8004d96 <_dtoa_r+0x36>
 8004d78:	2010      	movs	r0, #16
 8004d7a:	f000 fde3 	bl	8005944 <malloc>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6268      	str	r0, [r5, #36]	; 0x24
 8004d82:	b920      	cbnz	r0, 8004d8e <_dtoa_r+0x2e>
 8004d84:	21ea      	movs	r1, #234	; 0xea
 8004d86:	4ba8      	ldr	r3, [pc, #672]	; (8005028 <_dtoa_r+0x2c8>)
 8004d88:	48a8      	ldr	r0, [pc, #672]	; (800502c <_dtoa_r+0x2cc>)
 8004d8a:	f001 fbdd 	bl	8006548 <__assert_func>
 8004d8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d92:	6004      	str	r4, [r0, #0]
 8004d94:	60c4      	str	r4, [r0, #12]
 8004d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	b151      	cbz	r1, 8004db2 <_dtoa_r+0x52>
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4093      	lsls	r3, r2
 8004da2:	604a      	str	r2, [r1, #4]
 8004da4:	608b      	str	r3, [r1, #8]
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fe30 	bl	8005a0c <_Bfree>
 8004dac:	2200      	movs	r2, #0
 8004dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	1e3b      	subs	r3, r7, #0
 8004db4:	bfaf      	iteee	ge
 8004db6:	2300      	movge	r3, #0
 8004db8:	2201      	movlt	r2, #1
 8004dba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004dbe:	9305      	strlt	r3, [sp, #20]
 8004dc0:	bfa8      	it	ge
 8004dc2:	f8c8 3000 	strge.w	r3, [r8]
 8004dc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004dca:	4b99      	ldr	r3, [pc, #612]	; (8005030 <_dtoa_r+0x2d0>)
 8004dcc:	bfb8      	it	lt
 8004dce:	f8c8 2000 	strlt.w	r2, [r8]
 8004dd2:	ea33 0309 	bics.w	r3, r3, r9
 8004dd6:	d119      	bne.n	8004e0c <_dtoa_r+0xac>
 8004dd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ddc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004de4:	4333      	orrs	r3, r6
 8004de6:	f000 857f 	beq.w	80058e8 <_dtoa_r+0xb88>
 8004dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dec:	b953      	cbnz	r3, 8004e04 <_dtoa_r+0xa4>
 8004dee:	4b91      	ldr	r3, [pc, #580]	; (8005034 <_dtoa_r+0x2d4>)
 8004df0:	e022      	b.n	8004e38 <_dtoa_r+0xd8>
 8004df2:	4b91      	ldr	r3, [pc, #580]	; (8005038 <_dtoa_r+0x2d8>)
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	3308      	adds	r3, #8
 8004df8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	9803      	ldr	r0, [sp, #12]
 8004dfe:	b019      	add	sp, #100	; 0x64
 8004e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e04:	4b8b      	ldr	r3, [pc, #556]	; (8005034 <_dtoa_r+0x2d4>)
 8004e06:	9303      	str	r3, [sp, #12]
 8004e08:	3303      	adds	r3, #3
 8004e0a:	e7f5      	b.n	8004df8 <_dtoa_r+0x98>
 8004e0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f7fb fe30 	bl	8000a80 <__aeabi_dcmpeq>
 8004e20:	4680      	mov	r8, r0
 8004e22:	b158      	cbz	r0, 8004e3c <_dtoa_r+0xdc>
 8004e24:	2301      	movs	r3, #1
 8004e26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8558 	beq.w	80058e2 <_dtoa_r+0xb82>
 8004e32:	4882      	ldr	r0, [pc, #520]	; (800503c <_dtoa_r+0x2dc>)
 8004e34:	6018      	str	r0, [r3, #0]
 8004e36:	1e43      	subs	r3, r0, #1
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	e7df      	b.n	8004dfc <_dtoa_r+0x9c>
 8004e3c:	ab16      	add	r3, sp, #88	; 0x58
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	ab17      	add	r3, sp, #92	; 0x5c
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4628      	mov	r0, r5
 8004e46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e4a:	f001 f8c5 	bl	8005fd8 <__d2b>
 8004e4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e52:	4683      	mov	fp, r0
 8004e54:	2c00      	cmp	r4, #0
 8004e56:	d07f      	beq.n	8004f58 <_dtoa_r+0x1f8>
 8004e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e72:	2200      	movs	r2, #0
 8004e74:	4b72      	ldr	r3, [pc, #456]	; (8005040 <_dtoa_r+0x2e0>)
 8004e76:	f7fb f9e3 	bl	8000240 <__aeabi_dsub>
 8004e7a:	a365      	add	r3, pc, #404	; (adr r3, 8005010 <_dtoa_r+0x2b0>)
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f7fb fb96 	bl	80005b0 <__aeabi_dmul>
 8004e84:	a364      	add	r3, pc, #400	; (adr r3, 8005018 <_dtoa_r+0x2b8>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb f9db 	bl	8000244 <__adddf3>
 8004e8e:	4606      	mov	r6, r0
 8004e90:	4620      	mov	r0, r4
 8004e92:	460f      	mov	r7, r1
 8004e94:	f7fb fb22 	bl	80004dc <__aeabi_i2d>
 8004e98:	a361      	add	r3, pc, #388	; (adr r3, 8005020 <_dtoa_r+0x2c0>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f7fb fb87 	bl	80005b0 <__aeabi_dmul>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	f7fb f9cb 	bl	8000244 <__adddf3>
 8004eae:	4606      	mov	r6, r0
 8004eb0:	460f      	mov	r7, r1
 8004eb2:	f7fb fe2d 	bl	8000b10 <__aeabi_d2iz>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4682      	mov	sl, r0
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	f7fb fde8 	bl	8000a94 <__aeabi_dcmplt>
 8004ec4:	b148      	cbz	r0, 8004eda <_dtoa_r+0x17a>
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	f7fb fb08 	bl	80004dc <__aeabi_i2d>
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	f7fb fdd6 	bl	8000a80 <__aeabi_dcmpeq>
 8004ed4:	b908      	cbnz	r0, 8004eda <_dtoa_r+0x17a>
 8004ed6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004eda:	f1ba 0f16 	cmp.w	sl, #22
 8004ede:	d858      	bhi.n	8004f92 <_dtoa_r+0x232>
 8004ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ee4:	4b57      	ldr	r3, [pc, #348]	; (8005044 <_dtoa_r+0x2e4>)
 8004ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f7fb fdd1 	bl	8000a94 <__aeabi_dcmplt>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d04f      	beq.n	8004f96 <_dtoa_r+0x236>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004efc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004efe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f00:	1b1c      	subs	r4, r3, r4
 8004f02:	1e63      	subs	r3, r4, #1
 8004f04:	9309      	str	r3, [sp, #36]	; 0x24
 8004f06:	bf49      	itett	mi
 8004f08:	f1c4 0301 	rsbmi	r3, r4, #1
 8004f0c:	2300      	movpl	r3, #0
 8004f0e:	9306      	strmi	r3, [sp, #24]
 8004f10:	2300      	movmi	r3, #0
 8004f12:	bf54      	ite	pl
 8004f14:	9306      	strpl	r3, [sp, #24]
 8004f16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f18:	f1ba 0f00 	cmp.w	sl, #0
 8004f1c:	db3d      	blt.n	8004f9a <_dtoa_r+0x23a>
 8004f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004f24:	4453      	add	r3, sl
 8004f26:	9309      	str	r3, [sp, #36]	; 0x24
 8004f28:	2300      	movs	r3, #0
 8004f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	f200 808c 	bhi.w	800504c <_dtoa_r+0x2ec>
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	bfc4      	itt	gt
 8004f38:	3b04      	subgt	r3, #4
 8004f3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f3e:	bfc8      	it	gt
 8004f40:	2400      	movgt	r4, #0
 8004f42:	f1a3 0302 	sub.w	r3, r3, #2
 8004f46:	bfd8      	it	le
 8004f48:	2401      	movle	r4, #1
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	f200 808a 	bhi.w	8005064 <_dtoa_r+0x304>
 8004f50:	e8df f003 	tbb	[pc, r3]
 8004f54:	5b4d4f2d 	.word	0x5b4d4f2d
 8004f58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f5c:	441c      	add	r4, r3
 8004f5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	bfc3      	ittte	gt
 8004f66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f72:	f1c3 0320 	rsble	r3, r3, #32
 8004f76:	bfc6      	itte	gt
 8004f78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f7c:	4318      	orrgt	r0, r3
 8004f7e:	fa06 f003 	lslle.w	r0, r6, r3
 8004f82:	f7fb fa9b 	bl	80004bc <__aeabi_ui2d>
 8004f86:	2301      	movs	r3, #1
 8004f88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f8c:	3c01      	subs	r4, #1
 8004f8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f90:	e76f      	b.n	8004e72 <_dtoa_r+0x112>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e7b2      	b.n	8004efc <_dtoa_r+0x19c>
 8004f96:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f98:	e7b1      	b.n	8004efe <_dtoa_r+0x19e>
 8004f9a:	9b06      	ldr	r3, [sp, #24]
 8004f9c:	eba3 030a 	sub.w	r3, r3, sl
 8004fa0:	9306      	str	r3, [sp, #24]
 8004fa2:	f1ca 0300 	rsb	r3, sl, #0
 8004fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa8:	2300      	movs	r3, #0
 8004faa:	930e      	str	r3, [sp, #56]	; 0x38
 8004fac:	e7be      	b.n	8004f2c <_dtoa_r+0x1cc>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dc58      	bgt.n	800506a <_dtoa_r+0x30a>
 8004fb8:	f04f 0901 	mov.w	r9, #1
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8004fc2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004fca:	6042      	str	r2, [r0, #4]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	f102 0614 	add.w	r6, r2, #20
 8004fd2:	429e      	cmp	r6, r3
 8004fd4:	6841      	ldr	r1, [r0, #4]
 8004fd6:	d94e      	bls.n	8005076 <_dtoa_r+0x316>
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f000 fcd7 	bl	800598c <_Balloc>
 8004fde:	9003      	str	r0, [sp, #12]
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d14c      	bne.n	800507e <_dtoa_r+0x31e>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <_dtoa_r+0x2e8>)
 8004fec:	e6cc      	b.n	8004d88 <_dtoa_r+0x28>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e7de      	b.n	8004fb0 <_dtoa_r+0x250>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ff6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ff8:	eb0a 0903 	add.w	r9, sl, r3
 8004ffc:	f109 0301 	add.w	r3, r9, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	9308      	str	r3, [sp, #32]
 8005004:	bfb8      	it	lt
 8005006:	2301      	movlt	r3, #1
 8005008:	e7dd      	b.n	8004fc6 <_dtoa_r+0x266>
 800500a:	2301      	movs	r3, #1
 800500c:	e7f2      	b.n	8004ff4 <_dtoa_r+0x294>
 800500e:	bf00      	nop
 8005010:	636f4361 	.word	0x636f4361
 8005014:	3fd287a7 	.word	0x3fd287a7
 8005018:	8b60c8b3 	.word	0x8b60c8b3
 800501c:	3fc68a28 	.word	0x3fc68a28
 8005020:	509f79fb 	.word	0x509f79fb
 8005024:	3fd34413 	.word	0x3fd34413
 8005028:	08007df9 	.word	0x08007df9
 800502c:	08007e10 	.word	0x08007e10
 8005030:	7ff00000 	.word	0x7ff00000
 8005034:	08007df5 	.word	0x08007df5
 8005038:	08007dec 	.word	0x08007dec
 800503c:	08007dc9 	.word	0x08007dc9
 8005040:	3ff80000 	.word	0x3ff80000
 8005044:	08007f00 	.word	0x08007f00
 8005048:	08007e6b 	.word	0x08007e6b
 800504c:	2401      	movs	r4, #1
 800504e:	2300      	movs	r3, #0
 8005050:	940b      	str	r4, [sp, #44]	; 0x2c
 8005052:	9322      	str	r3, [sp, #136]	; 0x88
 8005054:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005058:	2200      	movs	r2, #0
 800505a:	2312      	movs	r3, #18
 800505c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005060:	9223      	str	r2, [sp, #140]	; 0x8c
 8005062:	e7b0      	b.n	8004fc6 <_dtoa_r+0x266>
 8005064:	2301      	movs	r3, #1
 8005066:	930b      	str	r3, [sp, #44]	; 0x2c
 8005068:	e7f4      	b.n	8005054 <_dtoa_r+0x2f4>
 800506a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800506e:	464b      	mov	r3, r9
 8005070:	f8cd 9020 	str.w	r9, [sp, #32]
 8005074:	e7a7      	b.n	8004fc6 <_dtoa_r+0x266>
 8005076:	3101      	adds	r1, #1
 8005078:	6041      	str	r1, [r0, #4]
 800507a:	0052      	lsls	r2, r2, #1
 800507c:	e7a7      	b.n	8004fce <_dtoa_r+0x26e>
 800507e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005080:	9a03      	ldr	r2, [sp, #12]
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	9b08      	ldr	r3, [sp, #32]
 8005086:	2b0e      	cmp	r3, #14
 8005088:	f200 80a8 	bhi.w	80051dc <_dtoa_r+0x47c>
 800508c:	2c00      	cmp	r4, #0
 800508e:	f000 80a5 	beq.w	80051dc <_dtoa_r+0x47c>
 8005092:	f1ba 0f00 	cmp.w	sl, #0
 8005096:	dd34      	ble.n	8005102 <_dtoa_r+0x3a2>
 8005098:	4a9a      	ldr	r2, [pc, #616]	; (8005304 <_dtoa_r+0x5a4>)
 800509a:	f00a 030f 	and.w	r3, sl, #15
 800509e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80050a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80050b2:	d016      	beq.n	80050e2 <_dtoa_r+0x382>
 80050b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050b8:	4b93      	ldr	r3, [pc, #588]	; (8005308 <_dtoa_r+0x5a8>)
 80050ba:	2703      	movs	r7, #3
 80050bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050c0:	f7fb fba0 	bl	8000804 <__aeabi_ddiv>
 80050c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050c8:	f004 040f 	and.w	r4, r4, #15
 80050cc:	4e8e      	ldr	r6, [pc, #568]	; (8005308 <_dtoa_r+0x5a8>)
 80050ce:	b954      	cbnz	r4, 80050e6 <_dtoa_r+0x386>
 80050d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050d8:	f7fb fb94 	bl	8000804 <__aeabi_ddiv>
 80050dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e0:	e029      	b.n	8005136 <_dtoa_r+0x3d6>
 80050e2:	2702      	movs	r7, #2
 80050e4:	e7f2      	b.n	80050cc <_dtoa_r+0x36c>
 80050e6:	07e1      	lsls	r1, r4, #31
 80050e8:	d508      	bpl.n	80050fc <_dtoa_r+0x39c>
 80050ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050f2:	f7fb fa5d 	bl	80005b0 <__aeabi_dmul>
 80050f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050fa:	3701      	adds	r7, #1
 80050fc:	1064      	asrs	r4, r4, #1
 80050fe:	3608      	adds	r6, #8
 8005100:	e7e5      	b.n	80050ce <_dtoa_r+0x36e>
 8005102:	f000 80a5 	beq.w	8005250 <_dtoa_r+0x4f0>
 8005106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800510a:	f1ca 0400 	rsb	r4, sl, #0
 800510e:	4b7d      	ldr	r3, [pc, #500]	; (8005304 <_dtoa_r+0x5a4>)
 8005110:	f004 020f 	and.w	r2, r4, #15
 8005114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fa48 	bl	80005b0 <__aeabi_dmul>
 8005120:	2702      	movs	r7, #2
 8005122:	2300      	movs	r3, #0
 8005124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005128:	4e77      	ldr	r6, [pc, #476]	; (8005308 <_dtoa_r+0x5a8>)
 800512a:	1124      	asrs	r4, r4, #4
 800512c:	2c00      	cmp	r4, #0
 800512e:	f040 8084 	bne.w	800523a <_dtoa_r+0x4da>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1d2      	bne.n	80050dc <_dtoa_r+0x37c>
 8005136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 808b 	beq.w	8005254 <_dtoa_r+0x4f4>
 800513e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005142:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005146:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800514a:	2200      	movs	r2, #0
 800514c:	4b6f      	ldr	r3, [pc, #444]	; (800530c <_dtoa_r+0x5ac>)
 800514e:	f7fb fca1 	bl	8000a94 <__aeabi_dcmplt>
 8005152:	2800      	cmp	r0, #0
 8005154:	d07e      	beq.n	8005254 <_dtoa_r+0x4f4>
 8005156:	9b08      	ldr	r3, [sp, #32]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d07b      	beq.n	8005254 <_dtoa_r+0x4f4>
 800515c:	f1b9 0f00 	cmp.w	r9, #0
 8005160:	dd38      	ble.n	80051d4 <_dtoa_r+0x474>
 8005162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005166:	2200      	movs	r2, #0
 8005168:	4b69      	ldr	r3, [pc, #420]	; (8005310 <_dtoa_r+0x5b0>)
 800516a:	f7fb fa21 	bl	80005b0 <__aeabi_dmul>
 800516e:	464c      	mov	r4, r9
 8005170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005174:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005178:	3701      	adds	r7, #1
 800517a:	4638      	mov	r0, r7
 800517c:	f7fb f9ae 	bl	80004dc <__aeabi_i2d>
 8005180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005184:	f7fb fa14 	bl	80005b0 <__aeabi_dmul>
 8005188:	2200      	movs	r2, #0
 800518a:	4b62      	ldr	r3, [pc, #392]	; (8005314 <_dtoa_r+0x5b4>)
 800518c:	f7fb f85a 	bl	8000244 <__adddf3>
 8005190:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005194:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005198:	9611      	str	r6, [sp, #68]	; 0x44
 800519a:	2c00      	cmp	r4, #0
 800519c:	d15d      	bne.n	800525a <_dtoa_r+0x4fa>
 800519e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051a2:	2200      	movs	r2, #0
 80051a4:	4b5c      	ldr	r3, [pc, #368]	; (8005318 <_dtoa_r+0x5b8>)
 80051a6:	f7fb f84b 	bl	8000240 <__aeabi_dsub>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051b2:	4633      	mov	r3, r6
 80051b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051b6:	f7fb fc8b 	bl	8000ad0 <__aeabi_dcmpgt>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f040 829c 	bne.w	80056f8 <_dtoa_r+0x998>
 80051c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80051ca:	f7fb fc63 	bl	8000a94 <__aeabi_dcmplt>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	f040 8290 	bne.w	80056f4 <_dtoa_r+0x994>
 80051d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80051d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80051dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f2c0 8152 	blt.w	8005488 <_dtoa_r+0x728>
 80051e4:	f1ba 0f0e 	cmp.w	sl, #14
 80051e8:	f300 814e 	bgt.w	8005488 <_dtoa_r+0x728>
 80051ec:	4b45      	ldr	r3, [pc, #276]	; (8005304 <_dtoa_r+0x5a4>)
 80051ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f280 80db 	bge.w	80053b8 <_dtoa_r+0x658>
 8005202:	9b08      	ldr	r3, [sp, #32]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f300 80d7 	bgt.w	80053b8 <_dtoa_r+0x658>
 800520a:	f040 8272 	bne.w	80056f2 <_dtoa_r+0x992>
 800520e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005212:	2200      	movs	r2, #0
 8005214:	4b40      	ldr	r3, [pc, #256]	; (8005318 <_dtoa_r+0x5b8>)
 8005216:	f7fb f9cb 	bl	80005b0 <__aeabi_dmul>
 800521a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800521e:	f7fb fc4d 	bl	8000abc <__aeabi_dcmpge>
 8005222:	9c08      	ldr	r4, [sp, #32]
 8005224:	4626      	mov	r6, r4
 8005226:	2800      	cmp	r0, #0
 8005228:	f040 8248 	bne.w	80056bc <_dtoa_r+0x95c>
 800522c:	2331      	movs	r3, #49	; 0x31
 800522e:	9f03      	ldr	r7, [sp, #12]
 8005230:	f10a 0a01 	add.w	sl, sl, #1
 8005234:	f807 3b01 	strb.w	r3, [r7], #1
 8005238:	e244      	b.n	80056c4 <_dtoa_r+0x964>
 800523a:	07e2      	lsls	r2, r4, #31
 800523c:	d505      	bpl.n	800524a <_dtoa_r+0x4ea>
 800523e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005242:	f7fb f9b5 	bl	80005b0 <__aeabi_dmul>
 8005246:	2301      	movs	r3, #1
 8005248:	3701      	adds	r7, #1
 800524a:	1064      	asrs	r4, r4, #1
 800524c:	3608      	adds	r6, #8
 800524e:	e76d      	b.n	800512c <_dtoa_r+0x3cc>
 8005250:	2702      	movs	r7, #2
 8005252:	e770      	b.n	8005136 <_dtoa_r+0x3d6>
 8005254:	46d0      	mov	r8, sl
 8005256:	9c08      	ldr	r4, [sp, #32]
 8005258:	e78f      	b.n	800517a <_dtoa_r+0x41a>
 800525a:	9903      	ldr	r1, [sp, #12]
 800525c:	4b29      	ldr	r3, [pc, #164]	; (8005304 <_dtoa_r+0x5a4>)
 800525e:	4421      	add	r1, r4
 8005260:	9112      	str	r1, [sp, #72]	; 0x48
 8005262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005264:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005268:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800526c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005270:	2900      	cmp	r1, #0
 8005272:	d055      	beq.n	8005320 <_dtoa_r+0x5c0>
 8005274:	2000      	movs	r0, #0
 8005276:	4929      	ldr	r1, [pc, #164]	; (800531c <_dtoa_r+0x5bc>)
 8005278:	f7fb fac4 	bl	8000804 <__aeabi_ddiv>
 800527c:	463b      	mov	r3, r7
 800527e:	4632      	mov	r2, r6
 8005280:	f7fa ffde 	bl	8000240 <__aeabi_dsub>
 8005284:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005288:	9f03      	ldr	r7, [sp, #12]
 800528a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800528e:	f7fb fc3f 	bl	8000b10 <__aeabi_d2iz>
 8005292:	4604      	mov	r4, r0
 8005294:	f7fb f922 	bl	80004dc <__aeabi_i2d>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a0:	f7fa ffce 	bl	8000240 <__aeabi_dsub>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	3430      	adds	r4, #48	; 0x30
 80052aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052b2:	f807 4b01 	strb.w	r4, [r7], #1
 80052b6:	f7fb fbed 	bl	8000a94 <__aeabi_dcmplt>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d174      	bne.n	80053a8 <_dtoa_r+0x648>
 80052be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c2:	2000      	movs	r0, #0
 80052c4:	4911      	ldr	r1, [pc, #68]	; (800530c <_dtoa_r+0x5ac>)
 80052c6:	f7fa ffbb 	bl	8000240 <__aeabi_dsub>
 80052ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052ce:	f7fb fbe1 	bl	8000a94 <__aeabi_dcmplt>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	f040 80b7 	bne.w	8005446 <_dtoa_r+0x6e6>
 80052d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052da:	429f      	cmp	r7, r3
 80052dc:	f43f af7a 	beq.w	80051d4 <_dtoa_r+0x474>
 80052e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052e4:	2200      	movs	r2, #0
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <_dtoa_r+0x5b0>)
 80052e8:	f7fb f962 	bl	80005b0 <__aeabi_dmul>
 80052ec:	2200      	movs	r2, #0
 80052ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <_dtoa_r+0x5b0>)
 80052f8:	f7fb f95a 	bl	80005b0 <__aeabi_dmul>
 80052fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005300:	e7c3      	b.n	800528a <_dtoa_r+0x52a>
 8005302:	bf00      	nop
 8005304:	08007f00 	.word	0x08007f00
 8005308:	08007ed8 	.word	0x08007ed8
 800530c:	3ff00000 	.word	0x3ff00000
 8005310:	40240000 	.word	0x40240000
 8005314:	401c0000 	.word	0x401c0000
 8005318:	40140000 	.word	0x40140000
 800531c:	3fe00000 	.word	0x3fe00000
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb f944 	bl	80005b0 <__aeabi_dmul>
 8005328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800532a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800532e:	9c03      	ldr	r4, [sp, #12]
 8005330:	9314      	str	r3, [sp, #80]	; 0x50
 8005332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005336:	f7fb fbeb 	bl	8000b10 <__aeabi_d2iz>
 800533a:	9015      	str	r0, [sp, #84]	; 0x54
 800533c:	f7fb f8ce 	bl	80004dc <__aeabi_i2d>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005348:	f7fa ff7a 	bl	8000240 <__aeabi_dsub>
 800534c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800534e:	4606      	mov	r6, r0
 8005350:	3330      	adds	r3, #48	; 0x30
 8005352:	f804 3b01 	strb.w	r3, [r4], #1
 8005356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005358:	460f      	mov	r7, r1
 800535a:	429c      	cmp	r4, r3
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	d124      	bne.n	80053ac <_dtoa_r+0x64c>
 8005362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005366:	4bb0      	ldr	r3, [pc, #704]	; (8005628 <_dtoa_r+0x8c8>)
 8005368:	f7fa ff6c 	bl	8000244 <__adddf3>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4630      	mov	r0, r6
 8005372:	4639      	mov	r1, r7
 8005374:	f7fb fbac 	bl	8000ad0 <__aeabi_dcmpgt>
 8005378:	2800      	cmp	r0, #0
 800537a:	d163      	bne.n	8005444 <_dtoa_r+0x6e4>
 800537c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005380:	2000      	movs	r0, #0
 8005382:	49a9      	ldr	r1, [pc, #676]	; (8005628 <_dtoa_r+0x8c8>)
 8005384:	f7fa ff5c 	bl	8000240 <__aeabi_dsub>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4630      	mov	r0, r6
 800538e:	4639      	mov	r1, r7
 8005390:	f7fb fb80 	bl	8000a94 <__aeabi_dcmplt>
 8005394:	2800      	cmp	r0, #0
 8005396:	f43f af1d 	beq.w	80051d4 <_dtoa_r+0x474>
 800539a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800539c:	1e7b      	subs	r3, r7, #1
 800539e:	9314      	str	r3, [sp, #80]	; 0x50
 80053a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d0f8      	beq.n	800539a <_dtoa_r+0x63a>
 80053a8:	46c2      	mov	sl, r8
 80053aa:	e03b      	b.n	8005424 <_dtoa_r+0x6c4>
 80053ac:	4b9f      	ldr	r3, [pc, #636]	; (800562c <_dtoa_r+0x8cc>)
 80053ae:	f7fb f8ff 	bl	80005b0 <__aeabi_dmul>
 80053b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053b6:	e7bc      	b.n	8005332 <_dtoa_r+0x5d2>
 80053b8:	9f03      	ldr	r7, [sp, #12]
 80053ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80053be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fb fa1d 	bl	8000804 <__aeabi_ddiv>
 80053ca:	f7fb fba1 	bl	8000b10 <__aeabi_d2iz>
 80053ce:	4604      	mov	r4, r0
 80053d0:	f7fb f884 	bl	80004dc <__aeabi_i2d>
 80053d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053d8:	f7fb f8ea 	bl	80005b0 <__aeabi_dmul>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fa ff2c 	bl	8000240 <__aeabi_dsub>
 80053e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80053ec:	f807 6b01 	strb.w	r6, [r7], #1
 80053f0:	9e03      	ldr	r6, [sp, #12]
 80053f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80053f6:	1bbe      	subs	r6, r7, r6
 80053f8:	45b4      	cmp	ip, r6
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	d136      	bne.n	800546e <_dtoa_r+0x70e>
 8005400:	f7fa ff20 	bl	8000244 <__adddf3>
 8005404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005408:	4680      	mov	r8, r0
 800540a:	4689      	mov	r9, r1
 800540c:	f7fb fb60 	bl	8000ad0 <__aeabi_dcmpgt>
 8005410:	bb58      	cbnz	r0, 800546a <_dtoa_r+0x70a>
 8005412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fb fb31 	bl	8000a80 <__aeabi_dcmpeq>
 800541e:	b108      	cbz	r0, 8005424 <_dtoa_r+0x6c4>
 8005420:	07e1      	lsls	r1, r4, #31
 8005422:	d422      	bmi.n	800546a <_dtoa_r+0x70a>
 8005424:	4628      	mov	r0, r5
 8005426:	4659      	mov	r1, fp
 8005428:	f000 faf0 	bl	8005a0c <_Bfree>
 800542c:	2300      	movs	r3, #0
 800542e:	703b      	strb	r3, [r7, #0]
 8005430:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005432:	f10a 0001 	add.w	r0, sl, #1
 8005436:	6018      	str	r0, [r3, #0]
 8005438:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800543a:	2b00      	cmp	r3, #0
 800543c:	f43f acde 	beq.w	8004dfc <_dtoa_r+0x9c>
 8005440:	601f      	str	r7, [r3, #0]
 8005442:	e4db      	b.n	8004dfc <_dtoa_r+0x9c>
 8005444:	4627      	mov	r7, r4
 8005446:	463b      	mov	r3, r7
 8005448:	461f      	mov	r7, r3
 800544a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800544e:	2a39      	cmp	r2, #57	; 0x39
 8005450:	d107      	bne.n	8005462 <_dtoa_r+0x702>
 8005452:	9a03      	ldr	r2, [sp, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d1f7      	bne.n	8005448 <_dtoa_r+0x6e8>
 8005458:	2230      	movs	r2, #48	; 0x30
 800545a:	9903      	ldr	r1, [sp, #12]
 800545c:	f108 0801 	add.w	r8, r8, #1
 8005460:	700a      	strb	r2, [r1, #0]
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	3201      	adds	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e79e      	b.n	80053a8 <_dtoa_r+0x648>
 800546a:	46d0      	mov	r8, sl
 800546c:	e7eb      	b.n	8005446 <_dtoa_r+0x6e6>
 800546e:	2200      	movs	r2, #0
 8005470:	4b6e      	ldr	r3, [pc, #440]	; (800562c <_dtoa_r+0x8cc>)
 8005472:	f7fb f89d 	bl	80005b0 <__aeabi_dmul>
 8005476:	2200      	movs	r2, #0
 8005478:	2300      	movs	r3, #0
 800547a:	4680      	mov	r8, r0
 800547c:	4689      	mov	r9, r1
 800547e:	f7fb faff 	bl	8000a80 <__aeabi_dcmpeq>
 8005482:	2800      	cmp	r0, #0
 8005484:	d09b      	beq.n	80053be <_dtoa_r+0x65e>
 8005486:	e7cd      	b.n	8005424 <_dtoa_r+0x6c4>
 8005488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800548a:	2a00      	cmp	r2, #0
 800548c:	f000 80d0 	beq.w	8005630 <_dtoa_r+0x8d0>
 8005490:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005492:	2a01      	cmp	r2, #1
 8005494:	f300 80ae 	bgt.w	80055f4 <_dtoa_r+0x894>
 8005498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800549a:	2a00      	cmp	r2, #0
 800549c:	f000 80a6 	beq.w	80055ec <_dtoa_r+0x88c>
 80054a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80054a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054a6:	9f06      	ldr	r7, [sp, #24]
 80054a8:	9a06      	ldr	r2, [sp, #24]
 80054aa:	2101      	movs	r1, #1
 80054ac:	441a      	add	r2, r3
 80054ae:	9206      	str	r2, [sp, #24]
 80054b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054b2:	4628      	mov	r0, r5
 80054b4:	441a      	add	r2, r3
 80054b6:	9209      	str	r2, [sp, #36]	; 0x24
 80054b8:	f000 fb5e 	bl	8005b78 <__i2b>
 80054bc:	4606      	mov	r6, r0
 80054be:	2f00      	cmp	r7, #0
 80054c0:	dd0c      	ble.n	80054dc <_dtoa_r+0x77c>
 80054c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	dd09      	ble.n	80054dc <_dtoa_r+0x77c>
 80054c8:	42bb      	cmp	r3, r7
 80054ca:	bfa8      	it	ge
 80054cc:	463b      	movge	r3, r7
 80054ce:	9a06      	ldr	r2, [sp, #24]
 80054d0:	1aff      	subs	r7, r7, r3
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	9206      	str	r2, [sp, #24]
 80054d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	9309      	str	r3, [sp, #36]	; 0x24
 80054dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054de:	b1f3      	cbz	r3, 800551e <_dtoa_r+0x7be>
 80054e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80a8 	beq.w	8005638 <_dtoa_r+0x8d8>
 80054e8:	2c00      	cmp	r4, #0
 80054ea:	dd10      	ble.n	800550e <_dtoa_r+0x7ae>
 80054ec:	4631      	mov	r1, r6
 80054ee:	4622      	mov	r2, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 fbff 	bl	8005cf4 <__pow5mult>
 80054f6:	465a      	mov	r2, fp
 80054f8:	4601      	mov	r1, r0
 80054fa:	4606      	mov	r6, r0
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fb51 	bl	8005ba4 <__multiply>
 8005502:	4680      	mov	r8, r0
 8005504:	4659      	mov	r1, fp
 8005506:	4628      	mov	r0, r5
 8005508:	f000 fa80 	bl	8005a0c <_Bfree>
 800550c:	46c3      	mov	fp, r8
 800550e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005510:	1b1a      	subs	r2, r3, r4
 8005512:	d004      	beq.n	800551e <_dtoa_r+0x7be>
 8005514:	4659      	mov	r1, fp
 8005516:	4628      	mov	r0, r5
 8005518:	f000 fbec 	bl	8005cf4 <__pow5mult>
 800551c:	4683      	mov	fp, r0
 800551e:	2101      	movs	r1, #1
 8005520:	4628      	mov	r0, r5
 8005522:	f000 fb29 	bl	8005b78 <__i2b>
 8005526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005528:	4604      	mov	r4, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	f340 8086 	ble.w	800563c <_dtoa_r+0x8dc>
 8005530:	461a      	mov	r2, r3
 8005532:	4601      	mov	r1, r0
 8005534:	4628      	mov	r0, r5
 8005536:	f000 fbdd 	bl	8005cf4 <__pow5mult>
 800553a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800553c:	4604      	mov	r4, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	dd7f      	ble.n	8005642 <_dtoa_r+0x8e2>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800554c:	6918      	ldr	r0, [r3, #16]
 800554e:	f000 fac5 	bl	8005adc <__hi0bits>
 8005552:	f1c0 0020 	rsb	r0, r0, #32
 8005556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005558:	4418      	add	r0, r3
 800555a:	f010 001f 	ands.w	r0, r0, #31
 800555e:	f000 8092 	beq.w	8005686 <_dtoa_r+0x926>
 8005562:	f1c0 0320 	rsb	r3, r0, #32
 8005566:	2b04      	cmp	r3, #4
 8005568:	f340 808a 	ble.w	8005680 <_dtoa_r+0x920>
 800556c:	f1c0 001c 	rsb	r0, r0, #28
 8005570:	9b06      	ldr	r3, [sp, #24]
 8005572:	4407      	add	r7, r0
 8005574:	4403      	add	r3, r0
 8005576:	9306      	str	r3, [sp, #24]
 8005578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557a:	4403      	add	r3, r0
 800557c:	9309      	str	r3, [sp, #36]	; 0x24
 800557e:	9b06      	ldr	r3, [sp, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd05      	ble.n	8005590 <_dtoa_r+0x830>
 8005584:	4659      	mov	r1, fp
 8005586:	461a      	mov	r2, r3
 8005588:	4628      	mov	r0, r5
 800558a:	f000 fc0d 	bl	8005da8 <__lshift>
 800558e:	4683      	mov	fp, r0
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	dd05      	ble.n	80055a2 <_dtoa_r+0x842>
 8005596:	4621      	mov	r1, r4
 8005598:	461a      	mov	r2, r3
 800559a:	4628      	mov	r0, r5
 800559c:	f000 fc04 	bl	8005da8 <__lshift>
 80055a0:	4604      	mov	r4, r0
 80055a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d070      	beq.n	800568a <_dtoa_r+0x92a>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4658      	mov	r0, fp
 80055ac:	f000 fc6c 	bl	8005e88 <__mcmp>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	da6a      	bge.n	800568a <_dtoa_r+0x92a>
 80055b4:	2300      	movs	r3, #0
 80055b6:	4659      	mov	r1, fp
 80055b8:	220a      	movs	r2, #10
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 fa48 	bl	8005a50 <__multadd>
 80055c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c2:	4683      	mov	fp, r0
 80055c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8194 	beq.w	80058f6 <_dtoa_r+0xb96>
 80055ce:	4631      	mov	r1, r6
 80055d0:	2300      	movs	r3, #0
 80055d2:	220a      	movs	r2, #10
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 fa3b 	bl	8005a50 <__multadd>
 80055da:	f1b9 0f00 	cmp.w	r9, #0
 80055de:	4606      	mov	r6, r0
 80055e0:	f300 8093 	bgt.w	800570a <_dtoa_r+0x9aa>
 80055e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	dc57      	bgt.n	800569a <_dtoa_r+0x93a>
 80055ea:	e08e      	b.n	800570a <_dtoa_r+0x9aa>
 80055ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055f2:	e757      	b.n	80054a4 <_dtoa_r+0x744>
 80055f4:	9b08      	ldr	r3, [sp, #32]
 80055f6:	1e5c      	subs	r4, r3, #1
 80055f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055fa:	42a3      	cmp	r3, r4
 80055fc:	bfb7      	itett	lt
 80055fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005600:	1b1c      	subge	r4, r3, r4
 8005602:	1ae2      	sublt	r2, r4, r3
 8005604:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005606:	bfbe      	ittt	lt
 8005608:	940a      	strlt	r4, [sp, #40]	; 0x28
 800560a:	189b      	addlt	r3, r3, r2
 800560c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800560e:	9b08      	ldr	r3, [sp, #32]
 8005610:	bfb8      	it	lt
 8005612:	2400      	movlt	r4, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	bfbb      	ittet	lt
 8005618:	9b06      	ldrlt	r3, [sp, #24]
 800561a:	9a08      	ldrlt	r2, [sp, #32]
 800561c:	9f06      	ldrge	r7, [sp, #24]
 800561e:	1a9f      	sublt	r7, r3, r2
 8005620:	bfac      	ite	ge
 8005622:	9b08      	ldrge	r3, [sp, #32]
 8005624:	2300      	movlt	r3, #0
 8005626:	e73f      	b.n	80054a8 <_dtoa_r+0x748>
 8005628:	3fe00000 	.word	0x3fe00000
 800562c:	40240000 	.word	0x40240000
 8005630:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005632:	9f06      	ldr	r7, [sp, #24]
 8005634:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005636:	e742      	b.n	80054be <_dtoa_r+0x75e>
 8005638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800563a:	e76b      	b.n	8005514 <_dtoa_r+0x7b4>
 800563c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800563e:	2b01      	cmp	r3, #1
 8005640:	dc19      	bgt.n	8005676 <_dtoa_r+0x916>
 8005642:	9b04      	ldr	r3, [sp, #16]
 8005644:	b9bb      	cbnz	r3, 8005676 <_dtoa_r+0x916>
 8005646:	9b05      	ldr	r3, [sp, #20]
 8005648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800564c:	b99b      	cbnz	r3, 8005676 <_dtoa_r+0x916>
 800564e:	9b05      	ldr	r3, [sp, #20]
 8005650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	051b      	lsls	r3, r3, #20
 8005658:	b183      	cbz	r3, 800567c <_dtoa_r+0x91c>
 800565a:	f04f 0801 	mov.w	r8, #1
 800565e:	9b06      	ldr	r3, [sp, #24]
 8005660:	3301      	adds	r3, #1
 8005662:	9306      	str	r3, [sp, #24]
 8005664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005666:	3301      	adds	r3, #1
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
 800566a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f af6a 	bne.w	8005546 <_dtoa_r+0x7e6>
 8005672:	2001      	movs	r0, #1
 8005674:	e76f      	b.n	8005556 <_dtoa_r+0x7f6>
 8005676:	f04f 0800 	mov.w	r8, #0
 800567a:	e7f6      	b.n	800566a <_dtoa_r+0x90a>
 800567c:	4698      	mov	r8, r3
 800567e:	e7f4      	b.n	800566a <_dtoa_r+0x90a>
 8005680:	f43f af7d 	beq.w	800557e <_dtoa_r+0x81e>
 8005684:	4618      	mov	r0, r3
 8005686:	301c      	adds	r0, #28
 8005688:	e772      	b.n	8005570 <_dtoa_r+0x810>
 800568a:	9b08      	ldr	r3, [sp, #32]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dc36      	bgt.n	80056fe <_dtoa_r+0x99e>
 8005690:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005692:	2b02      	cmp	r3, #2
 8005694:	dd33      	ble.n	80056fe <_dtoa_r+0x99e>
 8005696:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800569a:	f1b9 0f00 	cmp.w	r9, #0
 800569e:	d10d      	bne.n	80056bc <_dtoa_r+0x95c>
 80056a0:	4621      	mov	r1, r4
 80056a2:	464b      	mov	r3, r9
 80056a4:	2205      	movs	r2, #5
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 f9d2 	bl	8005a50 <__multadd>
 80056ac:	4601      	mov	r1, r0
 80056ae:	4604      	mov	r4, r0
 80056b0:	4658      	mov	r0, fp
 80056b2:	f000 fbe9 	bl	8005e88 <__mcmp>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f73f adb8 	bgt.w	800522c <_dtoa_r+0x4cc>
 80056bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056be:	9f03      	ldr	r7, [sp, #12]
 80056c0:	ea6f 0a03 	mvn.w	sl, r3
 80056c4:	f04f 0800 	mov.w	r8, #0
 80056c8:	4621      	mov	r1, r4
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 f99e 	bl	8005a0c <_Bfree>
 80056d0:	2e00      	cmp	r6, #0
 80056d2:	f43f aea7 	beq.w	8005424 <_dtoa_r+0x6c4>
 80056d6:	f1b8 0f00 	cmp.w	r8, #0
 80056da:	d005      	beq.n	80056e8 <_dtoa_r+0x988>
 80056dc:	45b0      	cmp	r8, r6
 80056de:	d003      	beq.n	80056e8 <_dtoa_r+0x988>
 80056e0:	4641      	mov	r1, r8
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f992 	bl	8005a0c <_Bfree>
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	f000 f98e 	bl	8005a0c <_Bfree>
 80056f0:	e698      	b.n	8005424 <_dtoa_r+0x6c4>
 80056f2:	2400      	movs	r4, #0
 80056f4:	4626      	mov	r6, r4
 80056f6:	e7e1      	b.n	80056bc <_dtoa_r+0x95c>
 80056f8:	46c2      	mov	sl, r8
 80056fa:	4626      	mov	r6, r4
 80056fc:	e596      	b.n	800522c <_dtoa_r+0x4cc>
 80056fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80fd 	beq.w	8005904 <_dtoa_r+0xba4>
 800570a:	2f00      	cmp	r7, #0
 800570c:	dd05      	ble.n	800571a <_dtoa_r+0x9ba>
 800570e:	4631      	mov	r1, r6
 8005710:	463a      	mov	r2, r7
 8005712:	4628      	mov	r0, r5
 8005714:	f000 fb48 	bl	8005da8 <__lshift>
 8005718:	4606      	mov	r6, r0
 800571a:	f1b8 0f00 	cmp.w	r8, #0
 800571e:	d05c      	beq.n	80057da <_dtoa_r+0xa7a>
 8005720:	4628      	mov	r0, r5
 8005722:	6871      	ldr	r1, [r6, #4]
 8005724:	f000 f932 	bl	800598c <_Balloc>
 8005728:	4607      	mov	r7, r0
 800572a:	b928      	cbnz	r0, 8005738 <_dtoa_r+0x9d8>
 800572c:	4602      	mov	r2, r0
 800572e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005732:	4b7f      	ldr	r3, [pc, #508]	; (8005930 <_dtoa_r+0xbd0>)
 8005734:	f7ff bb28 	b.w	8004d88 <_dtoa_r+0x28>
 8005738:	6932      	ldr	r2, [r6, #16]
 800573a:	f106 010c 	add.w	r1, r6, #12
 800573e:	3202      	adds	r2, #2
 8005740:	0092      	lsls	r2, r2, #2
 8005742:	300c      	adds	r0, #12
 8005744:	f000 f914 	bl	8005970 <memcpy>
 8005748:	2201      	movs	r2, #1
 800574a:	4639      	mov	r1, r7
 800574c:	4628      	mov	r0, r5
 800574e:	f000 fb2b 	bl	8005da8 <__lshift>
 8005752:	46b0      	mov	r8, r6
 8005754:	4606      	mov	r6, r0
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	9308      	str	r3, [sp, #32]
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	444b      	add	r3, r9
 8005760:	930a      	str	r3, [sp, #40]	; 0x28
 8005762:	9b04      	ldr	r3, [sp, #16]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	9309      	str	r3, [sp, #36]	; 0x24
 800576a:	9b08      	ldr	r3, [sp, #32]
 800576c:	4621      	mov	r1, r4
 800576e:	3b01      	subs	r3, #1
 8005770:	4658      	mov	r0, fp
 8005772:	9304      	str	r3, [sp, #16]
 8005774:	f7ff fa66 	bl	8004c44 <quorem>
 8005778:	4603      	mov	r3, r0
 800577a:	4641      	mov	r1, r8
 800577c:	3330      	adds	r3, #48	; 0x30
 800577e:	9006      	str	r0, [sp, #24]
 8005780:	4658      	mov	r0, fp
 8005782:	930b      	str	r3, [sp, #44]	; 0x2c
 8005784:	f000 fb80 	bl	8005e88 <__mcmp>
 8005788:	4632      	mov	r2, r6
 800578a:	4681      	mov	r9, r0
 800578c:	4621      	mov	r1, r4
 800578e:	4628      	mov	r0, r5
 8005790:	f000 fb96 	bl	8005ec0 <__mdiff>
 8005794:	68c2      	ldr	r2, [r0, #12]
 8005796:	4607      	mov	r7, r0
 8005798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800579a:	bb02      	cbnz	r2, 80057de <_dtoa_r+0xa7e>
 800579c:	4601      	mov	r1, r0
 800579e:	4658      	mov	r0, fp
 80057a0:	f000 fb72 	bl	8005e88 <__mcmp>
 80057a4:	4602      	mov	r2, r0
 80057a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a8:	4639      	mov	r1, r7
 80057aa:	4628      	mov	r0, r5
 80057ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80057b0:	f000 f92c 	bl	8005a0c <_Bfree>
 80057b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057b8:	9f08      	ldr	r7, [sp, #32]
 80057ba:	ea43 0102 	orr.w	r1, r3, r2
 80057be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c0:	430b      	orrs	r3, r1
 80057c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c4:	d10d      	bne.n	80057e2 <_dtoa_r+0xa82>
 80057c6:	2b39      	cmp	r3, #57	; 0x39
 80057c8:	d029      	beq.n	800581e <_dtoa_r+0xabe>
 80057ca:	f1b9 0f00 	cmp.w	r9, #0
 80057ce:	dd01      	ble.n	80057d4 <_dtoa_r+0xa74>
 80057d0:	9b06      	ldr	r3, [sp, #24]
 80057d2:	3331      	adds	r3, #49	; 0x31
 80057d4:	9a04      	ldr	r2, [sp, #16]
 80057d6:	7013      	strb	r3, [r2, #0]
 80057d8:	e776      	b.n	80056c8 <_dtoa_r+0x968>
 80057da:	4630      	mov	r0, r6
 80057dc:	e7b9      	b.n	8005752 <_dtoa_r+0x9f2>
 80057de:	2201      	movs	r2, #1
 80057e0:	e7e2      	b.n	80057a8 <_dtoa_r+0xa48>
 80057e2:	f1b9 0f00 	cmp.w	r9, #0
 80057e6:	db06      	blt.n	80057f6 <_dtoa_r+0xa96>
 80057e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80057ea:	ea41 0909 	orr.w	r9, r1, r9
 80057ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057f0:	ea59 0101 	orrs.w	r1, r9, r1
 80057f4:	d120      	bne.n	8005838 <_dtoa_r+0xad8>
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	ddec      	ble.n	80057d4 <_dtoa_r+0xa74>
 80057fa:	4659      	mov	r1, fp
 80057fc:	2201      	movs	r2, #1
 80057fe:	4628      	mov	r0, r5
 8005800:	9308      	str	r3, [sp, #32]
 8005802:	f000 fad1 	bl	8005da8 <__lshift>
 8005806:	4621      	mov	r1, r4
 8005808:	4683      	mov	fp, r0
 800580a:	f000 fb3d 	bl	8005e88 <__mcmp>
 800580e:	2800      	cmp	r0, #0
 8005810:	9b08      	ldr	r3, [sp, #32]
 8005812:	dc02      	bgt.n	800581a <_dtoa_r+0xaba>
 8005814:	d1de      	bne.n	80057d4 <_dtoa_r+0xa74>
 8005816:	07da      	lsls	r2, r3, #31
 8005818:	d5dc      	bpl.n	80057d4 <_dtoa_r+0xa74>
 800581a:	2b39      	cmp	r3, #57	; 0x39
 800581c:	d1d8      	bne.n	80057d0 <_dtoa_r+0xa70>
 800581e:	2339      	movs	r3, #57	; 0x39
 8005820:	9a04      	ldr	r2, [sp, #16]
 8005822:	7013      	strb	r3, [r2, #0]
 8005824:	463b      	mov	r3, r7
 8005826:	461f      	mov	r7, r3
 8005828:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800582c:	3b01      	subs	r3, #1
 800582e:	2a39      	cmp	r2, #57	; 0x39
 8005830:	d050      	beq.n	80058d4 <_dtoa_r+0xb74>
 8005832:	3201      	adds	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e747      	b.n	80056c8 <_dtoa_r+0x968>
 8005838:	2a00      	cmp	r2, #0
 800583a:	dd03      	ble.n	8005844 <_dtoa_r+0xae4>
 800583c:	2b39      	cmp	r3, #57	; 0x39
 800583e:	d0ee      	beq.n	800581e <_dtoa_r+0xabe>
 8005840:	3301      	adds	r3, #1
 8005842:	e7c7      	b.n	80057d4 <_dtoa_r+0xa74>
 8005844:	9a08      	ldr	r2, [sp, #32]
 8005846:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005848:	f802 3c01 	strb.w	r3, [r2, #-1]
 800584c:	428a      	cmp	r2, r1
 800584e:	d02a      	beq.n	80058a6 <_dtoa_r+0xb46>
 8005850:	4659      	mov	r1, fp
 8005852:	2300      	movs	r3, #0
 8005854:	220a      	movs	r2, #10
 8005856:	4628      	mov	r0, r5
 8005858:	f000 f8fa 	bl	8005a50 <__multadd>
 800585c:	45b0      	cmp	r8, r6
 800585e:	4683      	mov	fp, r0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	f04f 020a 	mov.w	r2, #10
 8005868:	4641      	mov	r1, r8
 800586a:	4628      	mov	r0, r5
 800586c:	d107      	bne.n	800587e <_dtoa_r+0xb1e>
 800586e:	f000 f8ef 	bl	8005a50 <__multadd>
 8005872:	4680      	mov	r8, r0
 8005874:	4606      	mov	r6, r0
 8005876:	9b08      	ldr	r3, [sp, #32]
 8005878:	3301      	adds	r3, #1
 800587a:	9308      	str	r3, [sp, #32]
 800587c:	e775      	b.n	800576a <_dtoa_r+0xa0a>
 800587e:	f000 f8e7 	bl	8005a50 <__multadd>
 8005882:	4631      	mov	r1, r6
 8005884:	4680      	mov	r8, r0
 8005886:	2300      	movs	r3, #0
 8005888:	220a      	movs	r2, #10
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f8e0 	bl	8005a50 <__multadd>
 8005890:	4606      	mov	r6, r0
 8005892:	e7f0      	b.n	8005876 <_dtoa_r+0xb16>
 8005894:	f1b9 0f00 	cmp.w	r9, #0
 8005898:	bfcc      	ite	gt
 800589a:	464f      	movgt	r7, r9
 800589c:	2701      	movle	r7, #1
 800589e:	f04f 0800 	mov.w	r8, #0
 80058a2:	9a03      	ldr	r2, [sp, #12]
 80058a4:	4417      	add	r7, r2
 80058a6:	4659      	mov	r1, fp
 80058a8:	2201      	movs	r2, #1
 80058aa:	4628      	mov	r0, r5
 80058ac:	9308      	str	r3, [sp, #32]
 80058ae:	f000 fa7b 	bl	8005da8 <__lshift>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4683      	mov	fp, r0
 80058b6:	f000 fae7 	bl	8005e88 <__mcmp>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	dcb2      	bgt.n	8005824 <_dtoa_r+0xac4>
 80058be:	d102      	bne.n	80058c6 <_dtoa_r+0xb66>
 80058c0:	9b08      	ldr	r3, [sp, #32]
 80058c2:	07db      	lsls	r3, r3, #31
 80058c4:	d4ae      	bmi.n	8005824 <_dtoa_r+0xac4>
 80058c6:	463b      	mov	r3, r7
 80058c8:	461f      	mov	r7, r3
 80058ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058ce:	2a30      	cmp	r2, #48	; 0x30
 80058d0:	d0fa      	beq.n	80058c8 <_dtoa_r+0xb68>
 80058d2:	e6f9      	b.n	80056c8 <_dtoa_r+0x968>
 80058d4:	9a03      	ldr	r2, [sp, #12]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d1a5      	bne.n	8005826 <_dtoa_r+0xac6>
 80058da:	2331      	movs	r3, #49	; 0x31
 80058dc:	f10a 0a01 	add.w	sl, sl, #1
 80058e0:	e779      	b.n	80057d6 <_dtoa_r+0xa76>
 80058e2:	4b14      	ldr	r3, [pc, #80]	; (8005934 <_dtoa_r+0xbd4>)
 80058e4:	f7ff baa8 	b.w	8004e38 <_dtoa_r+0xd8>
 80058e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f47f aa81 	bne.w	8004df2 <_dtoa_r+0x92>
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <_dtoa_r+0xbd8>)
 80058f2:	f7ff baa1 	b.w	8004e38 <_dtoa_r+0xd8>
 80058f6:	f1b9 0f00 	cmp.w	r9, #0
 80058fa:	dc03      	bgt.n	8005904 <_dtoa_r+0xba4>
 80058fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058fe:	2b02      	cmp	r3, #2
 8005900:	f73f aecb 	bgt.w	800569a <_dtoa_r+0x93a>
 8005904:	9f03      	ldr	r7, [sp, #12]
 8005906:	4621      	mov	r1, r4
 8005908:	4658      	mov	r0, fp
 800590a:	f7ff f99b 	bl	8004c44 <quorem>
 800590e:	9a03      	ldr	r2, [sp, #12]
 8005910:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005914:	f807 3b01 	strb.w	r3, [r7], #1
 8005918:	1aba      	subs	r2, r7, r2
 800591a:	4591      	cmp	r9, r2
 800591c:	ddba      	ble.n	8005894 <_dtoa_r+0xb34>
 800591e:	4659      	mov	r1, fp
 8005920:	2300      	movs	r3, #0
 8005922:	220a      	movs	r2, #10
 8005924:	4628      	mov	r0, r5
 8005926:	f000 f893 	bl	8005a50 <__multadd>
 800592a:	4683      	mov	fp, r0
 800592c:	e7eb      	b.n	8005906 <_dtoa_r+0xba6>
 800592e:	bf00      	nop
 8005930:	08007e6b 	.word	0x08007e6b
 8005934:	08007dc8 	.word	0x08007dc8
 8005938:	08007dec 	.word	0x08007dec

0800593c <_localeconv_r>:
 800593c:	4800      	ldr	r0, [pc, #0]	; (8005940 <_localeconv_r+0x4>)
 800593e:	4770      	bx	lr
 8005940:	200001f0 	.word	0x200001f0

08005944 <malloc>:
 8005944:	4b02      	ldr	r3, [pc, #8]	; (8005950 <malloc+0xc>)
 8005946:	4601      	mov	r1, r0
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	f000 bc1d 	b.w	8006188 <_malloc_r>
 800594e:	bf00      	nop
 8005950:	2000009c 	.word	0x2000009c

08005954 <memchr>:
 8005954:	4603      	mov	r3, r0
 8005956:	b510      	push	{r4, lr}
 8005958:	b2c9      	uxtb	r1, r1
 800595a:	4402      	add	r2, r0
 800595c:	4293      	cmp	r3, r2
 800595e:	4618      	mov	r0, r3
 8005960:	d101      	bne.n	8005966 <memchr+0x12>
 8005962:	2000      	movs	r0, #0
 8005964:	e003      	b.n	800596e <memchr+0x1a>
 8005966:	7804      	ldrb	r4, [r0, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	428c      	cmp	r4, r1
 800596c:	d1f6      	bne.n	800595c <memchr+0x8>
 800596e:	bd10      	pop	{r4, pc}

08005970 <memcpy>:
 8005970:	440a      	add	r2, r1
 8005972:	4291      	cmp	r1, r2
 8005974:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005978:	d100      	bne.n	800597c <memcpy+0xc>
 800597a:	4770      	bx	lr
 800597c:	b510      	push	{r4, lr}
 800597e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005982:	4291      	cmp	r1, r2
 8005984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005988:	d1f9      	bne.n	800597e <memcpy+0xe>
 800598a:	bd10      	pop	{r4, pc}

0800598c <_Balloc>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005990:	4604      	mov	r4, r0
 8005992:	460d      	mov	r5, r1
 8005994:	b976      	cbnz	r6, 80059b4 <_Balloc+0x28>
 8005996:	2010      	movs	r0, #16
 8005998:	f7ff ffd4 	bl	8005944 <malloc>
 800599c:	4602      	mov	r2, r0
 800599e:	6260      	str	r0, [r4, #36]	; 0x24
 80059a0:	b920      	cbnz	r0, 80059ac <_Balloc+0x20>
 80059a2:	2166      	movs	r1, #102	; 0x66
 80059a4:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <_Balloc+0x78>)
 80059a6:	4818      	ldr	r0, [pc, #96]	; (8005a08 <_Balloc+0x7c>)
 80059a8:	f000 fdce 	bl	8006548 <__assert_func>
 80059ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059b0:	6006      	str	r6, [r0, #0]
 80059b2:	60c6      	str	r6, [r0, #12]
 80059b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059b6:	68f3      	ldr	r3, [r6, #12]
 80059b8:	b183      	cbz	r3, 80059dc <_Balloc+0x50>
 80059ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059c2:	b9b8      	cbnz	r0, 80059f4 <_Balloc+0x68>
 80059c4:	2101      	movs	r1, #1
 80059c6:	fa01 f605 	lsl.w	r6, r1, r5
 80059ca:	1d72      	adds	r2, r6, #5
 80059cc:	4620      	mov	r0, r4
 80059ce:	0092      	lsls	r2, r2, #2
 80059d0:	f000 fb5e 	bl	8006090 <_calloc_r>
 80059d4:	b160      	cbz	r0, 80059f0 <_Balloc+0x64>
 80059d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059da:	e00e      	b.n	80059fa <_Balloc+0x6e>
 80059dc:	2221      	movs	r2, #33	; 0x21
 80059de:	2104      	movs	r1, #4
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 fb55 	bl	8006090 <_calloc_r>
 80059e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e8:	60f0      	str	r0, [r6, #12]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e4      	bne.n	80059ba <_Balloc+0x2e>
 80059f0:	2000      	movs	r0, #0
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	6802      	ldr	r2, [r0, #0]
 80059f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059fa:	2300      	movs	r3, #0
 80059fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a00:	e7f7      	b.n	80059f2 <_Balloc+0x66>
 8005a02:	bf00      	nop
 8005a04:	08007df9 	.word	0x08007df9
 8005a08:	08007e7c 	.word	0x08007e7c

08005a0c <_Bfree>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a10:	4605      	mov	r5, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	b976      	cbnz	r6, 8005a34 <_Bfree+0x28>
 8005a16:	2010      	movs	r0, #16
 8005a18:	f7ff ff94 	bl	8005944 <malloc>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6268      	str	r0, [r5, #36]	; 0x24
 8005a20:	b920      	cbnz	r0, 8005a2c <_Bfree+0x20>
 8005a22:	218a      	movs	r1, #138	; 0x8a
 8005a24:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <_Bfree+0x3c>)
 8005a26:	4809      	ldr	r0, [pc, #36]	; (8005a4c <_Bfree+0x40>)
 8005a28:	f000 fd8e 	bl	8006548 <__assert_func>
 8005a2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a30:	6006      	str	r6, [r0, #0]
 8005a32:	60c6      	str	r6, [r0, #12]
 8005a34:	b13c      	cbz	r4, 8005a46 <_Bfree+0x3a>
 8005a36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a38:	6862      	ldr	r2, [r4, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a40:	6021      	str	r1, [r4, #0]
 8005a42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	08007df9 	.word	0x08007df9
 8005a4c:	08007e7c 	.word	0x08007e7c

08005a50 <__multadd>:
 8005a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a54:	4607      	mov	r7, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	461e      	mov	r6, r3
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	690d      	ldr	r5, [r1, #16]
 8005a5e:	f101 0c14 	add.w	ip, r1, #20
 8005a62:	f8dc 3000 	ldr.w	r3, [ip]
 8005a66:	3001      	adds	r0, #1
 8005a68:	b299      	uxth	r1, r3
 8005a6a:	fb02 6101 	mla	r1, r2, r1, r6
 8005a6e:	0c1e      	lsrs	r6, r3, #16
 8005a70:	0c0b      	lsrs	r3, r1, #16
 8005a72:	fb02 3306 	mla	r3, r2, r6, r3
 8005a76:	b289      	uxth	r1, r1
 8005a78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a7c:	4285      	cmp	r5, r0
 8005a7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a82:	f84c 1b04 	str.w	r1, [ip], #4
 8005a86:	dcec      	bgt.n	8005a62 <__multadd+0x12>
 8005a88:	b30e      	cbz	r6, 8005ace <__multadd+0x7e>
 8005a8a:	68a3      	ldr	r3, [r4, #8]
 8005a8c:	42ab      	cmp	r3, r5
 8005a8e:	dc19      	bgt.n	8005ac4 <__multadd+0x74>
 8005a90:	6861      	ldr	r1, [r4, #4]
 8005a92:	4638      	mov	r0, r7
 8005a94:	3101      	adds	r1, #1
 8005a96:	f7ff ff79 	bl	800598c <_Balloc>
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	b928      	cbnz	r0, 8005aaa <__multadd+0x5a>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	21b5      	movs	r1, #181	; 0xb5
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <__multadd+0x84>)
 8005aa4:	480c      	ldr	r0, [pc, #48]	; (8005ad8 <__multadd+0x88>)
 8005aa6:	f000 fd4f 	bl	8006548 <__assert_func>
 8005aaa:	6922      	ldr	r2, [r4, #16]
 8005aac:	f104 010c 	add.w	r1, r4, #12
 8005ab0:	3202      	adds	r2, #2
 8005ab2:	0092      	lsls	r2, r2, #2
 8005ab4:	300c      	adds	r0, #12
 8005ab6:	f7ff ff5b 	bl	8005970 <memcpy>
 8005aba:	4621      	mov	r1, r4
 8005abc:	4638      	mov	r0, r7
 8005abe:	f7ff ffa5 	bl	8005a0c <_Bfree>
 8005ac2:	4644      	mov	r4, r8
 8005ac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ac8:	3501      	adds	r5, #1
 8005aca:	615e      	str	r6, [r3, #20]
 8005acc:	6125      	str	r5, [r4, #16]
 8005ace:	4620      	mov	r0, r4
 8005ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad4:	08007e6b 	.word	0x08007e6b
 8005ad8:	08007e7c 	.word	0x08007e7c

08005adc <__hi0bits>:
 8005adc:	0c02      	lsrs	r2, r0, #16
 8005ade:	0412      	lsls	r2, r2, #16
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	b9ca      	cbnz	r2, 8005b18 <__hi0bits+0x3c>
 8005ae4:	0403      	lsls	r3, r0, #16
 8005ae6:	2010      	movs	r0, #16
 8005ae8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005aec:	bf04      	itt	eq
 8005aee:	021b      	lsleq	r3, r3, #8
 8005af0:	3008      	addeq	r0, #8
 8005af2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005af6:	bf04      	itt	eq
 8005af8:	011b      	lsleq	r3, r3, #4
 8005afa:	3004      	addeq	r0, #4
 8005afc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b00:	bf04      	itt	eq
 8005b02:	009b      	lsleq	r3, r3, #2
 8005b04:	3002      	addeq	r0, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db05      	blt.n	8005b16 <__hi0bits+0x3a>
 8005b0a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b0e:	f100 0001 	add.w	r0, r0, #1
 8005b12:	bf08      	it	eq
 8005b14:	2020      	moveq	r0, #32
 8005b16:	4770      	bx	lr
 8005b18:	2000      	movs	r0, #0
 8005b1a:	e7e5      	b.n	8005ae8 <__hi0bits+0xc>

08005b1c <__lo0bits>:
 8005b1c:	6803      	ldr	r3, [r0, #0]
 8005b1e:	4602      	mov	r2, r0
 8005b20:	f013 0007 	ands.w	r0, r3, #7
 8005b24:	d00b      	beq.n	8005b3e <__lo0bits+0x22>
 8005b26:	07d9      	lsls	r1, r3, #31
 8005b28:	d421      	bmi.n	8005b6e <__lo0bits+0x52>
 8005b2a:	0798      	lsls	r0, r3, #30
 8005b2c:	bf49      	itett	mi
 8005b2e:	085b      	lsrmi	r3, r3, #1
 8005b30:	089b      	lsrpl	r3, r3, #2
 8005b32:	2001      	movmi	r0, #1
 8005b34:	6013      	strmi	r3, [r2, #0]
 8005b36:	bf5c      	itt	pl
 8005b38:	2002      	movpl	r0, #2
 8005b3a:	6013      	strpl	r3, [r2, #0]
 8005b3c:	4770      	bx	lr
 8005b3e:	b299      	uxth	r1, r3
 8005b40:	b909      	cbnz	r1, 8005b46 <__lo0bits+0x2a>
 8005b42:	2010      	movs	r0, #16
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	b2d9      	uxtb	r1, r3
 8005b48:	b909      	cbnz	r1, 8005b4e <__lo0bits+0x32>
 8005b4a:	3008      	adds	r0, #8
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	0719      	lsls	r1, r3, #28
 8005b50:	bf04      	itt	eq
 8005b52:	091b      	lsreq	r3, r3, #4
 8005b54:	3004      	addeq	r0, #4
 8005b56:	0799      	lsls	r1, r3, #30
 8005b58:	bf04      	itt	eq
 8005b5a:	089b      	lsreq	r3, r3, #2
 8005b5c:	3002      	addeq	r0, #2
 8005b5e:	07d9      	lsls	r1, r3, #31
 8005b60:	d403      	bmi.n	8005b6a <__lo0bits+0x4e>
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	f100 0001 	add.w	r0, r0, #1
 8005b68:	d003      	beq.n	8005b72 <__lo0bits+0x56>
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4770      	bx	lr
 8005b6e:	2000      	movs	r0, #0
 8005b70:	4770      	bx	lr
 8005b72:	2020      	movs	r0, #32
 8005b74:	4770      	bx	lr
	...

08005b78 <__i2b>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	f7ff ff05 	bl	800598c <_Balloc>
 8005b82:	4602      	mov	r2, r0
 8005b84:	b928      	cbnz	r0, 8005b92 <__i2b+0x1a>
 8005b86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b8a:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <__i2b+0x24>)
 8005b8c:	4804      	ldr	r0, [pc, #16]	; (8005ba0 <__i2b+0x28>)
 8005b8e:	f000 fcdb 	bl	8006548 <__assert_func>
 8005b92:	2301      	movs	r3, #1
 8005b94:	6144      	str	r4, [r0, #20]
 8005b96:	6103      	str	r3, [r0, #16]
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	bf00      	nop
 8005b9c:	08007e6b 	.word	0x08007e6b
 8005ba0:	08007e7c 	.word	0x08007e7c

08005ba4 <__multiply>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	4691      	mov	r9, r2
 8005baa:	690a      	ldr	r2, [r1, #16]
 8005bac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	bfbe      	ittt	lt
 8005bb6:	460b      	movlt	r3, r1
 8005bb8:	464c      	movlt	r4, r9
 8005bba:	4699      	movlt	r9, r3
 8005bbc:	6927      	ldr	r7, [r4, #16]
 8005bbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bc2:	68a3      	ldr	r3, [r4, #8]
 8005bc4:	6861      	ldr	r1, [r4, #4]
 8005bc6:	eb07 060a 	add.w	r6, r7, sl
 8005bca:	42b3      	cmp	r3, r6
 8005bcc:	b085      	sub	sp, #20
 8005bce:	bfb8      	it	lt
 8005bd0:	3101      	addlt	r1, #1
 8005bd2:	f7ff fedb 	bl	800598c <_Balloc>
 8005bd6:	b930      	cbnz	r0, 8005be6 <__multiply+0x42>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	f240 115d 	movw	r1, #349	; 0x15d
 8005bde:	4b43      	ldr	r3, [pc, #268]	; (8005cec <__multiply+0x148>)
 8005be0:	4843      	ldr	r0, [pc, #268]	; (8005cf0 <__multiply+0x14c>)
 8005be2:	f000 fcb1 	bl	8006548 <__assert_func>
 8005be6:	f100 0514 	add.w	r5, r0, #20
 8005bea:	462b      	mov	r3, r5
 8005bec:	2200      	movs	r2, #0
 8005bee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bf2:	4543      	cmp	r3, r8
 8005bf4:	d321      	bcc.n	8005c3a <__multiply+0x96>
 8005bf6:	f104 0314 	add.w	r3, r4, #20
 8005bfa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005bfe:	f109 0314 	add.w	r3, r9, #20
 8005c02:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c06:	9202      	str	r2, [sp, #8]
 8005c08:	1b3a      	subs	r2, r7, r4
 8005c0a:	3a15      	subs	r2, #21
 8005c0c:	f022 0203 	bic.w	r2, r2, #3
 8005c10:	3204      	adds	r2, #4
 8005c12:	f104 0115 	add.w	r1, r4, #21
 8005c16:	428f      	cmp	r7, r1
 8005c18:	bf38      	it	cc
 8005c1a:	2204      	movcc	r2, #4
 8005c1c:	9201      	str	r2, [sp, #4]
 8005c1e:	9a02      	ldr	r2, [sp, #8]
 8005c20:	9303      	str	r3, [sp, #12]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d80c      	bhi.n	8005c40 <__multiply+0x9c>
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	dd03      	ble.n	8005c32 <__multiply+0x8e>
 8005c2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d059      	beq.n	8005ce6 <__multiply+0x142>
 8005c32:	6106      	str	r6, [r0, #16]
 8005c34:	b005      	add	sp, #20
 8005c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3a:	f843 2b04 	str.w	r2, [r3], #4
 8005c3e:	e7d8      	b.n	8005bf2 <__multiply+0x4e>
 8005c40:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c44:	f1ba 0f00 	cmp.w	sl, #0
 8005c48:	d023      	beq.n	8005c92 <__multiply+0xee>
 8005c4a:	46a9      	mov	r9, r5
 8005c4c:	f04f 0c00 	mov.w	ip, #0
 8005c50:	f104 0e14 	add.w	lr, r4, #20
 8005c54:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c58:	f8d9 1000 	ldr.w	r1, [r9]
 8005c5c:	fa1f fb82 	uxth.w	fp, r2
 8005c60:	b289      	uxth	r1, r1
 8005c62:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c66:	4461      	add	r1, ip
 8005c68:	f8d9 c000 	ldr.w	ip, [r9]
 8005c6c:	0c12      	lsrs	r2, r2, #16
 8005c6e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c72:	fb0a c202 	mla	r2, sl, r2, ip
 8005c76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c7a:	b289      	uxth	r1, r1
 8005c7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c80:	4577      	cmp	r7, lr
 8005c82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c86:	f849 1b04 	str.w	r1, [r9], #4
 8005c8a:	d8e3      	bhi.n	8005c54 <__multiply+0xb0>
 8005c8c:	9a01      	ldr	r2, [sp, #4]
 8005c8e:	f845 c002 	str.w	ip, [r5, r2]
 8005c92:	9a03      	ldr	r2, [sp, #12]
 8005c94:	3304      	adds	r3, #4
 8005c96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c9a:	f1b9 0f00 	cmp.w	r9, #0
 8005c9e:	d020      	beq.n	8005ce2 <__multiply+0x13e>
 8005ca0:	46ae      	mov	lr, r5
 8005ca2:	f04f 0a00 	mov.w	sl, #0
 8005ca6:	6829      	ldr	r1, [r5, #0]
 8005ca8:	f104 0c14 	add.w	ip, r4, #20
 8005cac:	f8bc b000 	ldrh.w	fp, [ip]
 8005cb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005cb4:	b289      	uxth	r1, r1
 8005cb6:	fb09 220b 	mla	r2, r9, fp, r2
 8005cba:	4492      	add	sl, r2
 8005cbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005cc0:	f84e 1b04 	str.w	r1, [lr], #4
 8005cc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005cc8:	f8be 1000 	ldrh.w	r1, [lr]
 8005ccc:	0c12      	lsrs	r2, r2, #16
 8005cce:	fb09 1102 	mla	r1, r9, r2, r1
 8005cd2:	4567      	cmp	r7, ip
 8005cd4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005cd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cdc:	d8e6      	bhi.n	8005cac <__multiply+0x108>
 8005cde:	9a01      	ldr	r2, [sp, #4]
 8005ce0:	50a9      	str	r1, [r5, r2]
 8005ce2:	3504      	adds	r5, #4
 8005ce4:	e79b      	b.n	8005c1e <__multiply+0x7a>
 8005ce6:	3e01      	subs	r6, #1
 8005ce8:	e79d      	b.n	8005c26 <__multiply+0x82>
 8005cea:	bf00      	nop
 8005cec:	08007e6b 	.word	0x08007e6b
 8005cf0:	08007e7c 	.word	0x08007e7c

08005cf4 <__pow5mult>:
 8005cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf8:	4615      	mov	r5, r2
 8005cfa:	f012 0203 	ands.w	r2, r2, #3
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460f      	mov	r7, r1
 8005d02:	d007      	beq.n	8005d14 <__pow5mult+0x20>
 8005d04:	4c25      	ldr	r4, [pc, #148]	; (8005d9c <__pow5mult+0xa8>)
 8005d06:	3a01      	subs	r2, #1
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d0e:	f7ff fe9f 	bl	8005a50 <__multadd>
 8005d12:	4607      	mov	r7, r0
 8005d14:	10ad      	asrs	r5, r5, #2
 8005d16:	d03d      	beq.n	8005d94 <__pow5mult+0xa0>
 8005d18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d1a:	b97c      	cbnz	r4, 8005d3c <__pow5mult+0x48>
 8005d1c:	2010      	movs	r0, #16
 8005d1e:	f7ff fe11 	bl	8005944 <malloc>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6270      	str	r0, [r6, #36]	; 0x24
 8005d26:	b928      	cbnz	r0, 8005d34 <__pow5mult+0x40>
 8005d28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d2c:	4b1c      	ldr	r3, [pc, #112]	; (8005da0 <__pow5mult+0xac>)
 8005d2e:	481d      	ldr	r0, [pc, #116]	; (8005da4 <__pow5mult+0xb0>)
 8005d30:	f000 fc0a 	bl	8006548 <__assert_func>
 8005d34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d38:	6004      	str	r4, [r0, #0]
 8005d3a:	60c4      	str	r4, [r0, #12]
 8005d3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d44:	b94c      	cbnz	r4, 8005d5a <__pow5mult+0x66>
 8005d46:	f240 2171 	movw	r1, #625	; 0x271
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ff14 	bl	8005b78 <__i2b>
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d58:	6003      	str	r3, [r0, #0]
 8005d5a:	f04f 0900 	mov.w	r9, #0
 8005d5e:	07eb      	lsls	r3, r5, #31
 8005d60:	d50a      	bpl.n	8005d78 <__pow5mult+0x84>
 8005d62:	4639      	mov	r1, r7
 8005d64:	4622      	mov	r2, r4
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7ff ff1c 	bl	8005ba4 <__multiply>
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4630      	mov	r0, r6
 8005d72:	f7ff fe4b 	bl	8005a0c <_Bfree>
 8005d76:	4647      	mov	r7, r8
 8005d78:	106d      	asrs	r5, r5, #1
 8005d7a:	d00b      	beq.n	8005d94 <__pow5mult+0xa0>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	b938      	cbnz	r0, 8005d90 <__pow5mult+0x9c>
 8005d80:	4622      	mov	r2, r4
 8005d82:	4621      	mov	r1, r4
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7ff ff0d 	bl	8005ba4 <__multiply>
 8005d8a:	6020      	str	r0, [r4, #0]
 8005d8c:	f8c0 9000 	str.w	r9, [r0]
 8005d90:	4604      	mov	r4, r0
 8005d92:	e7e4      	b.n	8005d5e <__pow5mult+0x6a>
 8005d94:	4638      	mov	r0, r7
 8005d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08007fc8 	.word	0x08007fc8
 8005da0:	08007df9 	.word	0x08007df9
 8005da4:	08007e7c 	.word	0x08007e7c

08005da8 <__lshift>:
 8005da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	460c      	mov	r4, r1
 8005dae:	4607      	mov	r7, r0
 8005db0:	4691      	mov	r9, r2
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	6849      	ldr	r1, [r1, #4]
 8005db6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dba:	68a3      	ldr	r3, [r4, #8]
 8005dbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dc0:	f108 0601 	add.w	r6, r8, #1
 8005dc4:	42b3      	cmp	r3, r6
 8005dc6:	db0b      	blt.n	8005de0 <__lshift+0x38>
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f7ff fddf 	bl	800598c <_Balloc>
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b948      	cbnz	r0, 8005de6 <__lshift+0x3e>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005dd8:	4b29      	ldr	r3, [pc, #164]	; (8005e80 <__lshift+0xd8>)
 8005dda:	482a      	ldr	r0, [pc, #168]	; (8005e84 <__lshift+0xdc>)
 8005ddc:	f000 fbb4 	bl	8006548 <__assert_func>
 8005de0:	3101      	adds	r1, #1
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	e7ee      	b.n	8005dc4 <__lshift+0x1c>
 8005de6:	2300      	movs	r3, #0
 8005de8:	f100 0114 	add.w	r1, r0, #20
 8005dec:	f100 0210 	add.w	r2, r0, #16
 8005df0:	4618      	mov	r0, r3
 8005df2:	4553      	cmp	r3, sl
 8005df4:	db37      	blt.n	8005e66 <__lshift+0xbe>
 8005df6:	6920      	ldr	r0, [r4, #16]
 8005df8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dfc:	f104 0314 	add.w	r3, r4, #20
 8005e00:	f019 091f 	ands.w	r9, r9, #31
 8005e04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e0c:	d02f      	beq.n	8005e6e <__lshift+0xc6>
 8005e0e:	468a      	mov	sl, r1
 8005e10:	f04f 0c00 	mov.w	ip, #0
 8005e14:	f1c9 0e20 	rsb	lr, r9, #32
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	fa02 f209 	lsl.w	r2, r2, r9
 8005e1e:	ea42 020c 	orr.w	r2, r2, ip
 8005e22:	f84a 2b04 	str.w	r2, [sl], #4
 8005e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2a:	4298      	cmp	r0, r3
 8005e2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e30:	d8f2      	bhi.n	8005e18 <__lshift+0x70>
 8005e32:	1b03      	subs	r3, r0, r4
 8005e34:	3b15      	subs	r3, #21
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	f104 0215 	add.w	r2, r4, #21
 8005e40:	4290      	cmp	r0, r2
 8005e42:	bf38      	it	cc
 8005e44:	2304      	movcc	r3, #4
 8005e46:	f841 c003 	str.w	ip, [r1, r3]
 8005e4a:	f1bc 0f00 	cmp.w	ip, #0
 8005e4e:	d001      	beq.n	8005e54 <__lshift+0xac>
 8005e50:	f108 0602 	add.w	r6, r8, #2
 8005e54:	3e01      	subs	r6, #1
 8005e56:	4638      	mov	r0, r7
 8005e58:	4621      	mov	r1, r4
 8005e5a:	612e      	str	r6, [r5, #16]
 8005e5c:	f7ff fdd6 	bl	8005a0c <_Bfree>
 8005e60:	4628      	mov	r0, r5
 8005e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e66:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	e7c1      	b.n	8005df2 <__lshift+0x4a>
 8005e6e:	3904      	subs	r1, #4
 8005e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e74:	4298      	cmp	r0, r3
 8005e76:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e7a:	d8f9      	bhi.n	8005e70 <__lshift+0xc8>
 8005e7c:	e7ea      	b.n	8005e54 <__lshift+0xac>
 8005e7e:	bf00      	nop
 8005e80:	08007e6b 	.word	0x08007e6b
 8005e84:	08007e7c 	.word	0x08007e7c

08005e88 <__mcmp>:
 8005e88:	4603      	mov	r3, r0
 8005e8a:	690a      	ldr	r2, [r1, #16]
 8005e8c:	6900      	ldr	r0, [r0, #16]
 8005e8e:	b530      	push	{r4, r5, lr}
 8005e90:	1a80      	subs	r0, r0, r2
 8005e92:	d10d      	bne.n	8005eb0 <__mcmp+0x28>
 8005e94:	3314      	adds	r3, #20
 8005e96:	3114      	adds	r1, #20
 8005e98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ea8:	4295      	cmp	r5, r2
 8005eaa:	d002      	beq.n	8005eb2 <__mcmp+0x2a>
 8005eac:	d304      	bcc.n	8005eb8 <__mcmp+0x30>
 8005eae:	2001      	movs	r0, #1
 8005eb0:	bd30      	pop	{r4, r5, pc}
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	d3f4      	bcc.n	8005ea0 <__mcmp+0x18>
 8005eb6:	e7fb      	b.n	8005eb0 <__mcmp+0x28>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ebc:	e7f8      	b.n	8005eb0 <__mcmp+0x28>
	...

08005ec0 <__mdiff>:
 8005ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4628      	mov	r0, r5
 8005ecc:	4614      	mov	r4, r2
 8005ece:	f7ff ffdb 	bl	8005e88 <__mcmp>
 8005ed2:	1e06      	subs	r6, r0, #0
 8005ed4:	d111      	bne.n	8005efa <__mdiff+0x3a>
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff fd57 	bl	800598c <_Balloc>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	b928      	cbnz	r0, 8005eee <__mdiff+0x2e>
 8005ee2:	f240 2132 	movw	r1, #562	; 0x232
 8005ee6:	4b3a      	ldr	r3, [pc, #232]	; (8005fd0 <__mdiff+0x110>)
 8005ee8:	483a      	ldr	r0, [pc, #232]	; (8005fd4 <__mdiff+0x114>)
 8005eea:	f000 fb2d 	bl	8006548 <__assert_func>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efa:	bfa4      	itt	ge
 8005efc:	4623      	movge	r3, r4
 8005efe:	462c      	movge	r4, r5
 8005f00:	4638      	mov	r0, r7
 8005f02:	6861      	ldr	r1, [r4, #4]
 8005f04:	bfa6      	itte	ge
 8005f06:	461d      	movge	r5, r3
 8005f08:	2600      	movge	r6, #0
 8005f0a:	2601      	movlt	r6, #1
 8005f0c:	f7ff fd3e 	bl	800598c <_Balloc>
 8005f10:	4602      	mov	r2, r0
 8005f12:	b918      	cbnz	r0, 8005f1c <__mdiff+0x5c>
 8005f14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f18:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <__mdiff+0x110>)
 8005f1a:	e7e5      	b.n	8005ee8 <__mdiff+0x28>
 8005f1c:	f102 0814 	add.w	r8, r2, #20
 8005f20:	46c2      	mov	sl, r8
 8005f22:	f04f 0c00 	mov.w	ip, #0
 8005f26:	6927      	ldr	r7, [r4, #16]
 8005f28:	60c6      	str	r6, [r0, #12]
 8005f2a:	692e      	ldr	r6, [r5, #16]
 8005f2c:	f104 0014 	add.w	r0, r4, #20
 8005f30:	f105 0914 	add.w	r9, r5, #20
 8005f34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005f38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f3c:	3410      	adds	r4, #16
 8005f3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005f42:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f46:	fa1f f18b 	uxth.w	r1, fp
 8005f4a:	448c      	add	ip, r1
 8005f4c:	b299      	uxth	r1, r3
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	ebac 0101 	sub.w	r1, ip, r1
 8005f54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f5c:	b289      	uxth	r1, r1
 8005f5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f62:	454e      	cmp	r6, r9
 8005f64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f68:	f84a 3b04 	str.w	r3, [sl], #4
 8005f6c:	d8e7      	bhi.n	8005f3e <__mdiff+0x7e>
 8005f6e:	1b73      	subs	r3, r6, r5
 8005f70:	3b15      	subs	r3, #21
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	3515      	adds	r5, #21
 8005f78:	3304      	adds	r3, #4
 8005f7a:	42ae      	cmp	r6, r5
 8005f7c:	bf38      	it	cc
 8005f7e:	2304      	movcc	r3, #4
 8005f80:	4418      	add	r0, r3
 8005f82:	4443      	add	r3, r8
 8005f84:	461e      	mov	r6, r3
 8005f86:	4605      	mov	r5, r0
 8005f88:	4575      	cmp	r5, lr
 8005f8a:	d30e      	bcc.n	8005faa <__mdiff+0xea>
 8005f8c:	f10e 0103 	add.w	r1, lr, #3
 8005f90:	1a09      	subs	r1, r1, r0
 8005f92:	f021 0103 	bic.w	r1, r1, #3
 8005f96:	3803      	subs	r0, #3
 8005f98:	4586      	cmp	lr, r0
 8005f9a:	bf38      	it	cc
 8005f9c:	2100      	movcc	r1, #0
 8005f9e:	4419      	add	r1, r3
 8005fa0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fa4:	b18b      	cbz	r3, 8005fca <__mdiff+0x10a>
 8005fa6:	6117      	str	r7, [r2, #16]
 8005fa8:	e7a4      	b.n	8005ef4 <__mdiff+0x34>
 8005faa:	f855 8b04 	ldr.w	r8, [r5], #4
 8005fae:	fa1f f188 	uxth.w	r1, r8
 8005fb2:	4461      	add	r1, ip
 8005fb4:	140c      	asrs	r4, r1, #16
 8005fb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005fba:	b289      	uxth	r1, r1
 8005fbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005fc0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005fc4:	f846 1b04 	str.w	r1, [r6], #4
 8005fc8:	e7de      	b.n	8005f88 <__mdiff+0xc8>
 8005fca:	3f01      	subs	r7, #1
 8005fcc:	e7e8      	b.n	8005fa0 <__mdiff+0xe0>
 8005fce:	bf00      	nop
 8005fd0:	08007e6b 	.word	0x08007e6b
 8005fd4:	08007e7c 	.word	0x08007e7c

08005fd8 <__d2b>:
 8005fd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fdc:	2101      	movs	r1, #1
 8005fde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005fe2:	4690      	mov	r8, r2
 8005fe4:	461d      	mov	r5, r3
 8005fe6:	f7ff fcd1 	bl	800598c <_Balloc>
 8005fea:	4604      	mov	r4, r0
 8005fec:	b930      	cbnz	r0, 8005ffc <__d2b+0x24>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	f240 310a 	movw	r1, #778	; 0x30a
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <__d2b+0xb0>)
 8005ff6:	4825      	ldr	r0, [pc, #148]	; (800608c <__d2b+0xb4>)
 8005ff8:	f000 faa6 	bl	8006548 <__assert_func>
 8005ffc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006000:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006004:	bb2d      	cbnz	r5, 8006052 <__d2b+0x7a>
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	f1b8 0300 	subs.w	r3, r8, #0
 800600c:	d026      	beq.n	800605c <__d2b+0x84>
 800600e:	4668      	mov	r0, sp
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f7ff fd83 	bl	8005b1c <__lo0bits>
 8006016:	9900      	ldr	r1, [sp, #0]
 8006018:	b1f0      	cbz	r0, 8006058 <__d2b+0x80>
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	f1c0 0320 	rsb	r3, r0, #32
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	430b      	orrs	r3, r1
 8006026:	40c2      	lsrs	r2, r0
 8006028:	6163      	str	r3, [r4, #20]
 800602a:	9201      	str	r2, [sp, #4]
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf14      	ite	ne
 8006032:	2102      	movne	r1, #2
 8006034:	2101      	moveq	r1, #1
 8006036:	61a3      	str	r3, [r4, #24]
 8006038:	6121      	str	r1, [r4, #16]
 800603a:	b1c5      	cbz	r5, 800606e <__d2b+0x96>
 800603c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006040:	4405      	add	r5, r0
 8006042:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006046:	603d      	str	r5, [r7, #0]
 8006048:	6030      	str	r0, [r6, #0]
 800604a:	4620      	mov	r0, r4
 800604c:	b002      	add	sp, #8
 800604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006056:	e7d6      	b.n	8006006 <__d2b+0x2e>
 8006058:	6161      	str	r1, [r4, #20]
 800605a:	e7e7      	b.n	800602c <__d2b+0x54>
 800605c:	a801      	add	r0, sp, #4
 800605e:	f7ff fd5d 	bl	8005b1c <__lo0bits>
 8006062:	2101      	movs	r1, #1
 8006064:	9b01      	ldr	r3, [sp, #4]
 8006066:	6121      	str	r1, [r4, #16]
 8006068:	6163      	str	r3, [r4, #20]
 800606a:	3020      	adds	r0, #32
 800606c:	e7e5      	b.n	800603a <__d2b+0x62>
 800606e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006072:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006076:	6038      	str	r0, [r7, #0]
 8006078:	6918      	ldr	r0, [r3, #16]
 800607a:	f7ff fd2f 	bl	8005adc <__hi0bits>
 800607e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006082:	6031      	str	r1, [r6, #0]
 8006084:	e7e1      	b.n	800604a <__d2b+0x72>
 8006086:	bf00      	nop
 8006088:	08007e6b 	.word	0x08007e6b
 800608c:	08007e7c 	.word	0x08007e7c

08006090 <_calloc_r>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	fba1 5402 	umull	r5, r4, r1, r2
 8006096:	b934      	cbnz	r4, 80060a6 <_calloc_r+0x16>
 8006098:	4629      	mov	r1, r5
 800609a:	f000 f875 	bl	8006188 <_malloc_r>
 800609e:	4606      	mov	r6, r0
 80060a0:	b928      	cbnz	r0, 80060ae <_calloc_r+0x1e>
 80060a2:	4630      	mov	r0, r6
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
 80060a6:	220c      	movs	r2, #12
 80060a8:	2600      	movs	r6, #0
 80060aa:	6002      	str	r2, [r0, #0]
 80060ac:	e7f9      	b.n	80060a2 <_calloc_r+0x12>
 80060ae:	462a      	mov	r2, r5
 80060b0:	4621      	mov	r1, r4
 80060b2:	f7fe f93f 	bl	8004334 <memset>
 80060b6:	e7f4      	b.n	80060a2 <_calloc_r+0x12>

080060b8 <_free_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4605      	mov	r5, r0
 80060bc:	2900      	cmp	r1, #0
 80060be:	d040      	beq.n	8006142 <_free_r+0x8a>
 80060c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c4:	1f0c      	subs	r4, r1, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bfb8      	it	lt
 80060ca:	18e4      	addlt	r4, r4, r3
 80060cc:	f000 fa98 	bl	8006600 <__malloc_lock>
 80060d0:	4a1c      	ldr	r2, [pc, #112]	; (8006144 <_free_r+0x8c>)
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	b933      	cbnz	r3, 80060e4 <_free_r+0x2c>
 80060d6:	6063      	str	r3, [r4, #4]
 80060d8:	6014      	str	r4, [r2, #0]
 80060da:	4628      	mov	r0, r5
 80060dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e0:	f000 ba94 	b.w	800660c <__malloc_unlock>
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d908      	bls.n	80060fa <_free_r+0x42>
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	1821      	adds	r1, r4, r0
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf01      	itttt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	1809      	addeq	r1, r1, r0
 80060f6:	6021      	streq	r1, [r4, #0]
 80060f8:	e7ed      	b.n	80060d6 <_free_r+0x1e>
 80060fa:	461a      	mov	r2, r3
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	b10b      	cbz	r3, 8006104 <_free_r+0x4c>
 8006100:	42a3      	cmp	r3, r4
 8006102:	d9fa      	bls.n	80060fa <_free_r+0x42>
 8006104:	6811      	ldr	r1, [r2, #0]
 8006106:	1850      	adds	r0, r2, r1
 8006108:	42a0      	cmp	r0, r4
 800610a:	d10b      	bne.n	8006124 <_free_r+0x6c>
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	4401      	add	r1, r0
 8006110:	1850      	adds	r0, r2, r1
 8006112:	4283      	cmp	r3, r0
 8006114:	6011      	str	r1, [r2, #0]
 8006116:	d1e0      	bne.n	80060da <_free_r+0x22>
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4401      	add	r1, r0
 800611e:	6011      	str	r1, [r2, #0]
 8006120:	6053      	str	r3, [r2, #4]
 8006122:	e7da      	b.n	80060da <_free_r+0x22>
 8006124:	d902      	bls.n	800612c <_free_r+0x74>
 8006126:	230c      	movs	r3, #12
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	e7d6      	b.n	80060da <_free_r+0x22>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	1821      	adds	r1, r4, r0
 8006130:	428b      	cmp	r3, r1
 8006132:	bf01      	itttt	eq
 8006134:	6819      	ldreq	r1, [r3, #0]
 8006136:	685b      	ldreq	r3, [r3, #4]
 8006138:	1809      	addeq	r1, r1, r0
 800613a:	6021      	streq	r1, [r4, #0]
 800613c:	6063      	str	r3, [r4, #4]
 800613e:	6054      	str	r4, [r2, #4]
 8006140:	e7cb      	b.n	80060da <_free_r+0x22>
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	20000374 	.word	0x20000374

08006148 <sbrk_aligned>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4e0e      	ldr	r6, [pc, #56]	; (8006184 <sbrk_aligned+0x3c>)
 800614c:	460c      	mov	r4, r1
 800614e:	6831      	ldr	r1, [r6, #0]
 8006150:	4605      	mov	r5, r0
 8006152:	b911      	cbnz	r1, 800615a <sbrk_aligned+0x12>
 8006154:	f000 f9e8 	bl	8006528 <_sbrk_r>
 8006158:	6030      	str	r0, [r6, #0]
 800615a:	4621      	mov	r1, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f000 f9e3 	bl	8006528 <_sbrk_r>
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d00a      	beq.n	800617c <sbrk_aligned+0x34>
 8006166:	1cc4      	adds	r4, r0, #3
 8006168:	f024 0403 	bic.w	r4, r4, #3
 800616c:	42a0      	cmp	r0, r4
 800616e:	d007      	beq.n	8006180 <sbrk_aligned+0x38>
 8006170:	1a21      	subs	r1, r4, r0
 8006172:	4628      	mov	r0, r5
 8006174:	f000 f9d8 	bl	8006528 <_sbrk_r>
 8006178:	3001      	adds	r0, #1
 800617a:	d101      	bne.n	8006180 <sbrk_aligned+0x38>
 800617c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006180:	4620      	mov	r0, r4
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	20000378 	.word	0x20000378

08006188 <_malloc_r>:
 8006188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618c:	1ccd      	adds	r5, r1, #3
 800618e:	f025 0503 	bic.w	r5, r5, #3
 8006192:	3508      	adds	r5, #8
 8006194:	2d0c      	cmp	r5, #12
 8006196:	bf38      	it	cc
 8006198:	250c      	movcc	r5, #12
 800619a:	2d00      	cmp	r5, #0
 800619c:	4607      	mov	r7, r0
 800619e:	db01      	blt.n	80061a4 <_malloc_r+0x1c>
 80061a0:	42a9      	cmp	r1, r5
 80061a2:	d905      	bls.n	80061b0 <_malloc_r+0x28>
 80061a4:	230c      	movs	r3, #12
 80061a6:	2600      	movs	r6, #0
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	4630      	mov	r0, r6
 80061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b0:	4e2e      	ldr	r6, [pc, #184]	; (800626c <_malloc_r+0xe4>)
 80061b2:	f000 fa25 	bl	8006600 <__malloc_lock>
 80061b6:	6833      	ldr	r3, [r6, #0]
 80061b8:	461c      	mov	r4, r3
 80061ba:	bb34      	cbnz	r4, 800620a <_malloc_r+0x82>
 80061bc:	4629      	mov	r1, r5
 80061be:	4638      	mov	r0, r7
 80061c0:	f7ff ffc2 	bl	8006148 <sbrk_aligned>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	4604      	mov	r4, r0
 80061c8:	d14d      	bne.n	8006266 <_malloc_r+0xde>
 80061ca:	6834      	ldr	r4, [r6, #0]
 80061cc:	4626      	mov	r6, r4
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	d140      	bne.n	8006254 <_malloc_r+0xcc>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	4631      	mov	r1, r6
 80061d6:	4638      	mov	r0, r7
 80061d8:	eb04 0803 	add.w	r8, r4, r3
 80061dc:	f000 f9a4 	bl	8006528 <_sbrk_r>
 80061e0:	4580      	cmp	r8, r0
 80061e2:	d13a      	bne.n	800625a <_malloc_r+0xd2>
 80061e4:	6821      	ldr	r1, [r4, #0]
 80061e6:	3503      	adds	r5, #3
 80061e8:	1a6d      	subs	r5, r5, r1
 80061ea:	f025 0503 	bic.w	r5, r5, #3
 80061ee:	3508      	adds	r5, #8
 80061f0:	2d0c      	cmp	r5, #12
 80061f2:	bf38      	it	cc
 80061f4:	250c      	movcc	r5, #12
 80061f6:	4638      	mov	r0, r7
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7ff ffa5 	bl	8006148 <sbrk_aligned>
 80061fe:	3001      	adds	r0, #1
 8006200:	d02b      	beq.n	800625a <_malloc_r+0xd2>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	442b      	add	r3, r5
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	e00e      	b.n	8006228 <_malloc_r+0xa0>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	1b52      	subs	r2, r2, r5
 800620e:	d41e      	bmi.n	800624e <_malloc_r+0xc6>
 8006210:	2a0b      	cmp	r2, #11
 8006212:	d916      	bls.n	8006242 <_malloc_r+0xba>
 8006214:	1961      	adds	r1, r4, r5
 8006216:	42a3      	cmp	r3, r4
 8006218:	6025      	str	r5, [r4, #0]
 800621a:	bf18      	it	ne
 800621c:	6059      	strne	r1, [r3, #4]
 800621e:	6863      	ldr	r3, [r4, #4]
 8006220:	bf08      	it	eq
 8006222:	6031      	streq	r1, [r6, #0]
 8006224:	5162      	str	r2, [r4, r5]
 8006226:	604b      	str	r3, [r1, #4]
 8006228:	4638      	mov	r0, r7
 800622a:	f104 060b 	add.w	r6, r4, #11
 800622e:	f000 f9ed 	bl	800660c <__malloc_unlock>
 8006232:	f026 0607 	bic.w	r6, r6, #7
 8006236:	1d23      	adds	r3, r4, #4
 8006238:	1af2      	subs	r2, r6, r3
 800623a:	d0b6      	beq.n	80061aa <_malloc_r+0x22>
 800623c:	1b9b      	subs	r3, r3, r6
 800623e:	50a3      	str	r3, [r4, r2]
 8006240:	e7b3      	b.n	80061aa <_malloc_r+0x22>
 8006242:	6862      	ldr	r2, [r4, #4]
 8006244:	42a3      	cmp	r3, r4
 8006246:	bf0c      	ite	eq
 8006248:	6032      	streq	r2, [r6, #0]
 800624a:	605a      	strne	r2, [r3, #4]
 800624c:	e7ec      	b.n	8006228 <_malloc_r+0xa0>
 800624e:	4623      	mov	r3, r4
 8006250:	6864      	ldr	r4, [r4, #4]
 8006252:	e7b2      	b.n	80061ba <_malloc_r+0x32>
 8006254:	4634      	mov	r4, r6
 8006256:	6876      	ldr	r6, [r6, #4]
 8006258:	e7b9      	b.n	80061ce <_malloc_r+0x46>
 800625a:	230c      	movs	r3, #12
 800625c:	4638      	mov	r0, r7
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	f000 f9d4 	bl	800660c <__malloc_unlock>
 8006264:	e7a1      	b.n	80061aa <_malloc_r+0x22>
 8006266:	6025      	str	r5, [r4, #0]
 8006268:	e7de      	b.n	8006228 <_malloc_r+0xa0>
 800626a:	bf00      	nop
 800626c:	20000374 	.word	0x20000374

08006270 <__ssputs_r>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	688e      	ldr	r6, [r1, #8]
 8006276:	4682      	mov	sl, r0
 8006278:	429e      	cmp	r6, r3
 800627a:	460c      	mov	r4, r1
 800627c:	4690      	mov	r8, r2
 800627e:	461f      	mov	r7, r3
 8006280:	d838      	bhi.n	80062f4 <__ssputs_r+0x84>
 8006282:	898a      	ldrh	r2, [r1, #12]
 8006284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006288:	d032      	beq.n	80062f0 <__ssputs_r+0x80>
 800628a:	6825      	ldr	r5, [r4, #0]
 800628c:	6909      	ldr	r1, [r1, #16]
 800628e:	3301      	adds	r3, #1
 8006290:	eba5 0901 	sub.w	r9, r5, r1
 8006294:	6965      	ldr	r5, [r4, #20]
 8006296:	444b      	add	r3, r9
 8006298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800629c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a0:	106d      	asrs	r5, r5, #1
 80062a2:	429d      	cmp	r5, r3
 80062a4:	bf38      	it	cc
 80062a6:	461d      	movcc	r5, r3
 80062a8:	0553      	lsls	r3, r2, #21
 80062aa:	d531      	bpl.n	8006310 <__ssputs_r+0xa0>
 80062ac:	4629      	mov	r1, r5
 80062ae:	f7ff ff6b 	bl	8006188 <_malloc_r>
 80062b2:	4606      	mov	r6, r0
 80062b4:	b950      	cbnz	r0, 80062cc <__ssputs_r+0x5c>
 80062b6:	230c      	movs	r3, #12
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062bc:	f8ca 3000 	str.w	r3, [sl]
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062cc:	464a      	mov	r2, r9
 80062ce:	6921      	ldr	r1, [r4, #16]
 80062d0:	f7ff fb4e 	bl	8005970 <memcpy>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	81a3      	strh	r3, [r4, #12]
 80062e0:	6126      	str	r6, [r4, #16]
 80062e2:	444e      	add	r6, r9
 80062e4:	6026      	str	r6, [r4, #0]
 80062e6:	463e      	mov	r6, r7
 80062e8:	6165      	str	r5, [r4, #20]
 80062ea:	eba5 0509 	sub.w	r5, r5, r9
 80062ee:	60a5      	str	r5, [r4, #8]
 80062f0:	42be      	cmp	r6, r7
 80062f2:	d900      	bls.n	80062f6 <__ssputs_r+0x86>
 80062f4:	463e      	mov	r6, r7
 80062f6:	4632      	mov	r2, r6
 80062f8:	4641      	mov	r1, r8
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	f000 f966 	bl	80065cc <memmove>
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	2000      	movs	r0, #0
 8006304:	1b9b      	subs	r3, r3, r6
 8006306:	60a3      	str	r3, [r4, #8]
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	4433      	add	r3, r6
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	e7db      	b.n	80062c8 <__ssputs_r+0x58>
 8006310:	462a      	mov	r2, r5
 8006312:	f000 f981 	bl	8006618 <_realloc_r>
 8006316:	4606      	mov	r6, r0
 8006318:	2800      	cmp	r0, #0
 800631a:	d1e1      	bne.n	80062e0 <__ssputs_r+0x70>
 800631c:	4650      	mov	r0, sl
 800631e:	6921      	ldr	r1, [r4, #16]
 8006320:	f7ff feca 	bl	80060b8 <_free_r>
 8006324:	e7c7      	b.n	80062b6 <__ssputs_r+0x46>
	...

08006328 <_svfiprintf_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	4698      	mov	r8, r3
 800632e:	898b      	ldrh	r3, [r1, #12]
 8006330:	4607      	mov	r7, r0
 8006332:	061b      	lsls	r3, r3, #24
 8006334:	460d      	mov	r5, r1
 8006336:	4614      	mov	r4, r2
 8006338:	b09d      	sub	sp, #116	; 0x74
 800633a:	d50e      	bpl.n	800635a <_svfiprintf_r+0x32>
 800633c:	690b      	ldr	r3, [r1, #16]
 800633e:	b963      	cbnz	r3, 800635a <_svfiprintf_r+0x32>
 8006340:	2140      	movs	r1, #64	; 0x40
 8006342:	f7ff ff21 	bl	8006188 <_malloc_r>
 8006346:	6028      	str	r0, [r5, #0]
 8006348:	6128      	str	r0, [r5, #16]
 800634a:	b920      	cbnz	r0, 8006356 <_svfiprintf_r+0x2e>
 800634c:	230c      	movs	r3, #12
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006354:	e0d1      	b.n	80064fa <_svfiprintf_r+0x1d2>
 8006356:	2340      	movs	r3, #64	; 0x40
 8006358:	616b      	str	r3, [r5, #20]
 800635a:	2300      	movs	r3, #0
 800635c:	9309      	str	r3, [sp, #36]	; 0x24
 800635e:	2320      	movs	r3, #32
 8006360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006364:	2330      	movs	r3, #48	; 0x30
 8006366:	f04f 0901 	mov.w	r9, #1
 800636a:	f8cd 800c 	str.w	r8, [sp, #12]
 800636e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006514 <_svfiprintf_r+0x1ec>
 8006372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006376:	4623      	mov	r3, r4
 8006378:	469a      	mov	sl, r3
 800637a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800637e:	b10a      	cbz	r2, 8006384 <_svfiprintf_r+0x5c>
 8006380:	2a25      	cmp	r2, #37	; 0x25
 8006382:	d1f9      	bne.n	8006378 <_svfiprintf_r+0x50>
 8006384:	ebba 0b04 	subs.w	fp, sl, r4
 8006388:	d00b      	beq.n	80063a2 <_svfiprintf_r+0x7a>
 800638a:	465b      	mov	r3, fp
 800638c:	4622      	mov	r2, r4
 800638e:	4629      	mov	r1, r5
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff ff6d 	bl	8006270 <__ssputs_r>
 8006396:	3001      	adds	r0, #1
 8006398:	f000 80aa 	beq.w	80064f0 <_svfiprintf_r+0x1c8>
 800639c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800639e:	445a      	add	r2, fp
 80063a0:	9209      	str	r2, [sp, #36]	; 0x24
 80063a2:	f89a 3000 	ldrb.w	r3, [sl]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 80a2 	beq.w	80064f0 <_svfiprintf_r+0x1c8>
 80063ac:	2300      	movs	r3, #0
 80063ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063b6:	f10a 0a01 	add.w	sl, sl, #1
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	9307      	str	r3, [sp, #28]
 80063be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c2:	931a      	str	r3, [sp, #104]	; 0x68
 80063c4:	4654      	mov	r4, sl
 80063c6:	2205      	movs	r2, #5
 80063c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063cc:	4851      	ldr	r0, [pc, #324]	; (8006514 <_svfiprintf_r+0x1ec>)
 80063ce:	f7ff fac1 	bl	8005954 <memchr>
 80063d2:	9a04      	ldr	r2, [sp, #16]
 80063d4:	b9d8      	cbnz	r0, 800640e <_svfiprintf_r+0xe6>
 80063d6:	06d0      	lsls	r0, r2, #27
 80063d8:	bf44      	itt	mi
 80063da:	2320      	movmi	r3, #32
 80063dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e0:	0711      	lsls	r1, r2, #28
 80063e2:	bf44      	itt	mi
 80063e4:	232b      	movmi	r3, #43	; 0x2b
 80063e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ea:	f89a 3000 	ldrb.w	r3, [sl]
 80063ee:	2b2a      	cmp	r3, #42	; 0x2a
 80063f0:	d015      	beq.n	800641e <_svfiprintf_r+0xf6>
 80063f2:	4654      	mov	r4, sl
 80063f4:	2000      	movs	r0, #0
 80063f6:	f04f 0c0a 	mov.w	ip, #10
 80063fa:	9a07      	ldr	r2, [sp, #28]
 80063fc:	4621      	mov	r1, r4
 80063fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006402:	3b30      	subs	r3, #48	; 0x30
 8006404:	2b09      	cmp	r3, #9
 8006406:	d94e      	bls.n	80064a6 <_svfiprintf_r+0x17e>
 8006408:	b1b0      	cbz	r0, 8006438 <_svfiprintf_r+0x110>
 800640a:	9207      	str	r2, [sp, #28]
 800640c:	e014      	b.n	8006438 <_svfiprintf_r+0x110>
 800640e:	eba0 0308 	sub.w	r3, r0, r8
 8006412:	fa09 f303 	lsl.w	r3, r9, r3
 8006416:	4313      	orrs	r3, r2
 8006418:	46a2      	mov	sl, r4
 800641a:	9304      	str	r3, [sp, #16]
 800641c:	e7d2      	b.n	80063c4 <_svfiprintf_r+0x9c>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	1d19      	adds	r1, r3, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	9103      	str	r1, [sp, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfbb      	ittet	lt
 800642a:	425b      	neglt	r3, r3
 800642c:	f042 0202 	orrlt.w	r2, r2, #2
 8006430:	9307      	strge	r3, [sp, #28]
 8006432:	9307      	strlt	r3, [sp, #28]
 8006434:	bfb8      	it	lt
 8006436:	9204      	strlt	r2, [sp, #16]
 8006438:	7823      	ldrb	r3, [r4, #0]
 800643a:	2b2e      	cmp	r3, #46	; 0x2e
 800643c:	d10c      	bne.n	8006458 <_svfiprintf_r+0x130>
 800643e:	7863      	ldrb	r3, [r4, #1]
 8006440:	2b2a      	cmp	r3, #42	; 0x2a
 8006442:	d135      	bne.n	80064b0 <_svfiprintf_r+0x188>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	3402      	adds	r4, #2
 8006448:	1d1a      	adds	r2, r3, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	9203      	str	r2, [sp, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	bfb8      	it	lt
 8006452:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006518 <_svfiprintf_r+0x1f0>
 800645c:	2203      	movs	r2, #3
 800645e:	4650      	mov	r0, sl
 8006460:	7821      	ldrb	r1, [r4, #0]
 8006462:	f7ff fa77 	bl	8005954 <memchr>
 8006466:	b140      	cbz	r0, 800647a <_svfiprintf_r+0x152>
 8006468:	2340      	movs	r3, #64	; 0x40
 800646a:	eba0 000a 	sub.w	r0, r0, sl
 800646e:	fa03 f000 	lsl.w	r0, r3, r0
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	3401      	adds	r4, #1
 8006476:	4303      	orrs	r3, r0
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647e:	2206      	movs	r2, #6
 8006480:	4826      	ldr	r0, [pc, #152]	; (800651c <_svfiprintf_r+0x1f4>)
 8006482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006486:	f7ff fa65 	bl	8005954 <memchr>
 800648a:	2800      	cmp	r0, #0
 800648c:	d038      	beq.n	8006500 <_svfiprintf_r+0x1d8>
 800648e:	4b24      	ldr	r3, [pc, #144]	; (8006520 <_svfiprintf_r+0x1f8>)
 8006490:	bb1b      	cbnz	r3, 80064da <_svfiprintf_r+0x1b2>
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	3307      	adds	r3, #7
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	3308      	adds	r3, #8
 800649c:	9303      	str	r3, [sp, #12]
 800649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a0:	4433      	add	r3, r6
 80064a2:	9309      	str	r3, [sp, #36]	; 0x24
 80064a4:	e767      	b.n	8006376 <_svfiprintf_r+0x4e>
 80064a6:	460c      	mov	r4, r1
 80064a8:	2001      	movs	r0, #1
 80064aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ae:	e7a5      	b.n	80063fc <_svfiprintf_r+0xd4>
 80064b0:	2300      	movs	r3, #0
 80064b2:	f04f 0c0a 	mov.w	ip, #10
 80064b6:	4619      	mov	r1, r3
 80064b8:	3401      	adds	r4, #1
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	4620      	mov	r0, r4
 80064be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c2:	3a30      	subs	r2, #48	; 0x30
 80064c4:	2a09      	cmp	r2, #9
 80064c6:	d903      	bls.n	80064d0 <_svfiprintf_r+0x1a8>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0c5      	beq.n	8006458 <_svfiprintf_r+0x130>
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	e7c3      	b.n	8006458 <_svfiprintf_r+0x130>
 80064d0:	4604      	mov	r4, r0
 80064d2:	2301      	movs	r3, #1
 80064d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d8:	e7f0      	b.n	80064bc <_svfiprintf_r+0x194>
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	462a      	mov	r2, r5
 80064e0:	4638      	mov	r0, r7
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <_svfiprintf_r+0x1fc>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	f7fd ffcb 	bl	8004480 <_printf_float>
 80064ea:	1c42      	adds	r2, r0, #1
 80064ec:	4606      	mov	r6, r0
 80064ee:	d1d6      	bne.n	800649e <_svfiprintf_r+0x176>
 80064f0:	89ab      	ldrh	r3, [r5, #12]
 80064f2:	065b      	lsls	r3, r3, #25
 80064f4:	f53f af2c 	bmi.w	8006350 <_svfiprintf_r+0x28>
 80064f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fa:	b01d      	add	sp, #116	; 0x74
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	ab03      	add	r3, sp, #12
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	462a      	mov	r2, r5
 8006506:	4638      	mov	r0, r7
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <_svfiprintf_r+0x1fc>)
 800650a:	a904      	add	r1, sp, #16
 800650c:	f7fe fa54 	bl	80049b8 <_printf_i>
 8006510:	e7eb      	b.n	80064ea <_svfiprintf_r+0x1c2>
 8006512:	bf00      	nop
 8006514:	08007fd4 	.word	0x08007fd4
 8006518:	08007fda 	.word	0x08007fda
 800651c:	08007fde 	.word	0x08007fde
 8006520:	08004481 	.word	0x08004481
 8006524:	08006271 	.word	0x08006271

08006528 <_sbrk_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	2300      	movs	r3, #0
 800652c:	4d05      	ldr	r5, [pc, #20]	; (8006544 <_sbrk_r+0x1c>)
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	f7fb fe32 	bl	800219c <_sbrk>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_sbrk_r+0x1a>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_sbrk_r+0x1a>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	2000037c 	.word	0x2000037c

08006548 <__assert_func>:
 8006548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800654a:	4614      	mov	r4, r2
 800654c:	461a      	mov	r2, r3
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <__assert_func+0x2c>)
 8006550:	4605      	mov	r5, r0
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68d8      	ldr	r0, [r3, #12]
 8006556:	b14c      	cbz	r4, 800656c <__assert_func+0x24>
 8006558:	4b07      	ldr	r3, [pc, #28]	; (8006578 <__assert_func+0x30>)
 800655a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800655e:	9100      	str	r1, [sp, #0]
 8006560:	462b      	mov	r3, r5
 8006562:	4906      	ldr	r1, [pc, #24]	; (800657c <__assert_func+0x34>)
 8006564:	f000 f80e 	bl	8006584 <fiprintf>
 8006568:	f000 faaa 	bl	8006ac0 <abort>
 800656c:	4b04      	ldr	r3, [pc, #16]	; (8006580 <__assert_func+0x38>)
 800656e:	461c      	mov	r4, r3
 8006570:	e7f3      	b.n	800655a <__assert_func+0x12>
 8006572:	bf00      	nop
 8006574:	2000009c 	.word	0x2000009c
 8006578:	08007fe5 	.word	0x08007fe5
 800657c:	08007ff2 	.word	0x08007ff2
 8006580:	08008020 	.word	0x08008020

08006584 <fiprintf>:
 8006584:	b40e      	push	{r1, r2, r3}
 8006586:	b503      	push	{r0, r1, lr}
 8006588:	4601      	mov	r1, r0
 800658a:	ab03      	add	r3, sp, #12
 800658c:	4805      	ldr	r0, [pc, #20]	; (80065a4 <fiprintf+0x20>)
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	6800      	ldr	r0, [r0, #0]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	f000 f895 	bl	80066c4 <_vfiprintf_r>
 800659a:	b002      	add	sp, #8
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	b003      	add	sp, #12
 80065a2:	4770      	bx	lr
 80065a4:	2000009c 	.word	0x2000009c

080065a8 <__ascii_mbtowc>:
 80065a8:	b082      	sub	sp, #8
 80065aa:	b901      	cbnz	r1, 80065ae <__ascii_mbtowc+0x6>
 80065ac:	a901      	add	r1, sp, #4
 80065ae:	b142      	cbz	r2, 80065c2 <__ascii_mbtowc+0x1a>
 80065b0:	b14b      	cbz	r3, 80065c6 <__ascii_mbtowc+0x1e>
 80065b2:	7813      	ldrb	r3, [r2, #0]
 80065b4:	600b      	str	r3, [r1, #0]
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	1e10      	subs	r0, r2, #0
 80065ba:	bf18      	it	ne
 80065bc:	2001      	movne	r0, #1
 80065be:	b002      	add	sp, #8
 80065c0:	4770      	bx	lr
 80065c2:	4610      	mov	r0, r2
 80065c4:	e7fb      	b.n	80065be <__ascii_mbtowc+0x16>
 80065c6:	f06f 0001 	mvn.w	r0, #1
 80065ca:	e7f8      	b.n	80065be <__ascii_mbtowc+0x16>

080065cc <memmove>:
 80065cc:	4288      	cmp	r0, r1
 80065ce:	b510      	push	{r4, lr}
 80065d0:	eb01 0402 	add.w	r4, r1, r2
 80065d4:	d902      	bls.n	80065dc <memmove+0x10>
 80065d6:	4284      	cmp	r4, r0
 80065d8:	4623      	mov	r3, r4
 80065da:	d807      	bhi.n	80065ec <memmove+0x20>
 80065dc:	1e43      	subs	r3, r0, #1
 80065de:	42a1      	cmp	r1, r4
 80065e0:	d008      	beq.n	80065f4 <memmove+0x28>
 80065e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ea:	e7f8      	b.n	80065de <memmove+0x12>
 80065ec:	4601      	mov	r1, r0
 80065ee:	4402      	add	r2, r0
 80065f0:	428a      	cmp	r2, r1
 80065f2:	d100      	bne.n	80065f6 <memmove+0x2a>
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065fe:	e7f7      	b.n	80065f0 <memmove+0x24>

08006600 <__malloc_lock>:
 8006600:	4801      	ldr	r0, [pc, #4]	; (8006608 <__malloc_lock+0x8>)
 8006602:	f000 bc19 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006606:	bf00      	nop
 8006608:	20000380 	.word	0x20000380

0800660c <__malloc_unlock>:
 800660c:	4801      	ldr	r0, [pc, #4]	; (8006614 <__malloc_unlock+0x8>)
 800660e:	f000 bc14 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006612:	bf00      	nop
 8006614:	20000380 	.word	0x20000380

08006618 <_realloc_r>:
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	4680      	mov	r8, r0
 800661e:	4614      	mov	r4, r2
 8006620:	460e      	mov	r6, r1
 8006622:	b921      	cbnz	r1, 800662e <_realloc_r+0x16>
 8006624:	4611      	mov	r1, r2
 8006626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	f7ff bdad 	b.w	8006188 <_malloc_r>
 800662e:	b92a      	cbnz	r2, 800663c <_realloc_r+0x24>
 8006630:	f7ff fd42 	bl	80060b8 <_free_r>
 8006634:	4625      	mov	r5, r4
 8006636:	4628      	mov	r0, r5
 8006638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800663c:	f000 fc64 	bl	8006f08 <_malloc_usable_size_r>
 8006640:	4284      	cmp	r4, r0
 8006642:	4607      	mov	r7, r0
 8006644:	d802      	bhi.n	800664c <_realloc_r+0x34>
 8006646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800664a:	d812      	bhi.n	8006672 <_realloc_r+0x5a>
 800664c:	4621      	mov	r1, r4
 800664e:	4640      	mov	r0, r8
 8006650:	f7ff fd9a 	bl	8006188 <_malloc_r>
 8006654:	4605      	mov	r5, r0
 8006656:	2800      	cmp	r0, #0
 8006658:	d0ed      	beq.n	8006636 <_realloc_r+0x1e>
 800665a:	42bc      	cmp	r4, r7
 800665c:	4622      	mov	r2, r4
 800665e:	4631      	mov	r1, r6
 8006660:	bf28      	it	cs
 8006662:	463a      	movcs	r2, r7
 8006664:	f7ff f984 	bl	8005970 <memcpy>
 8006668:	4631      	mov	r1, r6
 800666a:	4640      	mov	r0, r8
 800666c:	f7ff fd24 	bl	80060b8 <_free_r>
 8006670:	e7e1      	b.n	8006636 <_realloc_r+0x1e>
 8006672:	4635      	mov	r5, r6
 8006674:	e7df      	b.n	8006636 <_realloc_r+0x1e>

08006676 <__sfputc_r>:
 8006676:	6893      	ldr	r3, [r2, #8]
 8006678:	b410      	push	{r4}
 800667a:	3b01      	subs	r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	6093      	str	r3, [r2, #8]
 8006680:	da07      	bge.n	8006692 <__sfputc_r+0x1c>
 8006682:	6994      	ldr	r4, [r2, #24]
 8006684:	42a3      	cmp	r3, r4
 8006686:	db01      	blt.n	800668c <__sfputc_r+0x16>
 8006688:	290a      	cmp	r1, #10
 800668a:	d102      	bne.n	8006692 <__sfputc_r+0x1c>
 800668c:	bc10      	pop	{r4}
 800668e:	f000 b949 	b.w	8006924 <__swbuf_r>
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	1c58      	adds	r0, r3, #1
 8006696:	6010      	str	r0, [r2, #0]
 8006698:	7019      	strb	r1, [r3, #0]
 800669a:	4608      	mov	r0, r1
 800669c:	bc10      	pop	{r4}
 800669e:	4770      	bx	lr

080066a0 <__sfputs_r>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	4614      	mov	r4, r2
 80066a8:	18d5      	adds	r5, r2, r3
 80066aa:	42ac      	cmp	r4, r5
 80066ac:	d101      	bne.n	80066b2 <__sfputs_r+0x12>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e007      	b.n	80066c2 <__sfputs_r+0x22>
 80066b2:	463a      	mov	r2, r7
 80066b4:	4630      	mov	r0, r6
 80066b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ba:	f7ff ffdc 	bl	8006676 <__sfputc_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d1f3      	bne.n	80066aa <__sfputs_r+0xa>
 80066c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066c4 <_vfiprintf_r>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	460d      	mov	r5, r1
 80066ca:	4614      	mov	r4, r2
 80066cc:	4698      	mov	r8, r3
 80066ce:	4606      	mov	r6, r0
 80066d0:	b09d      	sub	sp, #116	; 0x74
 80066d2:	b118      	cbz	r0, 80066dc <_vfiprintf_r+0x18>
 80066d4:	6983      	ldr	r3, [r0, #24]
 80066d6:	b90b      	cbnz	r3, 80066dc <_vfiprintf_r+0x18>
 80066d8:	f000 fb10 	bl	8006cfc <__sinit>
 80066dc:	4b89      	ldr	r3, [pc, #548]	; (8006904 <_vfiprintf_r+0x240>)
 80066de:	429d      	cmp	r5, r3
 80066e0:	d11b      	bne.n	800671a <_vfiprintf_r+0x56>
 80066e2:	6875      	ldr	r5, [r6, #4]
 80066e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066e6:	07d9      	lsls	r1, r3, #31
 80066e8:	d405      	bmi.n	80066f6 <_vfiprintf_r+0x32>
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	059a      	lsls	r2, r3, #22
 80066ee:	d402      	bmi.n	80066f6 <_vfiprintf_r+0x32>
 80066f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066f2:	f000 fba1 	bl	8006e38 <__retarget_lock_acquire_recursive>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	071b      	lsls	r3, r3, #28
 80066fa:	d501      	bpl.n	8006700 <_vfiprintf_r+0x3c>
 80066fc:	692b      	ldr	r3, [r5, #16]
 80066fe:	b9eb      	cbnz	r3, 800673c <_vfiprintf_r+0x78>
 8006700:	4629      	mov	r1, r5
 8006702:	4630      	mov	r0, r6
 8006704:	f000 f96e 	bl	80069e4 <__swsetup_r>
 8006708:	b1c0      	cbz	r0, 800673c <_vfiprintf_r+0x78>
 800670a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800670c:	07dc      	lsls	r4, r3, #31
 800670e:	d50e      	bpl.n	800672e <_vfiprintf_r+0x6a>
 8006710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006714:	b01d      	add	sp, #116	; 0x74
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <_vfiprintf_r+0x244>)
 800671c:	429d      	cmp	r5, r3
 800671e:	d101      	bne.n	8006724 <_vfiprintf_r+0x60>
 8006720:	68b5      	ldr	r5, [r6, #8]
 8006722:	e7df      	b.n	80066e4 <_vfiprintf_r+0x20>
 8006724:	4b79      	ldr	r3, [pc, #484]	; (800690c <_vfiprintf_r+0x248>)
 8006726:	429d      	cmp	r5, r3
 8006728:	bf08      	it	eq
 800672a:	68f5      	ldreq	r5, [r6, #12]
 800672c:	e7da      	b.n	80066e4 <_vfiprintf_r+0x20>
 800672e:	89ab      	ldrh	r3, [r5, #12]
 8006730:	0598      	lsls	r0, r3, #22
 8006732:	d4ed      	bmi.n	8006710 <_vfiprintf_r+0x4c>
 8006734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006736:	f000 fb80 	bl	8006e3a <__retarget_lock_release_recursive>
 800673a:	e7e9      	b.n	8006710 <_vfiprintf_r+0x4c>
 800673c:	2300      	movs	r3, #0
 800673e:	9309      	str	r3, [sp, #36]	; 0x24
 8006740:	2320      	movs	r3, #32
 8006742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006746:	2330      	movs	r3, #48	; 0x30
 8006748:	f04f 0901 	mov.w	r9, #1
 800674c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006750:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006910 <_vfiprintf_r+0x24c>
 8006754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006758:	4623      	mov	r3, r4
 800675a:	469a      	mov	sl, r3
 800675c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006760:	b10a      	cbz	r2, 8006766 <_vfiprintf_r+0xa2>
 8006762:	2a25      	cmp	r2, #37	; 0x25
 8006764:	d1f9      	bne.n	800675a <_vfiprintf_r+0x96>
 8006766:	ebba 0b04 	subs.w	fp, sl, r4
 800676a:	d00b      	beq.n	8006784 <_vfiprintf_r+0xc0>
 800676c:	465b      	mov	r3, fp
 800676e:	4622      	mov	r2, r4
 8006770:	4629      	mov	r1, r5
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff ff94 	bl	80066a0 <__sfputs_r>
 8006778:	3001      	adds	r0, #1
 800677a:	f000 80aa 	beq.w	80068d2 <_vfiprintf_r+0x20e>
 800677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006780:	445a      	add	r2, fp
 8006782:	9209      	str	r2, [sp, #36]	; 0x24
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80a2 	beq.w	80068d2 <_vfiprintf_r+0x20e>
 800678e:	2300      	movs	r3, #0
 8006790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006798:	f10a 0a01 	add.w	sl, sl, #1
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a4:	931a      	str	r3, [sp, #104]	; 0x68
 80067a6:	4654      	mov	r4, sl
 80067a8:	2205      	movs	r2, #5
 80067aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ae:	4858      	ldr	r0, [pc, #352]	; (8006910 <_vfiprintf_r+0x24c>)
 80067b0:	f7ff f8d0 	bl	8005954 <memchr>
 80067b4:	9a04      	ldr	r2, [sp, #16]
 80067b6:	b9d8      	cbnz	r0, 80067f0 <_vfiprintf_r+0x12c>
 80067b8:	06d1      	lsls	r1, r2, #27
 80067ba:	bf44      	itt	mi
 80067bc:	2320      	movmi	r3, #32
 80067be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c2:	0713      	lsls	r3, r2, #28
 80067c4:	bf44      	itt	mi
 80067c6:	232b      	movmi	r3, #43	; 0x2b
 80067c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067cc:	f89a 3000 	ldrb.w	r3, [sl]
 80067d0:	2b2a      	cmp	r3, #42	; 0x2a
 80067d2:	d015      	beq.n	8006800 <_vfiprintf_r+0x13c>
 80067d4:	4654      	mov	r4, sl
 80067d6:	2000      	movs	r0, #0
 80067d8:	f04f 0c0a 	mov.w	ip, #10
 80067dc:	9a07      	ldr	r2, [sp, #28]
 80067de:	4621      	mov	r1, r4
 80067e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e4:	3b30      	subs	r3, #48	; 0x30
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d94e      	bls.n	8006888 <_vfiprintf_r+0x1c4>
 80067ea:	b1b0      	cbz	r0, 800681a <_vfiprintf_r+0x156>
 80067ec:	9207      	str	r2, [sp, #28]
 80067ee:	e014      	b.n	800681a <_vfiprintf_r+0x156>
 80067f0:	eba0 0308 	sub.w	r3, r0, r8
 80067f4:	fa09 f303 	lsl.w	r3, r9, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	46a2      	mov	sl, r4
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	e7d2      	b.n	80067a6 <_vfiprintf_r+0xe2>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	1d19      	adds	r1, r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	9103      	str	r1, [sp, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	bfbb      	ittet	lt
 800680c:	425b      	neglt	r3, r3
 800680e:	f042 0202 	orrlt.w	r2, r2, #2
 8006812:	9307      	strge	r3, [sp, #28]
 8006814:	9307      	strlt	r3, [sp, #28]
 8006816:	bfb8      	it	lt
 8006818:	9204      	strlt	r2, [sp, #16]
 800681a:	7823      	ldrb	r3, [r4, #0]
 800681c:	2b2e      	cmp	r3, #46	; 0x2e
 800681e:	d10c      	bne.n	800683a <_vfiprintf_r+0x176>
 8006820:	7863      	ldrb	r3, [r4, #1]
 8006822:	2b2a      	cmp	r3, #42	; 0x2a
 8006824:	d135      	bne.n	8006892 <_vfiprintf_r+0x1ce>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3402      	adds	r4, #2
 800682a:	1d1a      	adds	r2, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	9203      	str	r2, [sp, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfb8      	it	lt
 8006834:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006838:	9305      	str	r3, [sp, #20]
 800683a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006914 <_vfiprintf_r+0x250>
 800683e:	2203      	movs	r2, #3
 8006840:	4650      	mov	r0, sl
 8006842:	7821      	ldrb	r1, [r4, #0]
 8006844:	f7ff f886 	bl	8005954 <memchr>
 8006848:	b140      	cbz	r0, 800685c <_vfiprintf_r+0x198>
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	eba0 000a 	sub.w	r0, r0, sl
 8006850:	fa03 f000 	lsl.w	r0, r3, r0
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	3401      	adds	r4, #1
 8006858:	4303      	orrs	r3, r0
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006860:	2206      	movs	r2, #6
 8006862:	482d      	ldr	r0, [pc, #180]	; (8006918 <_vfiprintf_r+0x254>)
 8006864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006868:	f7ff f874 	bl	8005954 <memchr>
 800686c:	2800      	cmp	r0, #0
 800686e:	d03f      	beq.n	80068f0 <_vfiprintf_r+0x22c>
 8006870:	4b2a      	ldr	r3, [pc, #168]	; (800691c <_vfiprintf_r+0x258>)
 8006872:	bb1b      	cbnz	r3, 80068bc <_vfiprintf_r+0x1f8>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	3307      	adds	r3, #7
 8006878:	f023 0307 	bic.w	r3, r3, #7
 800687c:	3308      	adds	r3, #8
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006882:	443b      	add	r3, r7
 8006884:	9309      	str	r3, [sp, #36]	; 0x24
 8006886:	e767      	b.n	8006758 <_vfiprintf_r+0x94>
 8006888:	460c      	mov	r4, r1
 800688a:	2001      	movs	r0, #1
 800688c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006890:	e7a5      	b.n	80067de <_vfiprintf_r+0x11a>
 8006892:	2300      	movs	r3, #0
 8006894:	f04f 0c0a 	mov.w	ip, #10
 8006898:	4619      	mov	r1, r3
 800689a:	3401      	adds	r4, #1
 800689c:	9305      	str	r3, [sp, #20]
 800689e:	4620      	mov	r0, r4
 80068a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a4:	3a30      	subs	r2, #48	; 0x30
 80068a6:	2a09      	cmp	r2, #9
 80068a8:	d903      	bls.n	80068b2 <_vfiprintf_r+0x1ee>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0c5      	beq.n	800683a <_vfiprintf_r+0x176>
 80068ae:	9105      	str	r1, [sp, #20]
 80068b0:	e7c3      	b.n	800683a <_vfiprintf_r+0x176>
 80068b2:	4604      	mov	r4, r0
 80068b4:	2301      	movs	r3, #1
 80068b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ba:	e7f0      	b.n	800689e <_vfiprintf_r+0x1da>
 80068bc:	ab03      	add	r3, sp, #12
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	462a      	mov	r2, r5
 80068c2:	4630      	mov	r0, r6
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <_vfiprintf_r+0x25c>)
 80068c6:	a904      	add	r1, sp, #16
 80068c8:	f7fd fdda 	bl	8004480 <_printf_float>
 80068cc:	4607      	mov	r7, r0
 80068ce:	1c78      	adds	r0, r7, #1
 80068d0:	d1d6      	bne.n	8006880 <_vfiprintf_r+0x1bc>
 80068d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068d4:	07d9      	lsls	r1, r3, #31
 80068d6:	d405      	bmi.n	80068e4 <_vfiprintf_r+0x220>
 80068d8:	89ab      	ldrh	r3, [r5, #12]
 80068da:	059a      	lsls	r2, r3, #22
 80068dc:	d402      	bmi.n	80068e4 <_vfiprintf_r+0x220>
 80068de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e0:	f000 faab 	bl	8006e3a <__retarget_lock_release_recursive>
 80068e4:	89ab      	ldrh	r3, [r5, #12]
 80068e6:	065b      	lsls	r3, r3, #25
 80068e8:	f53f af12 	bmi.w	8006710 <_vfiprintf_r+0x4c>
 80068ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ee:	e711      	b.n	8006714 <_vfiprintf_r+0x50>
 80068f0:	ab03      	add	r3, sp, #12
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	462a      	mov	r2, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <_vfiprintf_r+0x25c>)
 80068fa:	a904      	add	r1, sp, #16
 80068fc:	f7fe f85c 	bl	80049b8 <_printf_i>
 8006900:	e7e4      	b.n	80068cc <_vfiprintf_r+0x208>
 8006902:	bf00      	nop
 8006904:	0800814c 	.word	0x0800814c
 8006908:	0800816c 	.word	0x0800816c
 800690c:	0800812c 	.word	0x0800812c
 8006910:	08007fd4 	.word	0x08007fd4
 8006914:	08007fda 	.word	0x08007fda
 8006918:	08007fde 	.word	0x08007fde
 800691c:	08004481 	.word	0x08004481
 8006920:	080066a1 	.word	0x080066a1

08006924 <__swbuf_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	460e      	mov	r6, r1
 8006928:	4614      	mov	r4, r2
 800692a:	4605      	mov	r5, r0
 800692c:	b118      	cbz	r0, 8006936 <__swbuf_r+0x12>
 800692e:	6983      	ldr	r3, [r0, #24]
 8006930:	b90b      	cbnz	r3, 8006936 <__swbuf_r+0x12>
 8006932:	f000 f9e3 	bl	8006cfc <__sinit>
 8006936:	4b21      	ldr	r3, [pc, #132]	; (80069bc <__swbuf_r+0x98>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d12b      	bne.n	8006994 <__swbuf_r+0x70>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	69a3      	ldr	r3, [r4, #24]
 8006940:	60a3      	str	r3, [r4, #8]
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	071a      	lsls	r2, r3, #28
 8006946:	d52f      	bpl.n	80069a8 <__swbuf_r+0x84>
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	b36b      	cbz	r3, 80069a8 <__swbuf_r+0x84>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	b2f6      	uxtb	r6, r6
 8006952:	1ac0      	subs	r0, r0, r3
 8006954:	6963      	ldr	r3, [r4, #20]
 8006956:	4637      	mov	r7, r6
 8006958:	4283      	cmp	r3, r0
 800695a:	dc04      	bgt.n	8006966 <__swbuf_r+0x42>
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f938 	bl	8006bd4 <_fflush_r>
 8006964:	bb30      	cbnz	r0, 80069b4 <__swbuf_r+0x90>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	3001      	adds	r0, #1
 800696a:	3b01      	subs	r3, #1
 800696c:	60a3      	str	r3, [r4, #8]
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	701e      	strb	r6, [r3, #0]
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	4283      	cmp	r3, r0
 800697a:	d004      	beq.n	8006986 <__swbuf_r+0x62>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	07db      	lsls	r3, r3, #31
 8006980:	d506      	bpl.n	8006990 <__swbuf_r+0x6c>
 8006982:	2e0a      	cmp	r6, #10
 8006984:	d104      	bne.n	8006990 <__swbuf_r+0x6c>
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f923 	bl	8006bd4 <_fflush_r>
 800698e:	b988      	cbnz	r0, 80069b4 <__swbuf_r+0x90>
 8006990:	4638      	mov	r0, r7
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <__swbuf_r+0x9c>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d101      	bne.n	800699e <__swbuf_r+0x7a>
 800699a:	68ac      	ldr	r4, [r5, #8]
 800699c:	e7cf      	b.n	800693e <__swbuf_r+0x1a>
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <__swbuf_r+0xa0>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	bf08      	it	eq
 80069a4:	68ec      	ldreq	r4, [r5, #12]
 80069a6:	e7ca      	b.n	800693e <__swbuf_r+0x1a>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f81a 	bl	80069e4 <__swsetup_r>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d0cb      	beq.n	800694c <__swbuf_r+0x28>
 80069b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069b8:	e7ea      	b.n	8006990 <__swbuf_r+0x6c>
 80069ba:	bf00      	nop
 80069bc:	0800814c 	.word	0x0800814c
 80069c0:	0800816c 	.word	0x0800816c
 80069c4:	0800812c 	.word	0x0800812c

080069c8 <__ascii_wctomb>:
 80069c8:	4603      	mov	r3, r0
 80069ca:	4608      	mov	r0, r1
 80069cc:	b141      	cbz	r1, 80069e0 <__ascii_wctomb+0x18>
 80069ce:	2aff      	cmp	r2, #255	; 0xff
 80069d0:	d904      	bls.n	80069dc <__ascii_wctomb+0x14>
 80069d2:	228a      	movs	r2, #138	; 0x8a
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	4770      	bx	lr
 80069dc:	2001      	movs	r0, #1
 80069de:	700a      	strb	r2, [r1, #0]
 80069e0:	4770      	bx	lr
	...

080069e4 <__swsetup_r>:
 80069e4:	4b32      	ldr	r3, [pc, #200]	; (8006ab0 <__swsetup_r+0xcc>)
 80069e6:	b570      	push	{r4, r5, r6, lr}
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	4606      	mov	r6, r0
 80069ec:	460c      	mov	r4, r1
 80069ee:	b125      	cbz	r5, 80069fa <__swsetup_r+0x16>
 80069f0:	69ab      	ldr	r3, [r5, #24]
 80069f2:	b913      	cbnz	r3, 80069fa <__swsetup_r+0x16>
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 f981 	bl	8006cfc <__sinit>
 80069fa:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <__swsetup_r+0xd0>)
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d10f      	bne.n	8006a20 <__swsetup_r+0x3c>
 8006a00:	686c      	ldr	r4, [r5, #4]
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a08:	0719      	lsls	r1, r3, #28
 8006a0a:	d42c      	bmi.n	8006a66 <__swsetup_r+0x82>
 8006a0c:	06dd      	lsls	r5, r3, #27
 8006a0e:	d411      	bmi.n	8006a34 <__swsetup_r+0x50>
 8006a10:	2309      	movs	r3, #9
 8006a12:	6033      	str	r3, [r6, #0]
 8006a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	e03e      	b.n	8006a9e <__swsetup_r+0xba>
 8006a20:	4b25      	ldr	r3, [pc, #148]	; (8006ab8 <__swsetup_r+0xd4>)
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d101      	bne.n	8006a2a <__swsetup_r+0x46>
 8006a26:	68ac      	ldr	r4, [r5, #8]
 8006a28:	e7eb      	b.n	8006a02 <__swsetup_r+0x1e>
 8006a2a:	4b24      	ldr	r3, [pc, #144]	; (8006abc <__swsetup_r+0xd8>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	bf08      	it	eq
 8006a30:	68ec      	ldreq	r4, [r5, #12]
 8006a32:	e7e6      	b.n	8006a02 <__swsetup_r+0x1e>
 8006a34:	0758      	lsls	r0, r3, #29
 8006a36:	d512      	bpl.n	8006a5e <__swsetup_r+0x7a>
 8006a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a3a:	b141      	cbz	r1, 8006a4e <__swsetup_r+0x6a>
 8006a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <__swsetup_r+0x66>
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7ff fb37 	bl	80060b8 <_free_r>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	2300      	movs	r3, #0
 8006a58:	6063      	str	r3, [r4, #4]
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f043 0308 	orr.w	r3, r3, #8
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	b94b      	cbnz	r3, 8006a7e <__swsetup_r+0x9a>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a74:	d003      	beq.n	8006a7e <__swsetup_r+0x9a>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f000 fa05 	bl	8006e88 <__smakebuf_r>
 8006a7e:	89a0      	ldrh	r0, [r4, #12]
 8006a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a84:	f010 0301 	ands.w	r3, r0, #1
 8006a88:	d00a      	beq.n	8006aa0 <__swsetup_r+0xbc>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60a3      	str	r3, [r4, #8]
 8006a8e:	6963      	ldr	r3, [r4, #20]
 8006a90:	425b      	negs	r3, r3
 8006a92:	61a3      	str	r3, [r4, #24]
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	b943      	cbnz	r3, 8006aaa <__swsetup_r+0xc6>
 8006a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a9c:	d1ba      	bne.n	8006a14 <__swsetup_r+0x30>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	0781      	lsls	r1, r0, #30
 8006aa2:	bf58      	it	pl
 8006aa4:	6963      	ldrpl	r3, [r4, #20]
 8006aa6:	60a3      	str	r3, [r4, #8]
 8006aa8:	e7f4      	b.n	8006a94 <__swsetup_r+0xb0>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e7f7      	b.n	8006a9e <__swsetup_r+0xba>
 8006aae:	bf00      	nop
 8006ab0:	2000009c 	.word	0x2000009c
 8006ab4:	0800814c 	.word	0x0800814c
 8006ab8:	0800816c 	.word	0x0800816c
 8006abc:	0800812c 	.word	0x0800812c

08006ac0 <abort>:
 8006ac0:	2006      	movs	r0, #6
 8006ac2:	b508      	push	{r3, lr}
 8006ac4:	f000 fa50 	bl	8006f68 <raise>
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fb faf3 	bl	80020b4 <_exit>
	...

08006ad0 <__sflush_r>:
 8006ad0:	898a      	ldrh	r2, [r1, #12]
 8006ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	0710      	lsls	r0, r2, #28
 8006ad8:	460c      	mov	r4, r1
 8006ada:	d457      	bmi.n	8006b8c <__sflush_r+0xbc>
 8006adc:	684b      	ldr	r3, [r1, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	dc04      	bgt.n	8006aec <__sflush_r+0x1c>
 8006ae2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	dc01      	bgt.n	8006aec <__sflush_r+0x1c>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aee:	2e00      	cmp	r6, #0
 8006af0:	d0fa      	beq.n	8006ae8 <__sflush_r+0x18>
 8006af2:	2300      	movs	r3, #0
 8006af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006af8:	682f      	ldr	r7, [r5, #0]
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	d032      	beq.n	8006b64 <__sflush_r+0x94>
 8006afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	075a      	lsls	r2, r3, #29
 8006b04:	d505      	bpl.n	8006b12 <__sflush_r+0x42>
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	1ac0      	subs	r0, r0, r3
 8006b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b0c:	b10b      	cbz	r3, 8006b12 <__sflush_r+0x42>
 8006b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b10:	1ac0      	subs	r0, r0, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	4602      	mov	r2, r0
 8006b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b18:	4628      	mov	r0, r5
 8006b1a:	6a21      	ldr	r1, [r4, #32]
 8006b1c:	47b0      	blx	r6
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	d106      	bne.n	8006b32 <__sflush_r+0x62>
 8006b24:	6829      	ldr	r1, [r5, #0]
 8006b26:	291d      	cmp	r1, #29
 8006b28:	d82c      	bhi.n	8006b84 <__sflush_r+0xb4>
 8006b2a:	4a29      	ldr	r2, [pc, #164]	; (8006bd0 <__sflush_r+0x100>)
 8006b2c:	40ca      	lsrs	r2, r1
 8006b2e:	07d6      	lsls	r6, r2, #31
 8006b30:	d528      	bpl.n	8006b84 <__sflush_r+0xb4>
 8006b32:	2200      	movs	r2, #0
 8006b34:	6062      	str	r2, [r4, #4]
 8006b36:	6922      	ldr	r2, [r4, #16]
 8006b38:	04d9      	lsls	r1, r3, #19
 8006b3a:	6022      	str	r2, [r4, #0]
 8006b3c:	d504      	bpl.n	8006b48 <__sflush_r+0x78>
 8006b3e:	1c42      	adds	r2, r0, #1
 8006b40:	d101      	bne.n	8006b46 <__sflush_r+0x76>
 8006b42:	682b      	ldr	r3, [r5, #0]
 8006b44:	b903      	cbnz	r3, 8006b48 <__sflush_r+0x78>
 8006b46:	6560      	str	r0, [r4, #84]	; 0x54
 8006b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b4a:	602f      	str	r7, [r5, #0]
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d0cb      	beq.n	8006ae8 <__sflush_r+0x18>
 8006b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b54:	4299      	cmp	r1, r3
 8006b56:	d002      	beq.n	8006b5e <__sflush_r+0x8e>
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f7ff faad 	bl	80060b8 <_free_r>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	6360      	str	r0, [r4, #52]	; 0x34
 8006b62:	e7c2      	b.n	8006aea <__sflush_r+0x1a>
 8006b64:	6a21      	ldr	r1, [r4, #32]
 8006b66:	2301      	movs	r3, #1
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b0      	blx	r6
 8006b6c:	1c41      	adds	r1, r0, #1
 8006b6e:	d1c7      	bne.n	8006b00 <__sflush_r+0x30>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0c4      	beq.n	8006b00 <__sflush_r+0x30>
 8006b76:	2b1d      	cmp	r3, #29
 8006b78:	d001      	beq.n	8006b7e <__sflush_r+0xae>
 8006b7a:	2b16      	cmp	r3, #22
 8006b7c:	d101      	bne.n	8006b82 <__sflush_r+0xb2>
 8006b7e:	602f      	str	r7, [r5, #0]
 8006b80:	e7b2      	b.n	8006ae8 <__sflush_r+0x18>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	e7ae      	b.n	8006aea <__sflush_r+0x1a>
 8006b8c:	690f      	ldr	r7, [r1, #16]
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	d0aa      	beq.n	8006ae8 <__sflush_r+0x18>
 8006b92:	0793      	lsls	r3, r2, #30
 8006b94:	bf18      	it	ne
 8006b96:	2300      	movne	r3, #0
 8006b98:	680e      	ldr	r6, [r1, #0]
 8006b9a:	bf08      	it	eq
 8006b9c:	694b      	ldreq	r3, [r1, #20]
 8006b9e:	1bf6      	subs	r6, r6, r7
 8006ba0:	600f      	str	r7, [r1, #0]
 8006ba2:	608b      	str	r3, [r1, #8]
 8006ba4:	2e00      	cmp	r6, #0
 8006ba6:	dd9f      	ble.n	8006ae8 <__sflush_r+0x18>
 8006ba8:	4633      	mov	r3, r6
 8006baa:	463a      	mov	r2, r7
 8006bac:	4628      	mov	r0, r5
 8006bae:	6a21      	ldr	r1, [r4, #32]
 8006bb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006bb4:	47e0      	blx	ip
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	dc06      	bgt.n	8006bc8 <__sflush_r+0xf8>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc4:	81a3      	strh	r3, [r4, #12]
 8006bc6:	e790      	b.n	8006aea <__sflush_r+0x1a>
 8006bc8:	4407      	add	r7, r0
 8006bca:	1a36      	subs	r6, r6, r0
 8006bcc:	e7ea      	b.n	8006ba4 <__sflush_r+0xd4>
 8006bce:	bf00      	nop
 8006bd0:	20400001 	.word	0x20400001

08006bd4 <_fflush_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	690b      	ldr	r3, [r1, #16]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b913      	cbnz	r3, 8006be4 <_fflush_r+0x10>
 8006bde:	2500      	movs	r5, #0
 8006be0:	4628      	mov	r0, r5
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	b118      	cbz	r0, 8006bee <_fflush_r+0x1a>
 8006be6:	6983      	ldr	r3, [r0, #24]
 8006be8:	b90b      	cbnz	r3, 8006bee <_fflush_r+0x1a>
 8006bea:	f000 f887 	bl	8006cfc <__sinit>
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <_fflush_r+0x6c>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d11b      	bne.n	8006c2c <_fflush_r+0x58>
 8006bf4:	686c      	ldr	r4, [r5, #4]
 8006bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ef      	beq.n	8006bde <_fflush_r+0xa>
 8006bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c00:	07d0      	lsls	r0, r2, #31
 8006c02:	d404      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c04:	0599      	lsls	r1, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0a:	f000 f915 	bl	8006e38 <__retarget_lock_acquire_recursive>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4621      	mov	r1, r4
 8006c12:	f7ff ff5d 	bl	8006ad0 <__sflush_r>
 8006c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c18:	4605      	mov	r5, r0
 8006c1a:	07da      	lsls	r2, r3, #31
 8006c1c:	d4e0      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	059b      	lsls	r3, r3, #22
 8006c22:	d4dd      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f000 f908 	bl	8006e3a <__retarget_lock_release_recursive>
 8006c2a:	e7d9      	b.n	8006be0 <_fflush_r+0xc>
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_fflush_r+0x70>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d101      	bne.n	8006c36 <_fflush_r+0x62>
 8006c32:	68ac      	ldr	r4, [r5, #8]
 8006c34:	e7df      	b.n	8006bf6 <_fflush_r+0x22>
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <_fflush_r+0x74>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	bf08      	it	eq
 8006c3c:	68ec      	ldreq	r4, [r5, #12]
 8006c3e:	e7da      	b.n	8006bf6 <_fflush_r+0x22>
 8006c40:	0800814c 	.word	0x0800814c
 8006c44:	0800816c 	.word	0x0800816c
 8006c48:	0800812c 	.word	0x0800812c

08006c4c <std>:
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	e9c0 3300 	strd	r3, r3, [r0]
 8006c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5a:	6083      	str	r3, [r0, #8]
 8006c5c:	8181      	strh	r1, [r0, #12]
 8006c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c60:	81c2      	strh	r2, [r0, #14]
 8006c62:	6183      	str	r3, [r0, #24]
 8006c64:	4619      	mov	r1, r3
 8006c66:	2208      	movs	r2, #8
 8006c68:	305c      	adds	r0, #92	; 0x5c
 8006c6a:	f7fd fb63 	bl	8004334 <memset>
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x38>)
 8006c70:	6224      	str	r4, [r4, #32]
 8006c72:	6263      	str	r3, [r4, #36]	; 0x24
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <std+0x3c>)
 8006c76:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <std+0x40>)
 8006c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <std+0x44>)
 8006c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08006fa1 	.word	0x08006fa1
 8006c88:	08006fc3 	.word	0x08006fc3
 8006c8c:	08006ffb 	.word	0x08006ffb
 8006c90:	0800701f 	.word	0x0800701f

08006c94 <_cleanup_r>:
 8006c94:	4901      	ldr	r1, [pc, #4]	; (8006c9c <_cleanup_r+0x8>)
 8006c96:	f000 b8af 	b.w	8006df8 <_fwalk_reent>
 8006c9a:	bf00      	nop
 8006c9c:	08006bd5 	.word	0x08006bd5

08006ca0 <__sfmoreglue>:
 8006ca0:	2268      	movs	r2, #104	; 0x68
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	1e4d      	subs	r5, r1, #1
 8006ca6:	4355      	muls	r5, r2
 8006ca8:	460e      	mov	r6, r1
 8006caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cae:	f7ff fa6b 	bl	8006188 <_malloc_r>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	b140      	cbz	r0, 8006cc8 <__sfmoreglue+0x28>
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	60a0      	str	r0, [r4, #8]
 8006cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc4:	f7fd fb36 	bl	8004334 <memset>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	bd70      	pop	{r4, r5, r6, pc}

08006ccc <__sfp_lock_acquire>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__sfp_lock_acquire+0x8>)
 8006cce:	f000 b8b3 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	20000381 	.word	0x20000381

08006cd8 <__sfp_lock_release>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__sfp_lock_release+0x8>)
 8006cda:	f000 b8ae 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20000381 	.word	0x20000381

08006ce4 <__sinit_lock_acquire>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__sinit_lock_acquire+0x8>)
 8006ce6:	f000 b8a7 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	20000382 	.word	0x20000382

08006cf0 <__sinit_lock_release>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__sinit_lock_release+0x8>)
 8006cf2:	f000 b8a2 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	20000382 	.word	0x20000382

08006cfc <__sinit>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	f7ff fff0 	bl	8006ce4 <__sinit_lock_acquire>
 8006d04:	69a3      	ldr	r3, [r4, #24]
 8006d06:	b11b      	cbz	r3, 8006d10 <__sinit+0x14>
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f7ff bff0 	b.w	8006cf0 <__sinit_lock_release>
 8006d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d14:	6523      	str	r3, [r4, #80]	; 0x50
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <__sinit+0x68>)
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <__sinit+0x6c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	bf08      	it	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	4620      	mov	r0, r4
 8006d26:	bf08      	it	eq
 8006d28:	61a3      	streq	r3, [r4, #24]
 8006d2a:	f000 f81f 	bl	8006d6c <__sfp>
 8006d2e:	6060      	str	r0, [r4, #4]
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 f81b 	bl	8006d6c <__sfp>
 8006d36:	60a0      	str	r0, [r4, #8]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 f817 	bl	8006d6c <__sfp>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2104      	movs	r1, #4
 8006d42:	60e0      	str	r0, [r4, #12]
 8006d44:	6860      	ldr	r0, [r4, #4]
 8006d46:	f7ff ff81 	bl	8006c4c <std>
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2109      	movs	r1, #9
 8006d4e:	68a0      	ldr	r0, [r4, #8]
 8006d50:	f7ff ff7c 	bl	8006c4c <std>
 8006d54:	2202      	movs	r2, #2
 8006d56:	2112      	movs	r1, #18
 8006d58:	68e0      	ldr	r0, [r4, #12]
 8006d5a:	f7ff ff77 	bl	8006c4c <std>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	61a3      	str	r3, [r4, #24]
 8006d62:	e7d1      	b.n	8006d08 <__sinit+0xc>
 8006d64:	08007db4 	.word	0x08007db4
 8006d68:	08006c95 	.word	0x08006c95

08006d6c <__sfp>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	4607      	mov	r7, r0
 8006d70:	f7ff ffac 	bl	8006ccc <__sfp_lock_acquire>
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <__sfp+0x84>)
 8006d76:	681e      	ldr	r6, [r3, #0]
 8006d78:	69b3      	ldr	r3, [r6, #24]
 8006d7a:	b913      	cbnz	r3, 8006d82 <__sfp+0x16>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ffbd 	bl	8006cfc <__sinit>
 8006d82:	3648      	adds	r6, #72	; 0x48
 8006d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	d503      	bpl.n	8006d94 <__sfp+0x28>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	b30b      	cbz	r3, 8006dd4 <__sfp+0x68>
 8006d90:	6836      	ldr	r6, [r6, #0]
 8006d92:	e7f7      	b.n	8006d84 <__sfp+0x18>
 8006d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d98:	b9d5      	cbnz	r5, 8006dd0 <__sfp+0x64>
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <__sfp+0x88>)
 8006d9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da0:	60e3      	str	r3, [r4, #12]
 8006da2:	6665      	str	r5, [r4, #100]	; 0x64
 8006da4:	f000 f847 	bl	8006e36 <__retarget_lock_init_recursive>
 8006da8:	f7ff ff96 	bl	8006cd8 <__sfp_lock_release>
 8006dac:	2208      	movs	r2, #8
 8006dae:	4629      	mov	r1, r5
 8006db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006db8:	6025      	str	r5, [r4, #0]
 8006dba:	61a5      	str	r5, [r4, #24]
 8006dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc0:	f7fd fab8 	bl	8004334 <memset>
 8006dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	3468      	adds	r4, #104	; 0x68
 8006dd2:	e7d9      	b.n	8006d88 <__sfp+0x1c>
 8006dd4:	2104      	movs	r1, #4
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff62 	bl	8006ca0 <__sfmoreglue>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1d5      	bne.n	8006d90 <__sfp+0x24>
 8006de4:	f7ff ff78 	bl	8006cd8 <__sfp_lock_release>
 8006de8:	230c      	movs	r3, #12
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	e7ee      	b.n	8006dcc <__sfp+0x60>
 8006dee:	bf00      	nop
 8006df0:	08007db4 	.word	0x08007db4
 8006df4:	ffff0001 	.word	0xffff0001

08006df8 <_fwalk_reent>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	4688      	mov	r8, r1
 8006e00:	2700      	movs	r7, #0
 8006e02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0e:	d505      	bpl.n	8006e1c <_fwalk_reent+0x24>
 8006e10:	6824      	ldr	r4, [r4, #0]
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d1f7      	bne.n	8006e06 <_fwalk_reent+0xe>
 8006e16:	4638      	mov	r0, r7
 8006e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	89ab      	ldrh	r3, [r5, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d907      	bls.n	8006e32 <_fwalk_reent+0x3a>
 8006e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e26:	3301      	adds	r3, #1
 8006e28:	d003      	beq.n	8006e32 <_fwalk_reent+0x3a>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	47c0      	blx	r8
 8006e30:	4307      	orrs	r7, r0
 8006e32:	3568      	adds	r5, #104	; 0x68
 8006e34:	e7e9      	b.n	8006e0a <_fwalk_reent+0x12>

08006e36 <__retarget_lock_init_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <__retarget_lock_acquire_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_release_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <__swhatbuf_r>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	460e      	mov	r6, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	4614      	mov	r4, r2
 8006e46:	2900      	cmp	r1, #0
 8006e48:	461d      	mov	r5, r3
 8006e4a:	b096      	sub	sp, #88	; 0x58
 8006e4c:	da08      	bge.n	8006e60 <__swhatbuf_r+0x24>
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	061a      	lsls	r2, r3, #24
 8006e58:	d410      	bmi.n	8006e7c <__swhatbuf_r+0x40>
 8006e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5e:	e00e      	b.n	8006e7e <__swhatbuf_r+0x42>
 8006e60:	466a      	mov	r2, sp
 8006e62:	f000 f903 	bl	800706c <_fstat_r>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	dbf1      	blt.n	8006e4e <__swhatbuf_r+0x12>
 8006e6a:	9a01      	ldr	r2, [sp, #4]
 8006e6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e74:	425a      	negs	r2, r3
 8006e76:	415a      	adcs	r2, r3
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	e7ee      	b.n	8006e5a <__swhatbuf_r+0x1e>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	2000      	movs	r0, #0
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	b016      	add	sp, #88	; 0x58
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e88 <__smakebuf_r>:
 8006e88:	898b      	ldrh	r3, [r1, #12]
 8006e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e8c:	079d      	lsls	r5, r3, #30
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	d507      	bpl.n	8006ea4 <__smakebuf_r+0x1c>
 8006e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	6163      	str	r3, [r4, #20]
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	466a      	mov	r2, sp
 8006ea6:	ab01      	add	r3, sp, #4
 8006ea8:	f7ff ffc8 	bl	8006e3c <__swhatbuf_r>
 8006eac:	9900      	ldr	r1, [sp, #0]
 8006eae:	4605      	mov	r5, r0
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7ff f969 	bl	8006188 <_malloc_r>
 8006eb6:	b948      	cbnz	r0, 8006ecc <__smakebuf_r+0x44>
 8006eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebc:	059a      	lsls	r2, r3, #22
 8006ebe:	d4ef      	bmi.n	8006ea0 <__smakebuf_r+0x18>
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	f043 0302 	orr.w	r3, r3, #2
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	e7e3      	b.n	8006e94 <__smakebuf_r+0xc>
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <__smakebuf_r+0x7c>)
 8006ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	6020      	str	r0, [r4, #0]
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	9b00      	ldr	r3, [sp, #0]
 8006edc:	6120      	str	r0, [r4, #16]
 8006ede:	6163      	str	r3, [r4, #20]
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	b15b      	cbz	r3, 8006efc <__smakebuf_r+0x74>
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eea:	f000 f8d1 	bl	8007090 <_isatty_r>
 8006eee:	b128      	cbz	r0, 8006efc <__smakebuf_r+0x74>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	f043 0301 	orr.w	r3, r3, #1
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	89a0      	ldrh	r0, [r4, #12]
 8006efe:	4305      	orrs	r5, r0
 8006f00:	81a5      	strh	r5, [r4, #12]
 8006f02:	e7cd      	b.n	8006ea0 <__smakebuf_r+0x18>
 8006f04:	08006c95 	.word	0x08006c95

08006f08 <_malloc_usable_size_r>:
 8006f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f0c:	1f18      	subs	r0, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bfbc      	itt	lt
 8006f12:	580b      	ldrlt	r3, [r1, r0]
 8006f14:	18c0      	addlt	r0, r0, r3
 8006f16:	4770      	bx	lr

08006f18 <_raise_r>:
 8006f18:	291f      	cmp	r1, #31
 8006f1a:	b538      	push	{r3, r4, r5, lr}
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	460d      	mov	r5, r1
 8006f20:	d904      	bls.n	8006f2c <_raise_r+0x14>
 8006f22:	2316      	movs	r3, #22
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f2e:	b112      	cbz	r2, 8006f36 <_raise_r+0x1e>
 8006f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f34:	b94b      	cbnz	r3, 8006f4a <_raise_r+0x32>
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f830 	bl	8006f9c <_getpid_r>
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	4601      	mov	r1, r0
 8006f40:	4620      	mov	r0, r4
 8006f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f46:	f000 b817 	b.w	8006f78 <_kill_r>
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d00a      	beq.n	8006f64 <_raise_r+0x4c>
 8006f4e:	1c59      	adds	r1, r3, #1
 8006f50:	d103      	bne.n	8006f5a <_raise_r+0x42>
 8006f52:	2316      	movs	r3, #22
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	2001      	movs	r0, #1
 8006f58:	e7e7      	b.n	8006f2a <_raise_r+0x12>
 8006f5a:	2400      	movs	r4, #0
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f62:	4798      	blx	r3
 8006f64:	2000      	movs	r0, #0
 8006f66:	e7e0      	b.n	8006f2a <_raise_r+0x12>

08006f68 <raise>:
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <raise+0xc>)
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f7ff bfd3 	b.w	8006f18 <_raise_r>
 8006f72:	bf00      	nop
 8006f74:	2000009c 	.word	0x2000009c

08006f78 <_kill_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4d06      	ldr	r5, [pc, #24]	; (8006f98 <_kill_r+0x20>)
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	602b      	str	r3, [r5, #0]
 8006f86:	f7fb f885 	bl	8002094 <_kill>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d102      	bne.n	8006f94 <_kill_r+0x1c>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	b103      	cbz	r3, 8006f94 <_kill_r+0x1c>
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	bd38      	pop	{r3, r4, r5, pc}
 8006f96:	bf00      	nop
 8006f98:	2000037c 	.word	0x2000037c

08006f9c <_getpid_r>:
 8006f9c:	f7fb b873 	b.w	8002086 <_getpid>

08006fa0 <__sread>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa8:	f000 f894 	bl	80070d4 <_read_r>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	bfab      	itete	ge
 8006fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fb4:	181b      	addge	r3, r3, r0
 8006fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fba:	bfac      	ite	ge
 8006fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fbe:	81a3      	strhlt	r3, [r4, #12]
 8006fc0:	bd10      	pop	{r4, pc}

08006fc2 <__swrite>:
 8006fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc6:	461f      	mov	r7, r3
 8006fc8:	898b      	ldrh	r3, [r1, #12]
 8006fca:	4605      	mov	r5, r0
 8006fcc:	05db      	lsls	r3, r3, #23
 8006fce:	460c      	mov	r4, r1
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	d505      	bpl.n	8006fe0 <__swrite+0x1e>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fdc:	f000 f868 	bl	80070b0 <_lseek_r>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	4632      	mov	r2, r6
 8006fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	4628      	mov	r0, r5
 8006fec:	463b      	mov	r3, r7
 8006fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff6:	f000 b817 	b.w	8007028 <_write_r>

08006ffa <__sseek>:
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007002:	f000 f855 	bl	80070b0 <_lseek_r>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	bf15      	itete	ne
 800700c:	6560      	strne	r0, [r4, #84]	; 0x54
 800700e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007016:	81a3      	strheq	r3, [r4, #12]
 8007018:	bf18      	it	ne
 800701a:	81a3      	strhne	r3, [r4, #12]
 800701c:	bd10      	pop	{r4, pc}

0800701e <__sclose>:
 800701e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007022:	f000 b813 	b.w	800704c <_close_r>
	...

08007028 <_write_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	2200      	movs	r2, #0
 8007032:	4d05      	ldr	r5, [pc, #20]	; (8007048 <_write_r+0x20>)
 8007034:	602a      	str	r2, [r5, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f7fb f863 	bl	8002102 <_write>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_write_r+0x1e>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_write_r+0x1e>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	2000037c 	.word	0x2000037c

0800704c <_close_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	2300      	movs	r3, #0
 8007050:	4d05      	ldr	r5, [pc, #20]	; (8007068 <_close_r+0x1c>)
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7fb f86f 	bl	800213a <_close>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_close_r+0x1a>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_close_r+0x1a>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	2000037c 	.word	0x2000037c

0800706c <_fstat_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	2300      	movs	r3, #0
 8007070:	4d06      	ldr	r5, [pc, #24]	; (800708c <_fstat_r+0x20>)
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	f7fb f869 	bl	8002150 <_fstat>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d102      	bne.n	8007088 <_fstat_r+0x1c>
 8007082:	682b      	ldr	r3, [r5, #0]
 8007084:	b103      	cbz	r3, 8007088 <_fstat_r+0x1c>
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	bd38      	pop	{r3, r4, r5, pc}
 800708a:	bf00      	nop
 800708c:	2000037c 	.word	0x2000037c

08007090 <_isatty_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	2300      	movs	r3, #0
 8007094:	4d05      	ldr	r5, [pc, #20]	; (80070ac <_isatty_r+0x1c>)
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7fb f867 	bl	800216e <_isatty>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_isatty_r+0x1a>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_isatty_r+0x1a>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	2000037c 	.word	0x2000037c

080070b0 <_lseek_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4604      	mov	r4, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	2200      	movs	r2, #0
 80070ba:	4d05      	ldr	r5, [pc, #20]	; (80070d0 <_lseek_r+0x20>)
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f7fb f85f 	bl	8002182 <_lseek>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_lseek_r+0x1e>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_lseek_r+0x1e>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	2000037c 	.word	0x2000037c

080070d4 <_read_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	2200      	movs	r2, #0
 80070de:	4d05      	ldr	r5, [pc, #20]	; (80070f4 <_read_r+0x20>)
 80070e0:	602a      	str	r2, [r5, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	f7fa fff0 	bl	80020c8 <_read>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_read_r+0x1e>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_read_r+0x1e>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	2000037c 	.word	0x2000037c

080070f8 <atan>:
 80070f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	4bb6      	ldr	r3, [pc, #728]	; (80073d8 <atan+0x2e0>)
 80070fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007102:	429e      	cmp	r6, r3
 8007104:	4604      	mov	r4, r0
 8007106:	460d      	mov	r5, r1
 8007108:	468b      	mov	fp, r1
 800710a:	dd17      	ble.n	800713c <atan+0x44>
 800710c:	4bb3      	ldr	r3, [pc, #716]	; (80073dc <atan+0x2e4>)
 800710e:	429e      	cmp	r6, r3
 8007110:	dc01      	bgt.n	8007116 <atan+0x1e>
 8007112:	d109      	bne.n	8007128 <atan+0x30>
 8007114:	b140      	cbz	r0, 8007128 <atan+0x30>
 8007116:	4622      	mov	r2, r4
 8007118:	462b      	mov	r3, r5
 800711a:	4620      	mov	r0, r4
 800711c:	4629      	mov	r1, r5
 800711e:	f7f9 f891 	bl	8000244 <__adddf3>
 8007122:	4604      	mov	r4, r0
 8007124:	460d      	mov	r5, r1
 8007126:	e005      	b.n	8007134 <atan+0x3c>
 8007128:	f1bb 0f00 	cmp.w	fp, #0
 800712c:	4cac      	ldr	r4, [pc, #688]	; (80073e0 <atan+0x2e8>)
 800712e:	f300 8121 	bgt.w	8007374 <atan+0x27c>
 8007132:	4dac      	ldr	r5, [pc, #688]	; (80073e4 <atan+0x2ec>)
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	4baa      	ldr	r3, [pc, #680]	; (80073e8 <atan+0x2f0>)
 800713e:	429e      	cmp	r6, r3
 8007140:	dc11      	bgt.n	8007166 <atan+0x6e>
 8007142:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007146:	429e      	cmp	r6, r3
 8007148:	dc0a      	bgt.n	8007160 <atan+0x68>
 800714a:	a38b      	add	r3, pc, #556	; (adr r3, 8007378 <atan+0x280>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 f878 	bl	8000244 <__adddf3>
 8007154:	2200      	movs	r2, #0
 8007156:	4ba5      	ldr	r3, [pc, #660]	; (80073ec <atan+0x2f4>)
 8007158:	f7f9 fcba 	bl	8000ad0 <__aeabi_dcmpgt>
 800715c:	2800      	cmp	r0, #0
 800715e:	d1e9      	bne.n	8007134 <atan+0x3c>
 8007160:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007164:	e027      	b.n	80071b6 <atan+0xbe>
 8007166:	f000 f951 	bl	800740c <fabs>
 800716a:	4ba1      	ldr	r3, [pc, #644]	; (80073f0 <atan+0x2f8>)
 800716c:	4604      	mov	r4, r0
 800716e:	429e      	cmp	r6, r3
 8007170:	460d      	mov	r5, r1
 8007172:	f300 80b8 	bgt.w	80072e6 <atan+0x1ee>
 8007176:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800717a:	429e      	cmp	r6, r3
 800717c:	f300 809c 	bgt.w	80072b8 <atan+0x1c0>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	f7f9 f85e 	bl	8000244 <__adddf3>
 8007188:	2200      	movs	r2, #0
 800718a:	4b98      	ldr	r3, [pc, #608]	; (80073ec <atan+0x2f4>)
 800718c:	f7f9 f858 	bl	8000240 <__aeabi_dsub>
 8007190:	2200      	movs	r2, #0
 8007192:	4606      	mov	r6, r0
 8007194:	460f      	mov	r7, r1
 8007196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	f7f9 f851 	bl	8000244 <__adddf3>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f9 fb2b 	bl	8000804 <__aeabi_ddiv>
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	4604      	mov	r4, r0
 80071b4:	460d      	mov	r5, r1
 80071b6:	4622      	mov	r2, r4
 80071b8:	462b      	mov	r3, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	f7f9 f9f7 	bl	80005b0 <__aeabi_dmul>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4680      	mov	r8, r0
 80071c8:	4689      	mov	r9, r1
 80071ca:	f7f9 f9f1 	bl	80005b0 <__aeabi_dmul>
 80071ce:	a36c      	add	r3, pc, #432	; (adr r3, 8007380 <atan+0x288>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	f7f9 f9ea 	bl	80005b0 <__aeabi_dmul>
 80071dc:	a36a      	add	r3, pc, #424	; (adr r3, 8007388 <atan+0x290>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 f82f 	bl	8000244 <__adddf3>
 80071e6:	4632      	mov	r2, r6
 80071e8:	463b      	mov	r3, r7
 80071ea:	f7f9 f9e1 	bl	80005b0 <__aeabi_dmul>
 80071ee:	a368      	add	r3, pc, #416	; (adr r3, 8007390 <atan+0x298>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f7f9 f826 	bl	8000244 <__adddf3>
 80071f8:	4632      	mov	r2, r6
 80071fa:	463b      	mov	r3, r7
 80071fc:	f7f9 f9d8 	bl	80005b0 <__aeabi_dmul>
 8007200:	a365      	add	r3, pc, #404	; (adr r3, 8007398 <atan+0x2a0>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f9 f81d 	bl	8000244 <__adddf3>
 800720a:	4632      	mov	r2, r6
 800720c:	463b      	mov	r3, r7
 800720e:	f7f9 f9cf 	bl	80005b0 <__aeabi_dmul>
 8007212:	a363      	add	r3, pc, #396	; (adr r3, 80073a0 <atan+0x2a8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f814 	bl	8000244 <__adddf3>
 800721c:	4632      	mov	r2, r6
 800721e:	463b      	mov	r3, r7
 8007220:	f7f9 f9c6 	bl	80005b0 <__aeabi_dmul>
 8007224:	a360      	add	r3, pc, #384	; (adr r3, 80073a8 <atan+0x2b0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f80b 	bl	8000244 <__adddf3>
 800722e:	4642      	mov	r2, r8
 8007230:	464b      	mov	r3, r9
 8007232:	f7f9 f9bd 	bl	80005b0 <__aeabi_dmul>
 8007236:	a35e      	add	r3, pc, #376	; (adr r3, 80073b0 <atan+0x2b8>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	4680      	mov	r8, r0
 800723e:	4689      	mov	r9, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 f9b4 	bl	80005b0 <__aeabi_dmul>
 8007248:	a35b      	add	r3, pc, #364	; (adr r3, 80073b8 <atan+0x2c0>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f7f8 fff7 	bl	8000240 <__aeabi_dsub>
 8007252:	4632      	mov	r2, r6
 8007254:	463b      	mov	r3, r7
 8007256:	f7f9 f9ab 	bl	80005b0 <__aeabi_dmul>
 800725a:	a359      	add	r3, pc, #356	; (adr r3, 80073c0 <atan+0x2c8>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f8 ffee 	bl	8000240 <__aeabi_dsub>
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	f7f9 f9a2 	bl	80005b0 <__aeabi_dmul>
 800726c:	a356      	add	r3, pc, #344	; (adr r3, 80073c8 <atan+0x2d0>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f7f8 ffe5 	bl	8000240 <__aeabi_dsub>
 8007276:	4632      	mov	r2, r6
 8007278:	463b      	mov	r3, r7
 800727a:	f7f9 f999 	bl	80005b0 <__aeabi_dmul>
 800727e:	a354      	add	r3, pc, #336	; (adr r3, 80073d0 <atan+0x2d8>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f8 ffdc 	bl	8000240 <__aeabi_dsub>
 8007288:	4632      	mov	r2, r6
 800728a:	463b      	mov	r3, r7
 800728c:	f7f9 f990 	bl	80005b0 <__aeabi_dmul>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4640      	mov	r0, r8
 8007296:	4649      	mov	r1, r9
 8007298:	f7f8 ffd4 	bl	8000244 <__adddf3>
 800729c:	4622      	mov	r2, r4
 800729e:	462b      	mov	r3, r5
 80072a0:	f7f9 f986 	bl	80005b0 <__aeabi_dmul>
 80072a4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	d144      	bne.n	8007338 <atan+0x240>
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f8 ffc5 	bl	8000240 <__aeabi_dsub>
 80072b6:	e734      	b.n	8007122 <atan+0x2a>
 80072b8:	2200      	movs	r2, #0
 80072ba:	4b4c      	ldr	r3, [pc, #304]	; (80073ec <atan+0x2f4>)
 80072bc:	f7f8 ffc0 	bl	8000240 <__aeabi_dsub>
 80072c0:	2200      	movs	r2, #0
 80072c2:	4606      	mov	r6, r0
 80072c4:	460f      	mov	r7, r1
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	4b48      	ldr	r3, [pc, #288]	; (80073ec <atan+0x2f4>)
 80072cc:	f7f8 ffba 	bl	8000244 <__adddf3>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f9 fa94 	bl	8000804 <__aeabi_ddiv>
 80072dc:	f04f 0a01 	mov.w	sl, #1
 80072e0:	4604      	mov	r4, r0
 80072e2:	460d      	mov	r5, r1
 80072e4:	e767      	b.n	80071b6 <atan+0xbe>
 80072e6:	4b43      	ldr	r3, [pc, #268]	; (80073f4 <atan+0x2fc>)
 80072e8:	429e      	cmp	r6, r3
 80072ea:	da1a      	bge.n	8007322 <atan+0x22a>
 80072ec:	2200      	movs	r2, #0
 80072ee:	4b42      	ldr	r3, [pc, #264]	; (80073f8 <atan+0x300>)
 80072f0:	f7f8 ffa6 	bl	8000240 <__aeabi_dsub>
 80072f4:	2200      	movs	r2, #0
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	4b3e      	ldr	r3, [pc, #248]	; (80073f8 <atan+0x300>)
 8007300:	f7f9 f956 	bl	80005b0 <__aeabi_dmul>
 8007304:	2200      	movs	r2, #0
 8007306:	4b39      	ldr	r3, [pc, #228]	; (80073ec <atan+0x2f4>)
 8007308:	f7f8 ff9c 	bl	8000244 <__adddf3>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4630      	mov	r0, r6
 8007312:	4639      	mov	r1, r7
 8007314:	f7f9 fa76 	bl	8000804 <__aeabi_ddiv>
 8007318:	f04f 0a02 	mov.w	sl, #2
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	e749      	b.n	80071b6 <atan+0xbe>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	2000      	movs	r0, #0
 8007328:	4934      	ldr	r1, [pc, #208]	; (80073fc <atan+0x304>)
 800732a:	f7f9 fa6b 	bl	8000804 <__aeabi_ddiv>
 800732e:	f04f 0a03 	mov.w	sl, #3
 8007332:	4604      	mov	r4, r0
 8007334:	460d      	mov	r5, r1
 8007336:	e73e      	b.n	80071b6 <atan+0xbe>
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <atan+0x308>)
 800733a:	4e32      	ldr	r6, [pc, #200]	; (8007404 <atan+0x30c>)
 800733c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007340:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007344:	e9da 2300 	ldrd	r2, r3, [sl]
 8007348:	f7f8 ff7a 	bl	8000240 <__aeabi_dsub>
 800734c:	4622      	mov	r2, r4
 800734e:	462b      	mov	r3, r5
 8007350:	f7f8 ff76 	bl	8000240 <__aeabi_dsub>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	e9d6 0100 	ldrd	r0, r1, [r6]
 800735c:	f7f8 ff70 	bl	8000240 <__aeabi_dsub>
 8007360:	f1bb 0f00 	cmp.w	fp, #0
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	f6bf aee4 	bge.w	8007134 <atan+0x3c>
 800736c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007370:	461d      	mov	r5, r3
 8007372:	e6df      	b.n	8007134 <atan+0x3c>
 8007374:	4d24      	ldr	r5, [pc, #144]	; (8007408 <atan+0x310>)
 8007376:	e6dd      	b.n	8007134 <atan+0x3c>
 8007378:	8800759c 	.word	0x8800759c
 800737c:	7e37e43c 	.word	0x7e37e43c
 8007380:	e322da11 	.word	0xe322da11
 8007384:	3f90ad3a 	.word	0x3f90ad3a
 8007388:	24760deb 	.word	0x24760deb
 800738c:	3fa97b4b 	.word	0x3fa97b4b
 8007390:	a0d03d51 	.word	0xa0d03d51
 8007394:	3fb10d66 	.word	0x3fb10d66
 8007398:	c54c206e 	.word	0xc54c206e
 800739c:	3fb745cd 	.word	0x3fb745cd
 80073a0:	920083ff 	.word	0x920083ff
 80073a4:	3fc24924 	.word	0x3fc24924
 80073a8:	5555550d 	.word	0x5555550d
 80073ac:	3fd55555 	.word	0x3fd55555
 80073b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80073b4:	bfa2b444 	.word	0xbfa2b444
 80073b8:	52defd9a 	.word	0x52defd9a
 80073bc:	3fadde2d 	.word	0x3fadde2d
 80073c0:	af749a6d 	.word	0xaf749a6d
 80073c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80073c8:	fe231671 	.word	0xfe231671
 80073cc:	3fbc71c6 	.word	0x3fbc71c6
 80073d0:	9998ebc4 	.word	0x9998ebc4
 80073d4:	3fc99999 	.word	0x3fc99999
 80073d8:	440fffff 	.word	0x440fffff
 80073dc:	7ff00000 	.word	0x7ff00000
 80073e0:	54442d18 	.word	0x54442d18
 80073e4:	bff921fb 	.word	0xbff921fb
 80073e8:	3fdbffff 	.word	0x3fdbffff
 80073ec:	3ff00000 	.word	0x3ff00000
 80073f0:	3ff2ffff 	.word	0x3ff2ffff
 80073f4:	40038000 	.word	0x40038000
 80073f8:	3ff80000 	.word	0x3ff80000
 80073fc:	bff00000 	.word	0xbff00000
 8007400:	080081b0 	.word	0x080081b0
 8007404:	08008190 	.word	0x08008190
 8007408:	3ff921fb 	.word	0x3ff921fb

0800740c <fabs>:
 800740c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007410:	4770      	bx	lr

08007412 <atan2>:
 8007412:	f000 b825 	b.w	8007460 <__ieee754_atan2>

08007416 <sqrt>:
 8007416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007418:	4606      	mov	r6, r0
 800741a:	460f      	mov	r7, r1
 800741c:	f000 f8f2 	bl	8007604 <__ieee754_sqrt>
 8007420:	4632      	mov	r2, r6
 8007422:	4604      	mov	r4, r0
 8007424:	460d      	mov	r5, r1
 8007426:	463b      	mov	r3, r7
 8007428:	4630      	mov	r0, r6
 800742a:	4639      	mov	r1, r7
 800742c:	f7f9 fb5a 	bl	8000ae4 <__aeabi_dcmpun>
 8007430:	b990      	cbnz	r0, 8007458 <sqrt+0x42>
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4630      	mov	r0, r6
 8007438:	4639      	mov	r1, r7
 800743a:	f7f9 fb2b 	bl	8000a94 <__aeabi_dcmplt>
 800743e:	b158      	cbz	r0, 8007458 <sqrt+0x42>
 8007440:	f7fc ff4e 	bl	80042e0 <__errno>
 8007444:	2321      	movs	r3, #33	; 0x21
 8007446:	2200      	movs	r2, #0
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	4610      	mov	r0, r2
 800744e:	4619      	mov	r1, r3
 8007450:	f7f9 f9d8 	bl	8000804 <__aeabi_ddiv>
 8007454:	4604      	mov	r4, r0
 8007456:	460d      	mov	r5, r1
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007460 <__ieee754_atan2>:
 8007460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4692      	mov	sl, r2
 8007466:	4699      	mov	r9, r3
 8007468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800746c:	461f      	mov	r7, r3
 800746e:	f1ca 0300 	rsb	r3, sl, #0
 8007472:	f8df e184 	ldr.w	lr, [pc, #388]	; 80075f8 <__ieee754_atan2+0x198>
 8007476:	ea43 030a 	orr.w	r3, r3, sl
 800747a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800747e:	4573      	cmp	r3, lr
 8007480:	4604      	mov	r4, r0
 8007482:	460d      	mov	r5, r1
 8007484:	d808      	bhi.n	8007498 <__ieee754_atan2+0x38>
 8007486:	4246      	negs	r6, r0
 8007488:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800748c:	4306      	orrs	r6, r0
 800748e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007492:	4576      	cmp	r6, lr
 8007494:	468c      	mov	ip, r1
 8007496:	d908      	bls.n	80074aa <__ieee754_atan2+0x4a>
 8007498:	4652      	mov	r2, sl
 800749a:	464b      	mov	r3, r9
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f8 fed0 	bl	8000244 <__adddf3>
 80074a4:	4604      	mov	r4, r0
 80074a6:	460d      	mov	r5, r1
 80074a8:	e019      	b.n	80074de <__ieee754_atan2+0x7e>
 80074aa:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80074ae:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80074b2:	ea56 060a 	orrs.w	r6, r6, sl
 80074b6:	d103      	bne.n	80074c0 <__ieee754_atan2+0x60>
 80074b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	f7ff be1c 	b.w	80070f8 <atan>
 80074c0:	17be      	asrs	r6, r7, #30
 80074c2:	f006 0602 	and.w	r6, r6, #2
 80074c6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80074ca:	ea53 0100 	orrs.w	r1, r3, r0
 80074ce:	d10a      	bne.n	80074e6 <__ieee754_atan2+0x86>
 80074d0:	2e02      	cmp	r6, #2
 80074d2:	d067      	beq.n	80075a4 <__ieee754_atan2+0x144>
 80074d4:	2e03      	cmp	r6, #3
 80074d6:	d102      	bne.n	80074de <__ieee754_atan2+0x7e>
 80074d8:	a53b      	add	r5, pc, #236	; (adr r5, 80075c8 <__ieee754_atan2+0x168>)
 80074da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	ea52 010a 	orrs.w	r1, r2, sl
 80074ea:	d106      	bne.n	80074fa <__ieee754_atan2+0x9a>
 80074ec:	f1bc 0f00 	cmp.w	ip, #0
 80074f0:	da63      	bge.n	80075ba <__ieee754_atan2+0x15a>
 80074f2:	a537      	add	r5, pc, #220	; (adr r5, 80075d0 <__ieee754_atan2+0x170>)
 80074f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074f8:	e7f1      	b.n	80074de <__ieee754_atan2+0x7e>
 80074fa:	4572      	cmp	r2, lr
 80074fc:	d10f      	bne.n	800751e <__ieee754_atan2+0xbe>
 80074fe:	4293      	cmp	r3, r2
 8007500:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007504:	d107      	bne.n	8007516 <__ieee754_atan2+0xb6>
 8007506:	2e02      	cmp	r6, #2
 8007508:	d850      	bhi.n	80075ac <__ieee754_atan2+0x14c>
 800750a:	4b3c      	ldr	r3, [pc, #240]	; (80075fc <__ieee754_atan2+0x19c>)
 800750c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007510:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007514:	e7e3      	b.n	80074de <__ieee754_atan2+0x7e>
 8007516:	2e02      	cmp	r6, #2
 8007518:	d84c      	bhi.n	80075b4 <__ieee754_atan2+0x154>
 800751a:	4b39      	ldr	r3, [pc, #228]	; (8007600 <__ieee754_atan2+0x1a0>)
 800751c:	e7f6      	b.n	800750c <__ieee754_atan2+0xac>
 800751e:	4573      	cmp	r3, lr
 8007520:	d0e4      	beq.n	80074ec <__ieee754_atan2+0x8c>
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007528:	ea4f 5223 	mov.w	r2, r3, asr #20
 800752c:	da20      	bge.n	8007570 <__ieee754_atan2+0x110>
 800752e:	2f00      	cmp	r7, #0
 8007530:	da01      	bge.n	8007536 <__ieee754_atan2+0xd6>
 8007532:	323c      	adds	r2, #60	; 0x3c
 8007534:	db20      	blt.n	8007578 <__ieee754_atan2+0x118>
 8007536:	4652      	mov	r2, sl
 8007538:	464b      	mov	r3, r9
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f7f9 f961 	bl	8000804 <__aeabi_ddiv>
 8007542:	f7ff ff63 	bl	800740c <fabs>
 8007546:	f7ff fdd7 	bl	80070f8 <atan>
 800754a:	4604      	mov	r4, r0
 800754c:	460d      	mov	r5, r1
 800754e:	2e01      	cmp	r6, #1
 8007550:	d015      	beq.n	800757e <__ieee754_atan2+0x11e>
 8007552:	2e02      	cmp	r6, #2
 8007554:	d017      	beq.n	8007586 <__ieee754_atan2+0x126>
 8007556:	2e00      	cmp	r6, #0
 8007558:	d0c1      	beq.n	80074de <__ieee754_atan2+0x7e>
 800755a:	a31f      	add	r3, pc, #124	; (adr r3, 80075d8 <__ieee754_atan2+0x178>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	4620      	mov	r0, r4
 8007562:	4629      	mov	r1, r5
 8007564:	f7f8 fe6c 	bl	8000240 <__aeabi_dsub>
 8007568:	a31d      	add	r3, pc, #116	; (adr r3, 80075e0 <__ieee754_atan2+0x180>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	e016      	b.n	800759e <__ieee754_atan2+0x13e>
 8007570:	a51d      	add	r5, pc, #116	; (adr r5, 80075e8 <__ieee754_atan2+0x188>)
 8007572:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007576:	e7ea      	b.n	800754e <__ieee754_atan2+0xee>
 8007578:	2400      	movs	r4, #0
 800757a:	2500      	movs	r5, #0
 800757c:	e7e7      	b.n	800754e <__ieee754_atan2+0xee>
 800757e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007582:	461d      	mov	r5, r3
 8007584:	e7ab      	b.n	80074de <__ieee754_atan2+0x7e>
 8007586:	a314      	add	r3, pc, #80	; (adr r3, 80075d8 <__ieee754_atan2+0x178>)
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	4620      	mov	r0, r4
 800758e:	4629      	mov	r1, r5
 8007590:	f7f8 fe56 	bl	8000240 <__aeabi_dsub>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	a111      	add	r1, pc, #68	; (adr r1, 80075e0 <__ieee754_atan2+0x180>)
 800759a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800759e:	f7f8 fe4f 	bl	8000240 <__aeabi_dsub>
 80075a2:	e77f      	b.n	80074a4 <__ieee754_atan2+0x44>
 80075a4:	a50e      	add	r5, pc, #56	; (adr r5, 80075e0 <__ieee754_atan2+0x180>)
 80075a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075aa:	e798      	b.n	80074de <__ieee754_atan2+0x7e>
 80075ac:	a510      	add	r5, pc, #64	; (adr r5, 80075f0 <__ieee754_atan2+0x190>)
 80075ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075b2:	e794      	b.n	80074de <__ieee754_atan2+0x7e>
 80075b4:	2400      	movs	r4, #0
 80075b6:	2500      	movs	r5, #0
 80075b8:	e791      	b.n	80074de <__ieee754_atan2+0x7e>
 80075ba:	a50b      	add	r5, pc, #44	; (adr r5, 80075e8 <__ieee754_atan2+0x188>)
 80075bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075c0:	e78d      	b.n	80074de <__ieee754_atan2+0x7e>
 80075c2:	bf00      	nop
 80075c4:	f3af 8000 	nop.w
 80075c8:	54442d18 	.word	0x54442d18
 80075cc:	c00921fb 	.word	0xc00921fb
 80075d0:	54442d18 	.word	0x54442d18
 80075d4:	bff921fb 	.word	0xbff921fb
 80075d8:	33145c07 	.word	0x33145c07
 80075dc:	3ca1a626 	.word	0x3ca1a626
 80075e0:	54442d18 	.word	0x54442d18
 80075e4:	400921fb 	.word	0x400921fb
 80075e8:	54442d18 	.word	0x54442d18
 80075ec:	3ff921fb 	.word	0x3ff921fb
 80075f0:	54442d18 	.word	0x54442d18
 80075f4:	3fe921fb 	.word	0x3fe921fb
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	080081d0 	.word	0x080081d0
 8007600:	080081e8 	.word	0x080081e8

08007604 <__ieee754_sqrt>:
 8007604:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007760 <__ieee754_sqrt+0x15c>
 8007608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007610:	4606      	mov	r6, r0
 8007612:	460d      	mov	r5, r1
 8007614:	460c      	mov	r4, r1
 8007616:	460a      	mov	r2, r1
 8007618:	4607      	mov	r7, r0
 800761a:	4603      	mov	r3, r0
 800761c:	d10f      	bne.n	800763e <__ieee754_sqrt+0x3a>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	f7f8 ffc5 	bl	80005b0 <__aeabi_dmul>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4630      	mov	r0, r6
 800762c:	4629      	mov	r1, r5
 800762e:	f7f8 fe09 	bl	8000244 <__adddf3>
 8007632:	4606      	mov	r6, r0
 8007634:	460d      	mov	r5, r1
 8007636:	4630      	mov	r0, r6
 8007638:	4629      	mov	r1, r5
 800763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763e:	2900      	cmp	r1, #0
 8007640:	dc0e      	bgt.n	8007660 <__ieee754_sqrt+0x5c>
 8007642:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007646:	ea5c 0707 	orrs.w	r7, ip, r7
 800764a:	d0f4      	beq.n	8007636 <__ieee754_sqrt+0x32>
 800764c:	b141      	cbz	r1, 8007660 <__ieee754_sqrt+0x5c>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	f7f8 fdf5 	bl	8000240 <__aeabi_dsub>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	f7f9 f8d3 	bl	8000804 <__aeabi_ddiv>
 800765e:	e7e8      	b.n	8007632 <__ieee754_sqrt+0x2e>
 8007660:	1521      	asrs	r1, r4, #20
 8007662:	d075      	beq.n	8007750 <__ieee754_sqrt+0x14c>
 8007664:	07cc      	lsls	r4, r1, #31
 8007666:	f04f 0400 	mov.w	r4, #0
 800766a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800766e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007672:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007676:	bf5e      	ittt	pl
 8007678:	0fd9      	lsrpl	r1, r3, #31
 800767a:	005b      	lslpl	r3, r3, #1
 800767c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007680:	0fd9      	lsrs	r1, r3, #31
 8007682:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007686:	2516      	movs	r5, #22
 8007688:	4620      	mov	r0, r4
 800768a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800768e:	107f      	asrs	r7, r7, #1
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	1846      	adds	r6, r0, r1
 8007694:	4296      	cmp	r6, r2
 8007696:	bfde      	ittt	le
 8007698:	1b92      	suble	r2, r2, r6
 800769a:	1870      	addle	r0, r6, r1
 800769c:	1864      	addle	r4, r4, r1
 800769e:	0052      	lsls	r2, r2, #1
 80076a0:	3d01      	subs	r5, #1
 80076a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80076a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80076aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076ae:	d1f0      	bne.n	8007692 <__ieee754_sqrt+0x8e>
 80076b0:	4629      	mov	r1, r5
 80076b2:	f04f 0e20 	mov.w	lr, #32
 80076b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80076ba:	4282      	cmp	r2, r0
 80076bc:	eb06 0c05 	add.w	ip, r6, r5
 80076c0:	dc02      	bgt.n	80076c8 <__ieee754_sqrt+0xc4>
 80076c2:	d113      	bne.n	80076ec <__ieee754_sqrt+0xe8>
 80076c4:	459c      	cmp	ip, r3
 80076c6:	d811      	bhi.n	80076ec <__ieee754_sqrt+0xe8>
 80076c8:	f1bc 0f00 	cmp.w	ip, #0
 80076cc:	eb0c 0506 	add.w	r5, ip, r6
 80076d0:	da43      	bge.n	800775a <__ieee754_sqrt+0x156>
 80076d2:	2d00      	cmp	r5, #0
 80076d4:	db41      	blt.n	800775a <__ieee754_sqrt+0x156>
 80076d6:	f100 0801 	add.w	r8, r0, #1
 80076da:	1a12      	subs	r2, r2, r0
 80076dc:	4640      	mov	r0, r8
 80076de:	459c      	cmp	ip, r3
 80076e0:	bf88      	it	hi
 80076e2:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80076e6:	eba3 030c 	sub.w	r3, r3, ip
 80076ea:	4431      	add	r1, r6
 80076ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80076f0:	f1be 0e01 	subs.w	lr, lr, #1
 80076f4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80076f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007700:	d1db      	bne.n	80076ba <__ieee754_sqrt+0xb6>
 8007702:	4313      	orrs	r3, r2
 8007704:	d006      	beq.n	8007714 <__ieee754_sqrt+0x110>
 8007706:	1c48      	adds	r0, r1, #1
 8007708:	bf0b      	itete	eq
 800770a:	4671      	moveq	r1, lr
 800770c:	3101      	addne	r1, #1
 800770e:	3401      	addeq	r4, #1
 8007710:	f021 0101 	bicne.w	r1, r1, #1
 8007714:	1063      	asrs	r3, r4, #1
 8007716:	0849      	lsrs	r1, r1, #1
 8007718:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800771c:	07e2      	lsls	r2, r4, #31
 800771e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007722:	bf48      	it	mi
 8007724:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007728:	460e      	mov	r6, r1
 800772a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800772e:	e782      	b.n	8007636 <__ieee754_sqrt+0x32>
 8007730:	0ada      	lsrs	r2, r3, #11
 8007732:	3815      	subs	r0, #21
 8007734:	055b      	lsls	r3, r3, #21
 8007736:	2a00      	cmp	r2, #0
 8007738:	d0fa      	beq.n	8007730 <__ieee754_sqrt+0x12c>
 800773a:	02d5      	lsls	r5, r2, #11
 800773c:	d50a      	bpl.n	8007754 <__ieee754_sqrt+0x150>
 800773e:	f1c1 0420 	rsb	r4, r1, #32
 8007742:	fa23 f404 	lsr.w	r4, r3, r4
 8007746:	1e4d      	subs	r5, r1, #1
 8007748:	408b      	lsls	r3, r1
 800774a:	4322      	orrs	r2, r4
 800774c:	1b41      	subs	r1, r0, r5
 800774e:	e789      	b.n	8007664 <__ieee754_sqrt+0x60>
 8007750:	4608      	mov	r0, r1
 8007752:	e7f0      	b.n	8007736 <__ieee754_sqrt+0x132>
 8007754:	0052      	lsls	r2, r2, #1
 8007756:	3101      	adds	r1, #1
 8007758:	e7ef      	b.n	800773a <__ieee754_sqrt+0x136>
 800775a:	4680      	mov	r8, r0
 800775c:	e7bd      	b.n	80076da <__ieee754_sqrt+0xd6>
 800775e:	bf00      	nop
 8007760:	7ff00000 	.word	0x7ff00000

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
