
FinalProjectGimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000754c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08007738  08007738  00017738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b8  080081b8  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  080081b8  080081b8  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081b8  080081b8  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  080081c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000270  0800842c  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800842c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000910b  00000000  00000000  00020295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af4  00000000  00000000  000293a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a994  00000000  00000000  0002c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b79a  00000000  00000000  00046abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096912  00000000  00000000  00052256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  000e8bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000270 	.word	0x20000270
 8000204:	00000000 	.word	0x00000000
 8000208:	0800771c 	.word	0x0800771c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000274 	.word	0x20000274
 8000224:	0800771c 	.word	0x0800771c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	e002      	b.n	8000c10 <Delay+0x10>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f9      	bne.n	8000c0a <Delay+0xa>
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 f829 	bl	8000c80 <LCD_BackLed_Control>
	LCD_Rst();
 8000c2e:	f000 f80f 	bl	8000c50 <LCD_Rst>
	LCD_REG_Config();
 8000c32:	f000 f85f 	bl	8000cf4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c40:	22f0      	movs	r2, #240	; 0xf0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f9e6 	bl	8001016 <LCD_Clear>
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2102      	movs	r1, #2
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <LCD_Rst+0x28>)
 8000c5a:	f001 fddb 	bl	8002814 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <LCD_Rst+0x2c>)
 8000c60:	f7ff ffce 	bl	8000c00 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2102      	movs	r1, #2
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <LCD_Rst+0x28>)
 8000c6a:	f001 fdd3 	bl	8002814 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <LCD_Rst+0x2c>)
 8000c70:	f7ff ffc6 	bl	8000c00 <Delay>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40011800 	.word	0x40011800
 8000c7c:	0002bffc 	.word	0x0002bffc

08000c80 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <LCD_BackLed_Control+0x34>)
 8000c98:	f001 fdbc 	bl	8002814 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000c9c:	e005      	b.n	8000caa <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <LCD_BackLed_Control+0x34>)
 8000ca6:	f001 fdb5 	bl	8002814 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40011400 	.word	0x40011400

08000cb8 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cc2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	8013      	strh	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <LCD_Write_Data+0x1c>)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	8013      	strh	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	60020000 	.word	0x60020000

08000cf4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000cf8:	20cf      	movs	r0, #207	; 0xcf
 8000cfa:	f7ff ffdd 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ffe8 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000d04:	2081      	movs	r0, #129	; 0x81
 8000d06:	f7ff ffe5 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000d0a:	2030      	movs	r0, #48	; 0x30
 8000d0c:	f7ff ffe2 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000d10:	20ed      	movs	r0, #237	; 0xed
 8000d12:	f7ff ffd1 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f7ff ffdc 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff ffd9 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000d22:	2012      	movs	r0, #18
 8000d24:	f7ff ffd6 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000d28:	2081      	movs	r0, #129	; 0x81
 8000d2a:	f7ff ffd3 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000d2e:	20e8      	movs	r0, #232	; 0xe8
 8000d30:	f7ff ffc2 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000d34:	2085      	movs	r0, #133	; 0x85
 8000d36:	f7ff ffcd 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000d3a:	2010      	movs	r0, #16
 8000d3c:	f7ff ffca 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f7ff ffc7 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000d46:	20cb      	movs	r0, #203	; 0xcb
 8000d48:	f7ff ffb6 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000d4c:	2039      	movs	r0, #57	; 0x39
 8000d4e:	f7ff ffc1 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000d52:	202c      	movs	r0, #44	; 0x2c
 8000d54:	f7ff ffbe 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff ffbb 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000d5e:	2034      	movs	r0, #52	; 0x34
 8000d60:	f7ff ffb8 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000d64:	2002      	movs	r0, #2
 8000d66:	f7ff ffb5 	bl	8000cd4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000d6a:	20f7      	movs	r0, #247	; 0xf7
 8000d6c:	f7ff ffa4 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000d70:	2020      	movs	r0, #32
 8000d72:	f7ff ffaf 	bl	8000cd4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000d76:	20ea      	movs	r0, #234	; 0xea
 8000d78:	f7ff ff9e 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ffa9 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff ffa6 	bl	8000cd4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000d88:	20b1      	movs	r0, #177	; 0xb1
 8000d8a:	f7ff ff95 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff ffa0 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000d94:	201b      	movs	r0, #27
 8000d96:	f7ff ff9d 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000d9a:	20b6      	movs	r0, #182	; 0xb6
 8000d9c:	f7ff ff8c 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000da0:	200a      	movs	r0, #10
 8000da2:	f7ff ff97 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000da6:	20a2      	movs	r0, #162	; 0xa2
 8000da8:	f7ff ff94 	bl	8000cd4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000dac:	20c0      	movs	r0, #192	; 0xc0
 8000dae:	f7ff ff83 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000db2:	2035      	movs	r0, #53	; 0x35
 8000db4:	f7ff ff8e 	bl	8000cd4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000db8:	20c1      	movs	r0, #193	; 0xc1
 8000dba:	f7ff ff7d 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000dbe:	2011      	movs	r0, #17
 8000dc0:	f7ff ff88 	bl	8000cd4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000dc4:	20c5      	movs	r0, #197	; 0xc5
 8000dc6:	f7ff ff77 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000dca:	2045      	movs	r0, #69	; 0x45
 8000dcc:	f7ff ff82 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000dd0:	2045      	movs	r0, #69	; 0x45
 8000dd2:	f7ff ff7f 	bl	8000cd4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000dd6:	20c7      	movs	r0, #199	; 0xc7
 8000dd8:	f7ff ff6e 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000ddc:	20a2      	movs	r0, #162	; 0xa2
 8000dde:	f7ff ff79 	bl	8000cd4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000de2:	20f2      	movs	r0, #242	; 0xf2
 8000de4:	f7ff ff68 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff ff73 	bl	8000cd4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000dee:	2026      	movs	r0, #38	; 0x26
 8000df0:	f7ff ff62 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff ff6d 	bl	8000cd4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000dfa:	20e0      	movs	r0, #224	; 0xe0
 8000dfc:	f7ff ff5c 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000e00:	200f      	movs	r0, #15
 8000e02:	f7ff ff67 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000e06:	2026      	movs	r0, #38	; 0x26
 8000e08:	f7ff ff64 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000e0c:	2024      	movs	r0, #36	; 0x24
 8000e0e:	f7ff ff61 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000e12:	200b      	movs	r0, #11
 8000e14:	f7ff ff5e 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000e18:	200e      	movs	r0, #14
 8000e1a:	f7ff ff5b 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000e1e:	2009      	movs	r0, #9
 8000e20:	f7ff ff58 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000e24:	2054      	movs	r0, #84	; 0x54
 8000e26:	f7ff ff55 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000e2a:	20a8      	movs	r0, #168	; 0xa8
 8000e2c:	f7ff ff52 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000e30:	2046      	movs	r0, #70	; 0x46
 8000e32:	f7ff ff4f 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000e36:	200c      	movs	r0, #12
 8000e38:	f7ff ff4c 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000e3c:	2017      	movs	r0, #23
 8000e3e:	f7ff ff49 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000e42:	2009      	movs	r0, #9
 8000e44:	f7ff ff46 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e48:	200f      	movs	r0, #15
 8000e4a:	f7ff ff43 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f7ff ff40 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff ff3d 	bl	8000cd4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000e5a:	20e1      	movs	r0, #225	; 0xe1
 8000e5c:	f7ff ff2c 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ff37 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000e66:	2019      	movs	r0, #25
 8000e68:	f7ff ff34 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000e6c:	201b      	movs	r0, #27
 8000e6e:	f7ff ff31 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000e72:	2004      	movs	r0, #4
 8000e74:	f7ff ff2e 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000e78:	2010      	movs	r0, #16
 8000e7a:	f7ff ff2b 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000e7e:	2007      	movs	r0, #7
 8000e80:	f7ff ff28 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000e84:	202a      	movs	r0, #42	; 0x2a
 8000e86:	f7ff ff25 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000e8a:	2047      	movs	r0, #71	; 0x47
 8000e8c:	f7ff ff22 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000e90:	2039      	movs	r0, #57	; 0x39
 8000e92:	f7ff ff1f 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000e96:	2003      	movs	r0, #3
 8000e98:	f7ff ff1c 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e9c:	2006      	movs	r0, #6
 8000e9e:	f7ff ff19 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	f7ff ff16 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000ea8:	2030      	movs	r0, #48	; 0x30
 8000eaa:	f7ff ff13 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000eae:	2038      	movs	r0, #56	; 0x38
 8000eb0:	f7ff ff10 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f7ff ff0d 	bl	8000cd4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000eba:	2036      	movs	r0, #54	; 0x36
 8000ebc:	f7ff fefc 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000ec0:	20c8      	movs	r0, #200	; 0xc8
 8000ec2:	f7ff ff07 	bl	8000cd4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000ec6:	202a      	movs	r0, #42	; 0x2a
 8000ec8:	f7ff fef6 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff ff01 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fefe 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fefb 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000ede:	20ef      	movs	r0, #239	; 0xef
 8000ee0:	f7ff fef8 	bl	8000cd4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000ee4:	202b      	movs	r0, #43	; 0x2b
 8000ee6:	f7ff fee7 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fef2 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff feef 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff feec 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000efc:	203f      	movs	r0, #63	; 0x3f
 8000efe:	f7ff fee9 	bl	8000cd4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000f02:	203a      	movs	r0, #58	; 0x3a
 8000f04:	f7ff fed8 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000f08:	2055      	movs	r0, #85	; 0x55
 8000f0a:	f7ff fee3 	bl	8000cd4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000f0e:	2011      	movs	r0, #17
 8000f10:	f7ff fed2 	bl	8000cb8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <LCD_REG_Config+0x230>)
 8000f16:	f7ff fe73 	bl	8000c00 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000f1a:	2029      	movs	r0, #41	; 0x29
 8000f1c:	f7ff fecc 	bl	8000cb8 <LCD_Write_Cmd>
	
	
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0002bffc 	.word	0x0002bffc

08000f28 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000f46:	202a      	movs	r0, #42	; 0x2a
 8000f48:	f7ff feb6 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff febe 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff feb8 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	121b      	asrs	r3, r3, #8
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff feaf 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000f76:	88fa      	ldrh	r2, [r7, #6]
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fea4 	bl	8000cd4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000f8c:	202b      	movs	r0, #43	; 0x2b
 8000f8e:	f7ff fe93 	bl	8000cb8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe9b 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe95 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	883b      	ldrh	r3, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	121b      	asrs	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fe8c 	bl	8000cd4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000fbc:	88ba      	ldrh	r2, [r7, #4]
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe81 	bl	8000cd4 <LCD_Write_Data>
	
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}

08000fda <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fea:	202c      	movs	r0, #44	; 0x2c
 8000fec:	f7ff fe64 	bl	8000cb8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e006      	b.n	8001004 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe6b 	bl	8000cd4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3f4      	bcc.n	8000ff6 <LCD_FillColor+0x1c>
		
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001016:	b590      	push	{r4, r7, lr}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	4604      	mov	r4, r0
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	461a      	mov	r2, r3
 8001024:	4623      	mov	r3, r4
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	4603      	mov	r3, r0
 800102a:	80bb      	strh	r3, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001034:	883b      	ldrh	r3, [r7, #0]
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f7ff ff74 	bl	8000f28 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	883a      	ldrh	r2, [r7, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	461a      	mov	r2, r3
 800104a:	8b3b      	ldrh	r3, [r7, #24]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ffc3 	bl	8000fda <LCD_FillColor>
	
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}

0800105c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	460b      	mov	r3, r1
 8001068:	80bb      	strh	r3, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	3b20      	subs	r3, #32
 8001072:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001074:	88b9      	ldrh	r1, [r7, #4]
 8001076:	88f8      	ldrh	r0, [r7, #6]
 8001078:	2310      	movs	r3, #16
 800107a:	2208      	movs	r2, #8
 800107c:	f7ff ff54 	bl	8000f28 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001080:	202c      	movs	r0, #44	; 0x2c
 8001082:	f7ff fe19 	bl	8000cb8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001086:	2300      	movs	r3, #0
 8001088:	73bb      	strb	r3, [r7, #14]
 800108a:	e023      	b.n	80010d4 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800108c:	7b3a      	ldrb	r2, [r7, #12]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4914      	ldr	r1, [pc, #80]	; (80010e4 <LCD_DrawChar+0x88>)
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	440a      	add	r2, r1
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800109c:	2300      	movs	r3, #0
 800109e:	737b      	strb	r3, [r7, #13]
 80010a0:	e012      	b.n	80010c8 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80010ac:	201f      	movs	r0, #31
 80010ae:	f7ff fe11 	bl	8000cd4 <LCD_Write_Data>
 80010b2:	e003      	b.n	80010bc <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80010b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010b8:	f7ff fe0c 	bl	8000cd4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	085b      	lsrs	r3, r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	3301      	adds	r3, #1
 80010c6:	737b      	strb	r3, [r7, #13]
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d9e9      	bls.n	80010a2 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d9d8      	bls.n	800108c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	08007764 	.word	0x08007764

080010e8 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	603a      	str	r2, [r7, #0]
 80010f2:	80fb      	strh	r3, [r7, #6]
 80010f4:	460b      	mov	r3, r1
 80010f6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80010f8:	e01c      	b.n	8001134 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	2be8      	cmp	r3, #232	; 0xe8
 80010fe:	d904      	bls.n	800110a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001100:	2300      	movs	r3, #0
 8001102:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	3310      	adds	r3, #16
 8001108:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001110:	d903      	bls.n	800111a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001112:	2300      	movs	r3, #0
 8001114:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001116:	2300      	movs	r3, #0
 8001118:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	88b9      	ldrh	r1, [r7, #4]
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff9a 	bl	800105c <LCD_DrawChar>
		
		pStr ++;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	3308      	adds	r3, #8
 8001132:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1de      	bne.n	80010fa <LCD_DrawString+0x12>
		
	}
	
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MPU6050_Init>:

double KalmanAngleX;
double KalmanAngleY;

void MPU6050_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2275      	movs	r2, #117	; 0x75
 8001160:	21d0      	movs	r1, #208	; 0xd0
 8001162:	4823      	ldr	r0, [pc, #140]	; (80011f0 <MPU6050_Init+0xa8>)
 8001164:	f001 fdac 	bl	8002cc0 <HAL_I2C_Mem_Read>

	if (check == 104) // If the device is present
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b68      	cmp	r3, #104	; 0x68
 800116c:	d13b      	bne.n	80011e6 <MPU6050_Init+0x9e>
	{
		//Waking the sensor up
		data = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	226b      	movs	r2, #107	; 0x6b
 8001184:	21d0      	movs	r1, #208	; 0xd0
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <MPU6050_Init+0xa8>)
 8001188:	f001 fca0 	bl	8002acc <HAL_I2C_Mem_Write>


		//Setting Data Rate to 1KHz by writing SMPRT_DIV register
		data = 0x07;
 800118c:	2307      	movs	r3, #7
 800118e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	1dbb      	adds	r3, r7, #6
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2219      	movs	r2, #25
 80011a2:	21d0      	movs	r1, #208	; 0xd0
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MPU6050_Init+0xa8>)
 80011a6:	f001 fc91 	bl	8002acc <HAL_I2C_Mem_Write>


		//Setting accelerometer configuration
		//XA_ST=0, YA_ST=0,ST=0,FS_SEL = 0 -> +-2g
		data = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	1dbb      	adds	r3, r7, #6
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	221c      	movs	r2, #28
 80011c0:	21d0      	movs	r1, #208	; 0xd0
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <MPU6050_Init+0xa8>)
 80011c4:	f001 fc82 	bl	8002acc <HAL_I2C_Mem_Write>


		//Setting Gyroscope configuration
		//XG_ST=0,YG_ST=0, ZG_ST=0,FS_SEL=0 -> +=250 deg/sec
		data = 0x00;
 80011c8:	2300      	movs	r3, #0
 80011ca:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	221b      	movs	r2, #27
 80011de:	21d0      	movs	r1, #208	; 0xd0
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MPU6050_Init+0xa8>)
 80011e2:	f001 fc73 	bl	8002acc <HAL_I2C_Mem_Write>
	}
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000028c 	.word	0x2000028c
 80011f4:	00000000 	.word	0x00000000

080011f8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, ACCEL_XOUT_REG, 1, Rec_Data, 6, 1000);
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2306      	movs	r3, #6
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	463b      	mov	r3, r7
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	223b      	movs	r2, #59	; 0x3b
 8001210:	21d0      	movs	r1, #208	; 0xd0
 8001212:	4831      	ldr	r0, [pc, #196]	; (80012d8 <MPU6050_Read_Accel+0xe0>)
 8001214:	f001 fd54 	bl	8002cc0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001218:	783b      	ldrb	r3, [r7, #0]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	787b      	ldrb	r3, [r7, #1]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MPU6050_Read_Accel+0xe4>)
 8001228:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800122a:	78bb      	ldrb	r3, [r7, #2]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MPU6050_Read_Accel+0xe8>)
 800123a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	797b      	ldrb	r3, [r7, #5]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21a      	sxth	r2, r3
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MPU6050_Read_Accel+0xec>)
 800124c:	801a      	strh	r2, [r3, #0]

	// Converting RAW values into acceleration in g
	// We have to divide according to the Full scale value set in FS_SEL

	Ax = Accel_X_RAW/16484.0;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MPU6050_Read_Accel+0xe4>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f941 	bl	80004dc <__aeabi_i2d>
 800125a:	a31d      	add	r3, pc, #116	; (adr r3, 80012d0 <MPU6050_Read_Accel+0xd8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fad0 	bl	8000804 <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc78 	bl	8000b60 <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <MPU6050_Read_Accel+0xf0>)
 8001274:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16484.0;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MPU6050_Read_Accel+0xe8>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f92d 	bl	80004dc <__aeabi_i2d>
 8001282:	a313      	add	r3, pc, #76	; (adr r3, 80012d0 <MPU6050_Read_Accel+0xd8>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff fabc 	bl	8000804 <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fc64 	bl	8000b60 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <MPU6050_Read_Accel+0xf4>)
 800129c:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16484.0;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MPU6050_Read_Accel+0xec>)
 80012a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f919 	bl	80004dc <__aeabi_i2d>
 80012aa:	a309      	add	r3, pc, #36	; (adr r3, 80012d0 <MPU6050_Read_Accel+0xd8>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff faa8 	bl	8000804 <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc50 	bl	8000b60 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <MPU6050_Read_Accel+0xf8>)
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40d01900 	.word	0x40d01900
 80012d8:	2000028c 	.word	0x2000028c
 80012dc:	20000328 	.word	0x20000328
 80012e0:	2000032a 	.word	0x2000032a
 80012e4:	2000032c 	.word	0x2000032c
 80012e8:	20000334 	.word	0x20000334
 80012ec:	20000338 	.word	0x20000338
 80012f0:	2000033c 	.word	0x2000033c
 80012f4:	00000000 	.word	0x00000000

080012f8 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2306      	movs	r3, #6
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	463b      	mov	r3, r7
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	2243      	movs	r2, #67	; 0x43
 8001310:	21d0      	movs	r1, #208	; 0xd0
 8001312:	4831      	ldr	r0, [pc, #196]	; (80013d8 <MPU6050_Read_Gyro+0xe0>)
 8001314:	f001 fcd4 	bl	8002cc0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001318:	783b      	ldrb	r3, [r7, #0]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	787b      	ldrb	r3, [r7, #1]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MPU6050_Read_Gyro+0xe4>)
 8001328:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21a      	sxth	r2, r3
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <MPU6050_Read_Gyro+0xe8>)
 800133a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800133c:	793b      	ldrb	r3, [r7, #4]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <MPU6050_Read_Gyro+0xec>)
 800134c:	801a      	strh	r2, [r3, #0]

	//Converting RAW  values to degree per second
	// We have to divide according to the full scale value set in FS_SEL

	Gx = Gyro_X_RAW/131.0;
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MPU6050_Read_Gyro+0xe4>)
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8c1 	bl	80004dc <__aeabi_i2d>
 800135a:	a31d      	add	r3, pc, #116	; (adr r3, 80013d0 <MPU6050_Read_Gyro+0xd8>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff fa50 	bl	8000804 <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fbf8 	bl	8000b60 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <MPU6050_Read_Gyro+0xf0>)
 8001374:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MPU6050_Read_Gyro+0xe8>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8ad 	bl	80004dc <__aeabi_i2d>
 8001382:	a313      	add	r3, pc, #76	; (adr r3, 80013d0 <MPU6050_Read_Gyro+0xd8>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fa3c 	bl	8000804 <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fbe4 	bl	8000b60 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <MPU6050_Read_Gyro+0xf4>)
 800139c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MPU6050_Read_Gyro+0xec>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f899 	bl	80004dc <__aeabi_i2d>
 80013aa:	a309      	add	r3, pc, #36	; (adr r3, 80013d0 <MPU6050_Read_Gyro+0xd8>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa28 	bl	8000804 <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fbd0 	bl	8000b60 <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <MPU6050_Read_Gyro+0xf8>)
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40606000 	.word	0x40606000
 80013d8:	2000028c 	.word	0x2000028c
 80013dc:	2000032e 	.word	0x2000032e
 80013e0:	20000330 	.word	0x20000330
 80013e4:	20000332 	.word	0x20000332
 80013e8:	20000340 	.word	0x20000340
 80013ec:	20000344 	.word	0x20000344
 80013f0:	20000348 	.word	0x20000348

080013f4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b092      	sub	sp, #72	; 0x48
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001406:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800140a:	f7fe ff19 	bl	8000240 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800141c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001424:	f7ff f8c4 	bl	80005b0 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe ff08 	bl	8000244 <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800144a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800144e:	f7ff f8af 	bl	80005b0 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001460:	f7fe feee 	bl	8000240 <__aeabi_dsub>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001472:	f7fe fee5 	bl	8000240 <__aeabi_dsub>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fede 	bl	8000244 <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001494:	f7ff f88c 	bl	80005b0 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7fe fed0 	bl	8000244 <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	68f9      	ldr	r1, [r7, #12]
 80014aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014be:	f7ff f877 	bl	80005b0 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7fe feb9 	bl	8000240 <__aeabi_dsub>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014e8:	f7ff f862 	bl	80005b0 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fea4 	bl	8000240 <__aeabi_dsub>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800150e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001512:	f7ff f84d 	bl	80005b0 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fe91 	bl	8000244 <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001538:	f7fe fe84 	bl	8000244 <__adddf3>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800154a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800154e:	f7ff f959 	bl	8000804 <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001564:	f7ff f94e 	bl	8000804 <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800157a:	f7fe fe61 	bl	8000240 <__aeabi_dsub>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800158c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001594:	f7ff f80c 	bl	80005b0 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7fe fe50 	bl	8000244 <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80015b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015bc:	f7fe fff8 	bl	80005b0 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe3c 	bl	8000244 <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015e6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015f8:	f7fe ffda 	bl	80005b0 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7fe fe1c 	bl	8000240 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800161c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001620:	f7fe ffc6 	bl	80005b0 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fe08 	bl	8000240 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001648:	f7fe ffb2 	bl	80005b0 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fdf4 	bl	8000240 <__aeabi_dsub>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001668:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800166c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001670:	f7fe ff9e 	bl	80005b0 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fde0 	bl	8000240 <__aeabi_dsub>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bdb0      	pop	{r4, r5, r7, pc}
 800169a:	0000      	movs	r0, r0
 800169c:	0000      	movs	r0, r0
	...

080016a0 <MPU6050_Read_All>:



void MPU6050_Read_All()
{
 80016a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016a4:	b090      	sub	sp, #64	; 0x40
 80016a6:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, ACCEL_XOUT_REG, 1, Rec_Data, 6, 1000);
 80016a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	2306      	movs	r3, #6
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	223b      	movs	r2, #59	; 0x3b
 80016bc:	21d0      	movs	r1, #208	; 0xd0
 80016be:	4892      	ldr	r0, [pc, #584]	; (8001908 <MPU6050_Read_All+0x268>)
 80016c0:	f001 fafe 	bl	8002cc0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80016c4:	7a3b      	ldrb	r3, [r7, #8]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	7a7b      	ldrb	r3, [r7, #9]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	4b8e      	ldr	r3, [pc, #568]	; (800190c <MPU6050_Read_All+0x26c>)
 80016d4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80016d6:	7abb      	ldrb	r3, [r7, #10]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b8a      	ldr	r3, [pc, #552]	; (8001910 <MPU6050_Read_All+0x270>)
 80016e6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80016e8:	7b3b      	ldrb	r3, [r7, #12]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b87      	ldr	r3, [pc, #540]	; (8001914 <MPU6050_Read_All+0x274>)
 80016f8:	801a      	strh	r2, [r3, #0]

	// Converting RAW values into acceleration in g
	// We have to divide according to the Full scale value set in FS_SEL

	Ax = Accel_X_RAW/16484.0;
 80016fa:	4b84      	ldr	r3, [pc, #528]	; (800190c <MPU6050_Read_All+0x26c>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe feeb 	bl	80004dc <__aeabi_i2d>
 8001706:	a37a      	add	r3, pc, #488	; (adr r3, 80018f0 <MPU6050_Read_All+0x250>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7ff f87a 	bl	8000804 <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa22 	bl	8000b60 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a7e      	ldr	r2, [pc, #504]	; (8001918 <MPU6050_Read_All+0x278>)
 8001720:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16484.0;
 8001722:	4b7b      	ldr	r3, [pc, #492]	; (8001910 <MPU6050_Read_All+0x270>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fed7 	bl	80004dc <__aeabi_i2d>
 800172e:	a370      	add	r3, pc, #448	; (adr r3, 80018f0 <MPU6050_Read_All+0x250>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7ff f866 	bl	8000804 <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fa0e 	bl	8000b60 <__aeabi_d2f>
 8001744:	4603      	mov	r3, r0
 8001746:	4a75      	ldr	r2, [pc, #468]	; (800191c <MPU6050_Read_All+0x27c>)
 8001748:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16484.0;
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <MPU6050_Read_All+0x274>)
 800174c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fec3 	bl	80004dc <__aeabi_i2d>
 8001756:	a366      	add	r3, pc, #408	; (adr r3, 80018f0 <MPU6050_Read_All+0x250>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7ff f852 	bl	8000804 <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9fa 	bl	8000b60 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4a6c      	ldr	r2, [pc, #432]	; (8001920 <MPU6050_Read_All+0x280>)
 8001770:	6013      	str	r3, [r2, #0]

	uint8_t Rec_Data2[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data2, 6, 1000);
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2306      	movs	r3, #6
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	463b      	mov	r3, r7
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	2243      	movs	r2, #67	; 0x43
 8001784:	21d0      	movs	r1, #208	; 0xd0
 8001786:	4860      	ldr	r0, [pc, #384]	; (8001908 <MPU6050_Read_All+0x268>)
 8001788:	f001 fa9a 	bl	8002cc0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data2[0] << 8 | Rec_Data2[1]);
 800178c:	783b      	ldrb	r3, [r7, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	787b      	ldrb	r3, [r7, #1]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b62      	ldr	r3, [pc, #392]	; (8001924 <MPU6050_Read_All+0x284>)
 800179c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data2[2] << 8 | Rec_Data2[3]);
 800179e:	78bb      	ldrb	r3, [r7, #2]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <MPU6050_Read_All+0x288>)
 80017ae:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data2[4] << 8 | Rec_Data2[5]);
 80017b0:	793b      	ldrb	r3, [r7, #4]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	797b      	ldrb	r3, [r7, #5]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b5b      	ldr	r3, [pc, #364]	; (800192c <MPU6050_Read_All+0x28c>)
 80017c0:	801a      	strh	r2, [r3, #0]

	//Converting RAW  values to degree per second
	// We have to divide according to the full scale value set in FS_SEL

	Gx = Gyro_X_RAW/131.0;
 80017c2:	4b58      	ldr	r3, [pc, #352]	; (8001924 <MPU6050_Read_All+0x284>)
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe87 	bl	80004dc <__aeabi_i2d>
 80017ce:	a34a      	add	r3, pc, #296	; (adr r3, 80018f8 <MPU6050_Read_All+0x258>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7ff f816 	bl	8000804 <__aeabi_ddiv>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f9be 	bl	8000b60 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a52      	ldr	r2, [pc, #328]	; (8001930 <MPU6050_Read_All+0x290>)
 80017e8:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 80017ea:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <MPU6050_Read_All+0x288>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe73 	bl	80004dc <__aeabi_i2d>
 80017f6:	a340      	add	r3, pc, #256	; (adr r3, 80018f8 <MPU6050_Read_All+0x258>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7ff f802 	bl	8000804 <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9aa 	bl	8000b60 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4a49      	ldr	r2, [pc, #292]	; (8001934 <MPU6050_Read_All+0x294>)
 8001810:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <MPU6050_Read_All+0x28c>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe5f 	bl	80004dc <__aeabi_i2d>
 800181e:	a336      	add	r3, pc, #216	; (adr r3, 80018f8 <MPU6050_Read_All+0x258>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe ffee 	bl	8000804 <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f996 	bl	8000b60 <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	4a40      	ldr	r2, [pc, #256]	; (8001938 <MPU6050_Read_All+0x298>)
 8001838:	6013      	str	r3, [r2, #0]


	// Kalman Angle Solve
	double dt = (double)(HAL_GetTick() - timer) / 1000;
 800183a:	f000 fd45 	bl	80022c8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <MPU6050_Read_All+0x29c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe38 	bl	80004bc <__aeabi_ui2d>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <MPU6050_Read_All+0x2a0>)
 8001852:	f7fe ffd7 	bl	8000804 <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	timer = HAL_GetTick();
 800185e:	f000 fd33 	bl	80022c8 <HAL_GetTick>
 8001862:	4603      	mov	r3, r0
 8001864:	4a35      	ldr	r2, [pc, #212]	; (800193c <MPU6050_Read_All+0x29c>)
 8001866:	6013      	str	r3, [r2, #0]

	double roll;
	double roll_sqrt = sqrt(Accel_X_RAW * Accel_X_RAW + Accel_Z_RAW * Accel_Z_RAW);
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <MPU6050_Read_All+0x26c>)
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	461a      	mov	r2, r3
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <MPU6050_Read_All+0x26c>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MPU6050_Read_All+0x274>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	4619      	mov	r1, r3
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <MPU6050_Read_All+0x274>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe24 	bl	80004dc <__aeabi_i2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f005 fd97 	bl	80073ce <sqrt>
 80018a0:	e9c7 0106 	strd	r0, r1, [r7, #24]

	if (roll_sqrt != 0)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018b0:	f7ff f8e6 	bl	8000a80 <__aeabi_dcmpeq>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d144      	bne.n	8001944 <MPU6050_Read_All+0x2a4>
	{
		roll = atan(Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MPU6050_Read_All+0x270>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe0b 	bl	80004dc <__aeabi_i2d>
 80018c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ca:	f7fe ff9b 	bl	8000804 <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f005 fbeb 	bl	80070b0 <atan>
 80018da:	a309      	add	r3, pc, #36	; (adr r3, 8001900 <MPU6050_Read_All+0x260>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe66 	bl	80005b0 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80018ec:	e030      	b.n	8001950 <MPU6050_Read_All+0x2b0>
 80018ee:	bf00      	nop
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40d01900 	.word	0x40d01900
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40606000 	.word	0x40606000
 8001900:	1a63c1f8 	.word	0x1a63c1f8
 8001904:	404ca5dc 	.word	0x404ca5dc
 8001908:	2000028c 	.word	0x2000028c
 800190c:	20000328 	.word	0x20000328
 8001910:	2000032a 	.word	0x2000032a
 8001914:	2000032c 	.word	0x2000032c
 8001918:	20000334 	.word	0x20000334
 800191c:	20000338 	.word	0x20000338
 8001920:	2000033c 	.word	0x2000033c
 8001924:	2000032e 	.word	0x2000032e
 8001928:	20000330 	.word	0x20000330
 800192c:	20000332 	.word	0x20000332
 8001930:	20000340 	.word	0x20000340
 8001934:	20000344 	.word	0x20000344
 8001938:	20000348 	.word	0x20000348
 800193c:	2000034c 	.word	0x2000034c
 8001940:	408f4000 	.word	0x408f4000
	}
	else
	{
		roll = 0.0;
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	double pitch = atan2(-Accel_X_RAW,Accel_Z_RAW) * RAD_TO_DEG;
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <MPU6050_Read_All+0x3e8>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	425b      	negs	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdbf 	bl	80004dc <__aeabi_i2d>
 800195e:	4680      	mov	r8, r0
 8001960:	4689      	mov	r9, r1
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <MPU6050_Read_All+0x3ec>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdb7 	bl	80004dc <__aeabi_i2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	f005 fd28 	bl	80073ca <atan2>
 800197a:	a341      	add	r3, pc, #260	; (adr r3, 8001a80 <MPU6050_Read_All+0x3e0>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe16 	bl	80005b0 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ((pitch < -90 && KalmanAngleY > 90) || (pitch > 90 && KalmanAngleY < -90))
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <MPU6050_Read_All+0x3f0>)
 8001992:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001996:	f7ff f87d 	bl	8000a94 <__aeabi_dcmplt>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00a      	beq.n	80019b6 <MPU6050_Read_All+0x316>
 80019a0:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <MPU6050_Read_All+0x3f4>)
 80019a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <MPU6050_Read_All+0x3f8>)
 80019ac:	f7ff f890 	bl	8000ad0 <__aeabi_dcmpgt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d114      	bne.n	80019e0 <MPU6050_Read_All+0x340>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <MPU6050_Read_All+0x3f8>)
 80019bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019c0:	f7ff f886 	bl	8000ad0 <__aeabi_dcmpgt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d015      	beq.n	80019f6 <MPU6050_Read_All+0x356>
 80019ca:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <MPU6050_Read_All+0x3f4>)
 80019cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <MPU6050_Read_All+0x3f0>)
 80019d6:	f7ff f85d 	bl	8000a94 <__aeabi_dcmplt>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <MPU6050_Read_All+0x356>
	{
		KalmanY.angle = pitch;
 80019e0:	492e      	ldr	r1, [pc, #184]	; (8001a9c <MPU6050_Read_All+0x3fc>)
 80019e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		KalmanAngleY = pitch;
 80019ea:	492a      	ldr	r1, [pc, #168]	; (8001a94 <MPU6050_Read_All+0x3f4>)
 80019ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019f0:	e9c1 2300 	strd	r2, r3, [r1]
 80019f4:	e014      	b.n	8001a20 <MPU6050_Read_All+0x380>
	}
	else
	{
		KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, Gy, dt);
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <MPU6050_Read_All+0x400>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd80 	bl	8000500 <__aeabi_f2d>
 8001a00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a08:	e9cd 0100 	strd	r0, r1, [sp]
 8001a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a10:	4822      	ldr	r0, [pc, #136]	; (8001a9c <MPU6050_Read_All+0x3fc>)
 8001a12:	f7ff fcef 	bl	80013f4 <Kalman_getAngle>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	491e      	ldr	r1, [pc, #120]	; (8001a94 <MPU6050_Read_All+0x3f4>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]

	}
	if (fabs(KalmanAngleY) > 90)
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <MPU6050_Read_All+0x3f4>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	4614      	mov	r4, r2
 8001a28:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MPU6050_Read_All+0x3f8>)
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7ff f84b 	bl	8000ad0 <__aeabi_dcmpgt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <MPU6050_Read_All+0x3ac>
	{
		Gx = -Gx;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MPU6050_Read_All+0x404>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <MPU6050_Read_All+0x404>)
 8001a4a:	6013      	str	r3, [r2, #0]
	}

	KalmanAngleX = Kalman_getAngle(&KalmanX, roll, Gx, dt);
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MPU6050_Read_All+0x404>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd55 	bl	8000500 <__aeabi_f2d>
 8001a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a5e:	e9cd 0100 	strd	r0, r1, [sp]
 8001a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a66:	4810      	ldr	r0, [pc, #64]	; (8001aa8 <MPU6050_Read_All+0x408>)
 8001a68:	f7ff fcc4 	bl	80013f4 <Kalman_getAngle>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <MPU6050_Read_All+0x40c>)
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	; 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a80:	1a63c1f8 	.word	0x1a63c1f8
 8001a84:	404ca5dc 	.word	0x404ca5dc
 8001a88:	20000328 	.word	0x20000328
 8001a8c:	2000032c 	.word	0x2000032c
 8001a90:	c0568000 	.word	0xc0568000
 8001a94:	20000358 	.word	0x20000358
 8001a98:	40568000 	.word	0x40568000
 8001a9c:	20000048 	.word	0x20000048
 8001aa0:	20000344 	.word	0x20000344
 8001aa4:	20000340 	.word	0x20000340
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000350 	.word	0x20000350

08001ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	//  __HAL_RCC_I2C2_CLK_ENABLE();
	  HAL_Init();
 8001ab6:	f000 fbaf 	bl	8002218 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8001aba:	f000 f883 	bl	8001bc4 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8001abe:	f000 f8f5 	bl	8001cac <MX_GPIO_Init>
	  MX_FSMC_Init();
 8001ac2:	f000 f96b 	bl	8001d9c <MX_FSMC_Init>
	  MX_I2C2_Init();
 8001ac6:	f000 f8c3 	bl	8001c50 <MX_I2C2_Init>
	  LCD_INIT();
 8001aca:	f7ff f8aa 	bl	8000c22 <LCD_INIT>
	  /* USER CODE BEGIN 2 */
	  LCD_INIT();
 8001ace:	f7ff f8a8 	bl	8000c22 <LCD_INIT>
	  MPU6050_Init();
 8001ad2:	f7ff fb39 	bl	8001148 <MPU6050_Init>

	  LCD_DrawString(20,20, "Initialized");
 8001ad6:	4a33      	ldr	r2, [pc, #204]	; (8001ba4 <main+0xf4>)
 8001ad8:	2114      	movs	r1, #20
 8001ada:	2014      	movs	r0, #20
 8001adc:	f7ff fb04 	bl	80010e8 <LCD_DrawString>

	  HAL_Delay(1000);
 8001ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae4:	f000 fbfa 	bl	80022dc <HAL_Delay>

	  LCD_DrawString(50, 20, "MPU6050");
 8001ae8:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <main+0xf8>)
 8001aea:	2114      	movs	r1, #20
 8001aec:	2032      	movs	r0, #50	; 0x32
 8001aee:	f7ff fafb 	bl	80010e8 <LCD_DrawString>
	    /* USER CODE END WHILE */



	    /* USER CODE BEGIN 3 */
		  MPU6050_Read_Accel();
 8001af2:	f7ff fb81 	bl	80011f8 <MPU6050_Read_Accel>
		  MPU6050_Read_Gyro();
 8001af6:	f7ff fbff 	bl	80012f8 <MPU6050_Read_Gyro>
		  MPU6050_Read_All();
 8001afa:	f7ff fdd1 	bl	80016a0 <MPU6050_Read_All>

		 //Printing on LCD
		  sprintf(buf, "%.2f",Gx);
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <main+0xfc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fcfc 	bl	8000500 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	1d38      	adds	r0, r7, #4
 8001b0e:	4928      	ldr	r1, [pc, #160]	; (8001bb0 <main+0x100>)
 8001b10:	f003 f854 	bl	8004bbc <siprintf>
		  LCD_DrawString(100,100, buf);
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	461a      	mov	r2, r3
 8001b18:	2164      	movs	r1, #100	; 0x64
 8001b1a:	2064      	movs	r0, #100	; 0x64
 8001b1c:	f7ff fae4 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",Gy);
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <main+0x104>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fceb 	bl	8000500 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	1d38      	adds	r0, r7, #4
 8001b30:	491f      	ldr	r1, [pc, #124]	; (8001bb0 <main+0x100>)
 8001b32:	f003 f843 	bl	8004bbc <siprintf>
		  LCD_DrawString(100,200, buf);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	461a      	mov	r2, r3
 8001b3a:	21c8      	movs	r1, #200	; 0xc8
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	f7ff fad3 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",Gz);
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <main+0x108>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fcda 	bl	8000500 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	1d38      	adds	r0, r7, #4
 8001b52:	4917      	ldr	r1, [pc, #92]	; (8001bb0 <main+0x100>)
 8001b54:	f003 f832 	bl	8004bbc <siprintf>
		  LCD_DrawString(100,300, buf);
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b60:	2064      	movs	r0, #100	; 0x64
 8001b62:	f7ff fac1 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",KalmanAngleX);
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <main+0x10c>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	1d38      	adds	r0, r7, #4
 8001b6e:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <main+0x100>)
 8001b70:	f003 f824 	bl	8004bbc <siprintf>
		  LCD_DrawString(90, 50, buf);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	461a      	mov	r2, r3
 8001b78:	2132      	movs	r1, #50	; 0x32
 8001b7a:	205a      	movs	r0, #90	; 0x5a
 8001b7c:	f7ff fab4 	bl	80010e8 <LCD_DrawString>

		  sprintf(buf, "%.2f",KalmanAngleY);
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <main+0x110>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	1d38      	adds	r0, r7, #4
 8001b88:	4909      	ldr	r1, [pc, #36]	; (8001bb0 <main+0x100>)
 8001b8a:	f003 f817 	bl	8004bbc <siprintf>
		  LCD_DrawString(90,90, buf);
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	461a      	mov	r2, r3
 8001b92:	215a      	movs	r1, #90	; 0x5a
 8001b94:	205a      	movs	r0, #90	; 0x5a
 8001b96:	f7ff faa7 	bl	80010e8 <LCD_DrawString>


		  HAL_Delay(250);
 8001b9a:	20fa      	movs	r0, #250	; 0xfa
 8001b9c:	f000 fb9e 	bl	80022dc <HAL_Delay>
		  MPU6050_Read_Accel();
 8001ba0:	e7a7      	b.n	8001af2 <main+0x42>
 8001ba2:	bf00      	nop
 8001ba4:	08007738 	.word	0x08007738
 8001ba8:	08007744 	.word	0x08007744
 8001bac:	20000340 	.word	0x20000340
 8001bb0:	0800774c 	.word	0x0800774c
 8001bb4:	20000344 	.word	0x20000344
 8001bb8:	20000348 	.word	0x20000348
 8001bbc:	20000350 	.word	0x20000350
 8001bc0:	20000358 	.word	0x20000358

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b090      	sub	sp, #64	; 0x40
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	2228      	movs	r2, #40	; 0x28
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fb8a 	bl	80042ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 fe19 	bl	8003844 <HAL_RCC_OscConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c18:	f000 f924 	bl	8001e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c20:	2302      	movs	r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 f886 	bl	8003d48 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c42:	f000 f90f 	bl	8001e64 <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3740      	adds	r7, #64	; 0x40
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c56:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <MX_I2C2_Init+0x54>)
 8001c58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <MX_I2C2_Init+0x58>)
 8001c5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_I2C2_Init+0x50>)
 8001c8e:	f000 fdd9 	bl	8002844 <HAL_I2C_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c98:	f000 f8e4 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000028c 	.word	0x2000028c
 8001ca4:	40005800 	.word	0x40005800
 8001ca8:	000186a0 	.word	0x000186a0

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc0:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a32      	ldr	r2, [pc, #200]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a26      	ldr	r2, [pc, #152]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_GPIO_Init+0xe4>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3e:	4815      	ldr	r0, [pc, #84]	; (8001d94 <MX_GPIO_Init+0xe8>)
 8001d40:	f000 fd68 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2102      	movs	r1, #2
 8001d48:	4813      	ldr	r0, [pc, #76]	; (8001d98 <MX_GPIO_Init+0xec>)
 8001d4a:	f000 fd63 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	4619      	mov	r1, r3
 8001d66:	480b      	ldr	r0, [pc, #44]	; (8001d94 <MX_GPIO_Init+0xe8>)
 8001d68:	f000 fbc0 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_GPIO_Init+0xec>)
 8001d84:	f000 fbb2 	bl	80024ec <HAL_GPIO_Init>

}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40011400 	.word	0x40011400
 8001d98:	40011800 	.word	0x40011800

08001d9c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001db6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001dba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001dbe:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <MX_FSMC_Init+0xc0>)
 8001dc0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e12:	230f      	movs	r3, #15
 8001e14:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e16:	230f      	movs	r3, #15
 8001e18:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e1a:	23ff      	movs	r3, #255	; 0xff
 8001e1c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e1e:	230f      	movs	r3, #15
 8001e20:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e22:	2310      	movs	r3, #16
 8001e24:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e26:	2311      	movs	r3, #17
 8001e28:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	4619      	mov	r1, r3
 8001e34:	4808      	ldr	r0, [pc, #32]	; (8001e58 <MX_FSMC_Init+0xbc>)
 8001e36:	f002 f90b 	bl	8004050 <HAL_SRAM_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001e40:	f000 f810 	bl	8001e64 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_FSMC_Init+0xc4>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <MX_FSMC_Init+0xc4>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200002e0 	.word	0x200002e0
 8001e5c:	a0000104 	.word	0xa0000104
 8001e60:	40010000 	.word	0x40010000

08001e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <Error_Handler+0x8>
	...

08001e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_MspInit+0x5c>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_MspInit+0x5c>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6193      	str	r3, [r2, #24]
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_MspInit+0x5c>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_MspInit+0x5c>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <HAL_MspInit+0x5c>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_MspInit+0x5c>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_MspInit+0x60>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_MspInit+0x60>)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010000 	.word	0x40010000

08001ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_I2C_MspInit+0x74>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d124      	bne.n	8001f3e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_I2C_MspInit+0x78>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <HAL_I2C_MspInit+0x78>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_I2C_MspInit+0x78>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f12:	2312      	movs	r3, #18
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480b      	ldr	r0, [pc, #44]	; (8001f50 <HAL_I2C_MspInit+0x7c>)
 8001f22:	f000 fae3 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_I2C_MspInit+0x78>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_I2C_MspInit+0x78>)
 8001f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_I2C_MspInit+0x78>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f3e:	bf00      	nop
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40005800 	.word	0x40005800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010c00 	.word	0x40010c00

08001f54 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_FSMC_MspInit+0x78>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d129      	bne.n	8001fc4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_FSMC_MspInit+0x78>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_FSMC_MspInit+0x7c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <HAL_FSMC_MspInit+0x7c>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6153      	str	r3, [r2, #20]
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_FSMC_MspInit+0x7c>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f8e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001f92:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <HAL_FSMC_MspInit+0x80>)
 8001fa4:	f000 faa2 	bl	80024ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001fa8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001fac:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <HAL_FSMC_MspInit+0x84>)
 8001fbe:	f000 fa95 	bl	80024ec <HAL_GPIO_Init>
 8001fc2:	e000      	b.n	8001fc6 <HAL_FSMC_MspInit+0x72>
    return;
 8001fc4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000360 	.word	0x20000360
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40011800 	.word	0x40011800
 8001fd8:	40011400 	.word	0x40011400

08001fdc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001fe4:	f7ff ffb6 	bl	8001f54 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <MemManage_Handler+0x4>

08002002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler+0x4>

0800200e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002036:	f000 f935 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}

0800203e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
	return 1;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <_kill>:

int _kill(int pid, int sig)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002056:	f002 f91f 	bl	8004298 <__errno>
 800205a:	4603      	mov	r3, r0
 800205c:	2216      	movs	r2, #22
 800205e:	601a      	str	r2, [r3, #0]
	return -1;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_exit>:

void _exit (int status)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ffe7 	bl	800204c <_kill>
	while (1) {}		/* Make sure we hang here */
 800207e:	e7fe      	b.n	800207e <_exit+0x12>

08002080 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e00a      	b.n	80020a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002092:	f3af 8000 	nop.w
 8002096:	4601      	mov	r1, r0
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	60ba      	str	r2, [r7, #8]
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbf0      	blt.n	8002092 <_read+0x12>
	}

return len;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e009      	b.n	80020e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dbf1      	blt.n	80020cc <_write+0x12>
	}
	return len;
 80020e8:	687b      	ldr	r3, [r7, #4]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_close>:

int _close(int file)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	return -1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002118:	605a      	str	r2, [r3, #4]
	return 0;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <_isatty>:

int _isatty(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
	return 1;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
	return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
	...

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f002 f888 	bl	8004298 <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20010000 	.word	0x20010000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	20000364 	.word	0x20000364
 80021bc:	20000380 	.word	0x20000380

080021c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ce:	490d      	ldr	r1, [pc, #52]	; (8002204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e4:	4c0a      	ldr	r4, [pc, #40]	; (8002210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021f2:	f7ff ffe5 	bl	80021c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f002 f855 	bl	80042a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fa:	f7ff fc59 	bl	8001ab0 <main>
  bx lr
 80021fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002208:	080081c0 	.word	0x080081c0
  ldr r2, =_sbss
 800220c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002210:	2000037c 	.word	0x2000037c

08002214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC1_2_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x28>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x28>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f92b 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	200f      	movs	r0, #15
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fe1c 	bl	8001e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f935 	bl	80024d2 <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002280:	f000 f90b 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000090 	.word	0x20000090
 800229c:	20000098 	.word	0x20000098
 80022a0:	20000094 	.word	0x20000094

080022a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_IncTick+0x1c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_IncTick+0x20>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <HAL_IncTick+0x20>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	20000098 	.word	0x20000098
 80022c4:	20000368 	.word	0x20000368

080022c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <HAL_GetTick+0x10>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000368 	.word	0x20000368

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff fff0 	bl	80022c8 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffe0 	bl	80022c8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000098 	.word	0x20000098

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002464:	f7ff ff90 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff49 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff5e 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff90 	bl	80023dc <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5f 	bl	8002388 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffb0 	bl	8002440 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b08b      	sub	sp, #44	; 0x2c
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fe:	e179      	b.n	80027f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002500:	2201      	movs	r2, #1
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 8168 	bne.w	80027ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a96      	ldr	r2, [pc, #600]	; (800277c <HAL_GPIO_Init+0x290>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d05e      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002528:	4a94      	ldr	r2, [pc, #592]	; (800277c <HAL_GPIO_Init+0x290>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d875      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 800252e:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_GPIO_Init+0x294>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d058      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002534:	4a92      	ldr	r2, [pc, #584]	; (8002780 <HAL_GPIO_Init+0x294>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d86f      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 800253a:	4a92      	ldr	r2, [pc, #584]	; (8002784 <HAL_GPIO_Init+0x298>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d052      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002540:	4a90      	ldr	r2, [pc, #576]	; (8002784 <HAL_GPIO_Init+0x298>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d869      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 8002546:	4a90      	ldr	r2, [pc, #576]	; (8002788 <HAL_GPIO_Init+0x29c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d04c      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 800254c:	4a8e      	ldr	r2, [pc, #568]	; (8002788 <HAL_GPIO_Init+0x29c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d863      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 8002552:	4a8e      	ldr	r2, [pc, #568]	; (800278c <HAL_GPIO_Init+0x2a0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d046      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002558:	4a8c      	ldr	r2, [pc, #560]	; (800278c <HAL_GPIO_Init+0x2a0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d85d      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 800255e:	2b12      	cmp	r3, #18
 8002560:	d82a      	bhi.n	80025b8 <HAL_GPIO_Init+0xcc>
 8002562:	2b12      	cmp	r3, #18
 8002564:	d859      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <HAL_GPIO_Init+0x80>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	080025e7 	.word	0x080025e7
 8002570:	080025c1 	.word	0x080025c1
 8002574:	080025d3 	.word	0x080025d3
 8002578:	08002615 	.word	0x08002615
 800257c:	0800261b 	.word	0x0800261b
 8002580:	0800261b 	.word	0x0800261b
 8002584:	0800261b 	.word	0x0800261b
 8002588:	0800261b 	.word	0x0800261b
 800258c:	0800261b 	.word	0x0800261b
 8002590:	0800261b 	.word	0x0800261b
 8002594:	0800261b 	.word	0x0800261b
 8002598:	0800261b 	.word	0x0800261b
 800259c:	0800261b 	.word	0x0800261b
 80025a0:	0800261b 	.word	0x0800261b
 80025a4:	0800261b 	.word	0x0800261b
 80025a8:	0800261b 	.word	0x0800261b
 80025ac:	0800261b 	.word	0x0800261b
 80025b0:	080025c9 	.word	0x080025c9
 80025b4:	080025dd 	.word	0x080025dd
 80025b8:	4a75      	ldr	r2, [pc, #468]	; (8002790 <HAL_GPIO_Init+0x2a4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025be:	e02c      	b.n	800261a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	623b      	str	r3, [r7, #32]
          break;
 80025c6:	e029      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	3304      	adds	r3, #4
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e024      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	3308      	adds	r3, #8
 80025d8:	623b      	str	r3, [r7, #32]
          break;
 80025da:	e01f      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	330c      	adds	r3, #12
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e01a      	b.n	800261c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ee:	2304      	movs	r3, #4
 80025f0:	623b      	str	r3, [r7, #32]
          break;
 80025f2:	e013      	b.n	800261c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025fc:	2308      	movs	r3, #8
 80025fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	611a      	str	r2, [r3, #16]
          break;
 8002606:	e009      	b.n	800261c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2308      	movs	r3, #8
 800260a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	615a      	str	r2, [r3, #20]
          break;
 8002612:	e003      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x130>
          break;
 800261a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2bff      	cmp	r3, #255	; 0xff
 8002620:	d801      	bhi.n	8002626 <HAL_GPIO_Init+0x13a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	e001      	b.n	800262a <HAL_GPIO_Init+0x13e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d802      	bhi.n	8002638 <HAL_GPIO_Init+0x14c>
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0x152>
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	3b08      	subs	r3, #8
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	210f      	movs	r1, #15
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	6a39      	ldr	r1, [r7, #32]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	431a      	orrs	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80c1 	beq.w	80027ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800266c:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_GPIO_Init+0x2a8>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_GPIO_Init+0x2a8>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_GPIO_Init+0x2a8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002684:	4a44      	ldr	r2, [pc, #272]	; (8002798 <HAL_GPIO_Init+0x2ac>)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3c      	ldr	r2, [pc, #240]	; (800279c <HAL_GPIO_Init+0x2b0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d01f      	beq.n	80026f0 <HAL_GPIO_Init+0x204>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3b      	ldr	r2, [pc, #236]	; (80027a0 <HAL_GPIO_Init+0x2b4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d019      	beq.n	80026ec <HAL_GPIO_Init+0x200>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_GPIO_Init+0x2b8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_GPIO_Init+0x1fc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <HAL_GPIO_Init+0x2bc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00d      	beq.n	80026e4 <HAL_GPIO_Init+0x1f8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a38      	ldr	r2, [pc, #224]	; (80027ac <HAL_GPIO_Init+0x2c0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d007      	beq.n	80026e0 <HAL_GPIO_Init+0x1f4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <HAL_GPIO_Init+0x2c4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d101      	bne.n	80026dc <HAL_GPIO_Init+0x1f0>
 80026d8:	2305      	movs	r3, #5
 80026da:	e00a      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026dc:	2306      	movs	r3, #6
 80026de:	e008      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026e0:	2304      	movs	r3, #4
 80026e2:	e006      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026e4:	2303      	movs	r3, #3
 80026e6:	e004      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e002      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026f0:	2300      	movs	r3, #0
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	f002 0203 	and.w	r2, r2, #3
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	4093      	lsls	r3, r2
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002702:	4925      	ldr	r1, [pc, #148]	; (8002798 <HAL_GPIO_Init+0x2ac>)
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4924      	ldr	r1, [pc, #144]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	43db      	mvns	r3, r3
 8002732:	4920      	ldr	r1, [pc, #128]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 8002734:	4013      	ands	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	491a      	ldr	r1, [pc, #104]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	43db      	mvns	r3, r3
 800275a:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 800275c:	4013      	ands	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d025      	beq.n	80027b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
 8002778:	e025      	b.n	80027c6 <HAL_GPIO_Init+0x2da>
 800277a:	bf00      	nop
 800277c:	10320000 	.word	0x10320000
 8002780:	10310000 	.word	0x10310000
 8002784:	10220000 	.word	0x10220000
 8002788:	10210000 	.word	0x10210000
 800278c:	10120000 	.word	0x10120000
 8002790:	10110000 	.word	0x10110000
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	40010800 	.word	0x40010800
 80027a0:	40010c00 	.word	0x40010c00
 80027a4:	40011000 	.word	0x40011000
 80027a8:	40011400 	.word	0x40011400
 80027ac:	40011800 	.word	0x40011800
 80027b0:	40011c00 	.word	0x40011c00
 80027b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_GPIO_Init+0x324>)
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	43db      	mvns	r3, r3
 80027c0:	4913      	ldr	r1, [pc, #76]	; (8002810 <HAL_GPIO_Init+0x324>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_GPIO_Init+0x324>)
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_GPIO_Init+0x324>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60cb      	str	r3, [r1, #12]
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_GPIO_Init+0x324>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4909      	ldr	r1, [pc, #36]	; (8002810 <HAL_GPIO_Init+0x324>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3301      	adds	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f47f ae7e 	bne.w	8002500 <HAL_GPIO_Init+0x14>
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	372c      	adds	r7, #44	; 0x2c
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e12b      	b.n	8002aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fb32 	bl	8001ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a8:	f001 fba0 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a81      	ldr	r2, [pc, #516]	; (8002ab8 <HAL_I2C_Init+0x274>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d807      	bhi.n	80028c8 <HAL_I2C_Init+0x84>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a80      	ldr	r2, [pc, #512]	; (8002abc <HAL_I2C_Init+0x278>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf94      	ite	ls
 80028c0:	2301      	movls	r3, #1
 80028c2:	2300      	movhi	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e006      	b.n	80028d6 <HAL_I2C_Init+0x92>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a7d      	ldr	r2, [pc, #500]	; (8002ac0 <HAL_I2C_Init+0x27c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0e7      	b.n	8002aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <HAL_I2C_Init+0x280>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a6a      	ldr	r2, [pc, #424]	; (8002ab8 <HAL_I2C_Init+0x274>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d802      	bhi.n	8002918 <HAL_I2C_Init+0xd4>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	e009      	b.n	800292c <HAL_I2C_Init+0xe8>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_I2C_Init+0x284>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	3301      	adds	r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800293e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	495c      	ldr	r1, [pc, #368]	; (8002ab8 <HAL_I2C_Init+0x274>)
 8002948:	428b      	cmp	r3, r1
 800294a:	d819      	bhi.n	8002980 <HAL_I2C_Init+0x13c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e59      	subs	r1, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fbb1 f3f3 	udiv	r3, r1, r3
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002960:	400b      	ands	r3, r1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_I2C_Init+0x138>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e59      	subs	r1, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb1 f3f3 	udiv	r3, r1, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	e051      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 800297c:	2304      	movs	r3, #4
 800297e:	e04f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <HAL_I2C_Init+0x168>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e012      	b.n	80029d2 <HAL_I2C_Init+0x18e>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	0099      	lsls	r1, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Init+0x196>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e022      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10e      	bne.n	8002a00 <HAL_I2C_Init+0x1bc>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e58      	subs	r0, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fe:	e00f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6809      	ldr	r1, [r1, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6911      	ldr	r1, [r2, #16]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	000186a0 	.word	0x000186a0
 8002abc:	001e847f 	.word	0x001e847f
 8002ac0:	003d08ff 	.word	0x003d08ff
 8002ac4:	431bde83 	.word	0x431bde83
 8002ac8:	10624dd3 	.word	0x10624dd3

08002acc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	813b      	strh	r3, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae6:	f7ff fbef 	bl	80022c8 <HAL_GetTick>
 8002aea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	f040 80d9 	bne.w	8002cac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2319      	movs	r3, #25
 8002b00:	2201      	movs	r2, #1
 8002b02:	496d      	ldr	r1, [pc, #436]	; (8002cb8 <HAL_I2C_Mem_Write+0x1ec>)
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fcc1 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0cc      	b.n	8002cae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2C_Mem_Write+0x56>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0c5      	b.n	8002cae <HAL_I2C_Mem_Write+0x1e2>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d007      	beq.n	8002b48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2221      	movs	r2, #33	; 0x21
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_I2C_Mem_Write+0x1f0>)
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b8a:	88f8      	ldrh	r0, [r7, #6]
 8002b8c:	893a      	ldrh	r2, [r7, #8]
 8002b8e:	8979      	ldrh	r1, [r7, #10]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4603      	mov	r3, r0
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 faf8 	bl	8003190 <I2C_RequestMemoryWrite>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d052      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e081      	b.n	8002cae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fd42 	bl	8003638 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d107      	bne.n	8002bd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06b      	b.n	8002cae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	781a      	ldrb	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d11b      	bne.n	8002c4c <HAL_I2C_Mem_Write+0x180>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d017      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1aa      	bne.n	8002baa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fd2e 	bl	80036ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d107      	bne.n	8002c7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e016      	b.n	8002cae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	00100002 	.word	0x00100002
 8002cbc:	ffff0000 	.word	0xffff0000

08002cc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	; 0x30
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	817b      	strh	r3, [r7, #10]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	813b      	strh	r3, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cde:	f7ff faf3 	bl	80022c8 <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	f040 8244 	bne.w	800317a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2319      	movs	r3, #25
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4982      	ldr	r1, [pc, #520]	; (8002f04 <HAL_I2C_Mem_Read+0x244>)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fbc5 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e237      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_I2C_Mem_Read+0x5a>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e230      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d007      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2222      	movs	r2, #34	; 0x22
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	; 0x40
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a62      	ldr	r2, [pc, #392]	; (8002f08 <HAL_I2C_Mem_Read+0x248>)
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d82:	88f8      	ldrh	r0, [r7, #6]
 8002d84:	893a      	ldrh	r2, [r7, #8]
 8002d86:	8979      	ldrh	r1, [r7, #10]
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa92 	bl	80032bc <I2C_RequestMemoryRead>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e1ec      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d113      	bne.n	8002dd2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e1c0      	b.n	8003154 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d11e      	bne.n	8002e18 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dea:	b672      	cpsid	i
}
 8002dec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e14:	b662      	cpsie	i
}
 8002e16:	e035      	b.n	8002e84 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11e      	bne.n	8002e5e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e30:	b672      	cpsid	i
}
 8002e32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e5a:	b662      	cpsie	i
}
 8002e5c:	e012      	b.n	8002e84 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e6c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e84:	e166      	b.n	8003154 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	f200 811f 	bhi.w	80030ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d123      	bne.n	8002ee0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fc4d 	bl	800373c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e167      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ede:	e139      	b.n	8003154 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d152      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4906      	ldr	r1, [pc, #24]	; (8002f0c <HAL_I2C_Mem_Read+0x24c>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 faca 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e13c      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
 8002f02:	bf00      	nop
 8002f04:	00100002 	.word	0x00100002
 8002f08:	ffff0000 	.word	0xffff0000
 8002f0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f10:	b672      	cpsid	i
}
 8002f12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f56:	b662      	cpsie	i
}
 8002f58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f8c:	e0e2      	b.n	8003154 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	2200      	movs	r2, #0
 8002f96:	497b      	ldr	r1, [pc, #492]	; (8003184 <HAL_I2C_Mem_Read+0x4c4>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fa77 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0e9      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fee:	4b66      	ldr	r3, [pc, #408]	; (8003188 <HAL_I2C_Mem_Read+0x4c8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	08db      	lsrs	r3, r3, #3
 8002ff4:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_I2C_Mem_Read+0x4cc>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0a1a      	lsrs	r2, r3, #8
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00da      	lsls	r2, r3, #3
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	3b01      	subs	r3, #1
 800300c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d118      	bne.n	8003046 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0220 	orr.w	r2, r3, #32
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003036:	b662      	cpsie	i
}
 8003038:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e09a      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d1d9      	bne.n	8003008 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003096:	b662      	cpsie	i
}
 8003098:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030cc:	e042      	b.n	8003154 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fb32 	bl	800373c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e04c      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d118      	bne.n	8003154 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	f47f ae94 	bne.w	8002e86 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3728      	adds	r7, #40	; 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	00010004 	.word	0x00010004
 8003188:	20000090 	.word	0x20000090
 800318c:	14f8b589 	.word	0x14f8b589

08003190 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f960 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e0:	d103      	bne.n	80031ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e05f      	b.n	80032ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	492d      	ldr	r1, [pc, #180]	; (80032b8 <I2C_RequestMemoryWrite+0x128>)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f998 	bl	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e04c      	b.n	80032ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800322a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322c:	6a39      	ldr	r1, [r7, #32]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa02 	bl	8003638 <I2C_WaitOnTXEFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b04      	cmp	r3, #4
 8003240:	d107      	bne.n	8003252 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e02b      	b.n	80032ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d105      	bne.n	8003268 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	e021      	b.n	80032ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003268:	893b      	ldrh	r3, [r7, #8]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	b29b      	uxth	r3, r3
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6a39      	ldr	r1, [r7, #32]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f9dc 	bl	8003638 <I2C_WaitOnTXEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b04      	cmp	r3, #4
 800328c:	d107      	bne.n	800329e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e005      	b.n	80032ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00010002 	.word	0x00010002

080032bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f8c2 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d103      	bne.n	8003326 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0aa      	b.n	8003480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	4952      	ldr	r1, [pc, #328]	; (8003488 <I2C_RequestMemoryRead+0x1cc>)
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f8fa 	bl	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e097      	b.n	8003480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	6a39      	ldr	r1, [r7, #32]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f964 	bl	8003638 <I2C_WaitOnTXEFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b04      	cmp	r3, #4
 800337c:	d107      	bne.n	800338e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e076      	b.n	8003480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003398:	893b      	ldrh	r3, [r7, #8]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	e021      	b.n	80033e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033a4:	893b      	ldrh	r3, [r7, #8]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f93e 	bl	8003638 <I2C_WaitOnTXEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d107      	bne.n	80033da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e050      	b.n	8003480 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033de:	893b      	ldrh	r3, [r7, #8]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ea:	6a39      	ldr	r1, [r7, #32]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f923 	bl	8003638 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d107      	bne.n	8003410 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e035      	b.n	8003480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003422:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	2200      	movs	r2, #0
 800342c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f82b 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344a:	d103      	bne.n	8003454 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e013      	b.n	8003480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	4906      	ldr	r1, [pc, #24]	; (8003488 <I2C_RequestMemoryRead+0x1cc>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f863 	bl	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	00010002 	.word	0x00010002

0800348c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349c:	e025      	b.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a4:	d021      	beq.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe ff0f 	bl	80022c8 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e023      	b.n	8003532 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10d      	bne.n	8003510 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	e00c      	b.n	800352a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d0b6      	beq.n	800349e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003548:	e051      	b.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003558:	d123      	bne.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003568:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003572:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f043 0204 	orr.w	r2, r3, #4
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e046      	b.n	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a8:	d021      	beq.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7fe fe8d 	bl	80022c8 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d116      	bne.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e020      	b.n	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d10c      	bne.n	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	43da      	mvns	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	bf14      	ite	ne
 800360a:	2301      	movne	r3, #1
 800360c:	2300      	moveq	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	e00b      	b.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	43da      	mvns	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4013      	ands	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d18d      	bne.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003644:	e02d      	b.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8ce 	bl	80037e8 <I2C_IsAcknowledgeFailed>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e02d      	b.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365c:	d021      	beq.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fe fe33 	bl	80022c8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d116      	bne.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e007      	b.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d1ca      	bne.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c6:	e02d      	b.n	8003724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f88d 	bl	80037e8 <I2C_IsAcknowledgeFailed>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e02d      	b.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036de:	d021      	beq.n	8003724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe fdf2 	bl	80022c8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d116      	bne.n	8003724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e007      	b.n	8003734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d1ca      	bne.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003748:	e042      	b.n	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	d119      	bne.n	800378c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0210 	mvn.w	r2, #16
 8003760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e029      	b.n	80037e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378c:	f7fe fd9c 	bl	80022c8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	429a      	cmp	r2, r3
 800379a:	d302      	bcc.n	80037a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d1b5      	bne.n	800374a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fe:	d11b      	bne.n	8003838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e272      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8087 	beq.w	8003972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003864:	4b92      	ldr	r3, [pc, #584]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b04      	cmp	r3, #4
 800386e:	d00c      	beq.n	800388a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003870:	4b8f      	ldr	r3, [pc, #572]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d112      	bne.n	80038a2 <HAL_RCC_OscConfig+0x5e>
 800387c:	4b8c      	ldr	r3, [pc, #560]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d10b      	bne.n	80038a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d06c      	beq.n	8003970 <HAL_RCC_OscConfig+0x12c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d168      	bne.n	8003970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e24c      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x76>
 80038ac:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a7f      	ldr	r2, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e02e      	b.n	8003918 <HAL_RCC_OscConfig+0xd4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x98>
 80038c2:	4b7b      	ldr	r3, [pc, #492]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7a      	ldr	r2, [pc, #488]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a77      	ldr	r2, [pc, #476]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xd4>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0xbc>
 80038e6:	4b72      	ldr	r3, [pc, #456]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a71      	ldr	r2, [pc, #452]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6f      	ldr	r3, [pc, #444]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6e      	ldr	r2, [pc, #440]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xd4>
 8003900:	4b6b      	ldr	r3, [pc, #428]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6a      	ldr	r2, [pc, #424]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fcd2 	bl	80022c8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fcce 	bl	80022c8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e200      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xe4>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fcbe 	bl	80022c8 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003950:	f7fe fcba 	bl	80022c8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1ec      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x10c>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397e:	4b4c      	ldr	r3, [pc, #304]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800398a:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x18c>
 8003996:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x176>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1c0      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4939      	ldr	r1, [pc, #228]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	e03a      	b.n	8003a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fc73 	bl	80022c8 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e6:	f7fe fc6f 	bl	80022c8 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1a1      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4927      	ldr	r1, [pc, #156]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe fc52 	bl	80022c8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe fc4e 	bl	80022c8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e180      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03a      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d019      	beq.n	8003a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7fe fc32 	bl	80022c8 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe fc2e 	bl	80022c8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e160      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a86:	2001      	movs	r0, #1
 8003a88:	f000 fac4 	bl	8004014 <RCC_Delay>
 8003a8c:	e01c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <HAL_RCC_OscConfig+0x274>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7fe fc18 	bl	80022c8 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9a:	e00f      	b.n	8003abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fc14 	bl	80022c8 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d908      	bls.n	8003abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e146      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	42420000 	.word	0x42420000
 8003ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abc:	4b92      	ldr	r3, [pc, #584]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e9      	bne.n	8003a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80a6 	beq.w	8003c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ada:	4b8b      	ldr	r3, [pc, #556]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	4b88      	ldr	r3, [pc, #544]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4a87      	ldr	r2, [pc, #540]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af0:	61d3      	str	r3, [r2, #28]
 8003af2:	4b85      	ldr	r3, [pc, #532]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afe:	2301      	movs	r3, #1
 8003b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	4b82      	ldr	r3, [pc, #520]	; (8003d0c <HAL_RCC_OscConfig+0x4c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d118      	bne.n	8003b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0e:	4b7f      	ldr	r3, [pc, #508]	; (8003d0c <HAL_RCC_OscConfig+0x4c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a7e      	ldr	r2, [pc, #504]	; (8003d0c <HAL_RCC_OscConfig+0x4c8>)
 8003b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fbd5 	bl	80022c8 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b22:	f7fe fbd1 	bl	80022c8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	; 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e103      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	4b75      	ldr	r3, [pc, #468]	; (8003d0c <HAL_RCC_OscConfig+0x4c8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_OscConfig+0x312>
 8003b48:	4b6f      	ldr	r3, [pc, #444]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6213      	str	r3, [r2, #32]
 8003b54:	e02d      	b.n	8003bb2 <HAL_RCC_OscConfig+0x36e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x334>
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a66      	ldr	r2, [pc, #408]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	6213      	str	r3, [r2, #32]
 8003b76:	e01c      	b.n	8003bb2 <HAL_RCC_OscConfig+0x36e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCC_OscConfig+0x356>
 8003b80:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a60      	ldr	r2, [pc, #384]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	4b5e      	ldr	r3, [pc, #376]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4a5d      	ldr	r2, [pc, #372]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6213      	str	r3, [r2, #32]
 8003b98:	e00b      	b.n	8003bb2 <HAL_RCC_OscConfig+0x36e>
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a5a      	ldr	r2, [pc, #360]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6213      	str	r3, [r2, #32]
 8003ba6:	4b58      	ldr	r3, [pc, #352]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	f023 0304 	bic.w	r3, r3, #4
 8003bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d015      	beq.n	8003be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fe fb85 	bl	80022c8 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fe fb81 	bl	80022c8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e0b1      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ee      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x37e>
 8003be4:	e014      	b.n	8003c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be6:	f7fe fb6f 	bl	80022c8 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fe fb6b 	bl	80022c8 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e09b      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ee      	bne.n	8003bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d105      	bne.n	8003c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4b3c      	ldr	r3, [pc, #240]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8087 	beq.w	8003d3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c2c:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d061      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d146      	bne.n	8003cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fe fb3f 	bl	80022c8 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe fb3b 	bl	80022c8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e06d      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c60:	4b29      	ldr	r3, [pc, #164]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d108      	bne.n	8003c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4921      	ldr	r1, [pc, #132]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a19      	ldr	r1, [r3, #32]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	491b      	ldr	r1, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7fe fb0f 	bl	80022c8 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fe fb0b 	bl	80022c8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e03d      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc0:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x46a>
 8003ccc:	e035      	b.n	8003d3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0x4cc>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe faf8 	bl	80022c8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe faf4 	bl	80022c8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e026      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x498>
 8003cfa:	e01e      	b.n	8003d3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e019      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_OscConfig+0x500>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000

08003d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0d0      	b.n	8003efe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	4965      	ldr	r1, [pc, #404]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0b8      	b.n	8003efe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da4:	4b59      	ldr	r3, [pc, #356]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	494d      	ldr	r1, [pc, #308]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d040      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d115      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e07f      	b.n	8003efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e073      	b.n	8003efe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06b      	b.n	8003efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e26:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4936      	ldr	r1, [pc, #216]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e38:	f7fe fa46 	bl	80022c8 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fe fa42 	bl	80022c8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e053      	b.n	8003efe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 020c 	and.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1eb      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d210      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 0207 	bic.w	r2, r3, #7
 8003e7e:	4922      	ldr	r1, [pc, #136]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e032      	b.n	8003efe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4916      	ldr	r1, [pc, #88]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed6:	f000 f821 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	490a      	ldr	r1, [pc, #40]	; (8003f10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee8:	5ccb      	ldrb	r3, [r1, r3]
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1cc>)
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1d0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe f9a4 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	08007d54 	.word	0x08007d54
 8003f14:	20000090 	.word	0x20000090
 8003f18:	20000094 	.word	0x20000094

08003f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f1c:	b490      	push	{r4, r7}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f22:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f24:	1d3c      	adds	r4, r7, #4
 8003f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f2c:	f240 2301 	movw	r3, #513	; 0x201
 8003f30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f46:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d002      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x40>
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d003      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x46>
 8003f5a:	e02b      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f5e:	623b      	str	r3, [r7, #32]
      break;
 8003f60:	e02b      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	0c9b      	lsrs	r3, r3, #18
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	3328      	adds	r3, #40	; 0x28
 8003f6c:	443b      	add	r3, r7
 8003f6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	0c5b      	lsrs	r3, r3, #17
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	3328      	adds	r3, #40	; 0x28
 8003f8a:	443b      	add	r3, r7
 8003f8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	4a0e      	ldr	r2, [pc, #56]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f96:	fb03 f202 	mul.w	r2, r3, r2
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa2:	e004      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa8:	fb02 f303 	mul.w	r3, r2, r3
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	623b      	str	r3, [r7, #32]
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fb6:	623b      	str	r3, [r7, #32]
      break;
 8003fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fba:	6a3b      	ldr	r3, [r7, #32]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3728      	adds	r7, #40	; 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc90      	pop	{r4, r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	08007754 	.word	0x08007754
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	007a1200 	.word	0x007a1200
 8003fd4:	003d0900 	.word	0x003d0900

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b02      	ldr	r3, [pc, #8]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	20000090 	.word	0x20000090

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff0:	f7ff fff2 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000
 8004010:	08007d64 	.word	0x08007d64

08004014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <RCC_Delay+0x34>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <RCC_Delay+0x38>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0a5b      	lsrs	r3, r3, #9
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004030:	bf00      	nop
  }
  while (Delay --);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	60fa      	str	r2, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f9      	bne.n	8004030 <RCC_Delay+0x1c>
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	20000090 	.word	0x20000090
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <HAL_SRAM_Init+0x1c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406a:	d101      	bne.n	8004070 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e038      	b.n	80040e2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7fd ffa9 	bl	8001fdc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3308      	adds	r3, #8
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f000 f829 	bl	80040ec <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	461a      	mov	r2, r3
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	f000 f88b 	bl	80041c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6858      	ldr	r0, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	f000 f8b6 	bl	8004228 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	6892      	ldr	r2, [r2, #8]
 80040c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	6892      	ldr	r2, [r2, #8]
 80040d0:	f041 0101 	orr.w	r1, r1, #1
 80040d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	f023 0101 	bic.w	r1, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b08      	cmp	r3, #8
 8004114:	d102      	bne.n	800411c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e001      	b.n	8004120 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800412c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004132:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004138:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800413e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004144:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800414a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004150:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004156:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800415c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <FSMC_NORSRAM_Init+0xd0>)
 800417c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004184:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800418c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43db      	mvns	r3, r3
 800419c:	ea02 0103 	and.w	r1, r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4319      	orrs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	0008fb7f 	.word	0x0008fb7f

080041c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	431a      	orrs	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	3b02      	subs	r3, #2
 8004206:	061b      	lsls	r3, r3, #24
 8004208:	431a      	orrs	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	3201      	adds	r2, #1
 8004214:	4319      	orrs	r1, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423c:	d11d      	bne.n	800427a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004248:	4013      	ands	r3, r2
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	6811      	ldr	r1, [r2, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	6852      	ldr	r2, [r2, #4]
 8004252:	0112      	lsls	r2, r2, #4
 8004254:	4311      	orrs	r1, r2
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	0212      	lsls	r2, r2, #8
 800425c:	4311      	orrs	r1, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	6992      	ldr	r2, [r2, #24]
 8004262:	4311      	orrs	r1, r2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	68d2      	ldr	r2, [r2, #12]
 8004268:	0412      	lsls	r2, r2, #16
 800426a:	430a      	orrs	r2, r1
 800426c:	ea43 0102 	orr.w	r1, r3, r2
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004278:	e005      	b.n	8004286 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	cff00000 	.word	0xcff00000

08004298 <__errno>:
 8004298:	4b01      	ldr	r3, [pc, #4]	; (80042a0 <__errno+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	2000009c 	.word	0x2000009c

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	2600      	movs	r6, #0
 80042a8:	4d0c      	ldr	r5, [pc, #48]	; (80042dc <__libc_init_array+0x38>)
 80042aa:	4c0d      	ldr	r4, [pc, #52]	; (80042e0 <__libc_init_array+0x3c>)
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	42a6      	cmp	r6, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	f003 fa32 	bl	800771c <_init>
 80042b8:	2600      	movs	r6, #0
 80042ba:	4d0a      	ldr	r5, [pc, #40]	; (80042e4 <__libc_init_array+0x40>)
 80042bc:	4c0a      	ldr	r4, [pc, #40]	; (80042e8 <__libc_init_array+0x44>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042cc:	4798      	blx	r3
 80042ce:	3601      	adds	r6, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d6:	4798      	blx	r3
 80042d8:	3601      	adds	r6, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	080081b8 	.word	0x080081b8
 80042e0:	080081b8 	.word	0x080081b8
 80042e4:	080081b8 	.word	0x080081b8
 80042e8:	080081bc 	.word	0x080081bc

080042ec <memset>:
 80042ec:	4603      	mov	r3, r0
 80042ee:	4402      	add	r2, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d100      	bne.n	80042f6 <memset+0xa>
 80042f4:	4770      	bx	lr
 80042f6:	f803 1b01 	strb.w	r1, [r3], #1
 80042fa:	e7f9      	b.n	80042f0 <memset+0x4>

080042fc <__cvt>:
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004302:	461f      	mov	r7, r3
 8004304:	bfbb      	ittet	lt
 8004306:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800430a:	461f      	movlt	r7, r3
 800430c:	2300      	movge	r3, #0
 800430e:	232d      	movlt	r3, #45	; 0x2d
 8004310:	b088      	sub	sp, #32
 8004312:	4614      	mov	r4, r2
 8004314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004316:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004318:	7013      	strb	r3, [r2, #0]
 800431a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800431c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004320:	f023 0820 	bic.w	r8, r3, #32
 8004324:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004328:	d005      	beq.n	8004336 <__cvt+0x3a>
 800432a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800432e:	d100      	bne.n	8004332 <__cvt+0x36>
 8004330:	3501      	adds	r5, #1
 8004332:	2302      	movs	r3, #2
 8004334:	e000      	b.n	8004338 <__cvt+0x3c>
 8004336:	2303      	movs	r3, #3
 8004338:	aa07      	add	r2, sp, #28
 800433a:	9204      	str	r2, [sp, #16]
 800433c:	aa06      	add	r2, sp, #24
 800433e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004342:	e9cd 3500 	strd	r3, r5, [sp]
 8004346:	4622      	mov	r2, r4
 8004348:	463b      	mov	r3, r7
 800434a:	f000 fce5 	bl	8004d18 <_dtoa_r>
 800434e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004352:	4606      	mov	r6, r0
 8004354:	d102      	bne.n	800435c <__cvt+0x60>
 8004356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004358:	07db      	lsls	r3, r3, #31
 800435a:	d522      	bpl.n	80043a2 <__cvt+0xa6>
 800435c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004360:	eb06 0905 	add.w	r9, r6, r5
 8004364:	d110      	bne.n	8004388 <__cvt+0x8c>
 8004366:	7833      	ldrb	r3, [r6, #0]
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d10a      	bne.n	8004382 <__cvt+0x86>
 800436c:	2200      	movs	r2, #0
 800436e:	2300      	movs	r3, #0
 8004370:	4620      	mov	r0, r4
 8004372:	4639      	mov	r1, r7
 8004374:	f7fc fb84 	bl	8000a80 <__aeabi_dcmpeq>
 8004378:	b918      	cbnz	r0, 8004382 <__cvt+0x86>
 800437a:	f1c5 0501 	rsb	r5, r5, #1
 800437e:	f8ca 5000 	str.w	r5, [sl]
 8004382:	f8da 3000 	ldr.w	r3, [sl]
 8004386:	4499      	add	r9, r3
 8004388:	2200      	movs	r2, #0
 800438a:	2300      	movs	r3, #0
 800438c:	4620      	mov	r0, r4
 800438e:	4639      	mov	r1, r7
 8004390:	f7fc fb76 	bl	8000a80 <__aeabi_dcmpeq>
 8004394:	b108      	cbz	r0, 800439a <__cvt+0x9e>
 8004396:	f8cd 901c 	str.w	r9, [sp, #28]
 800439a:	2230      	movs	r2, #48	; 0x30
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	454b      	cmp	r3, r9
 80043a0:	d307      	bcc.n	80043b2 <__cvt+0xb6>
 80043a2:	4630      	mov	r0, r6
 80043a4:	9b07      	ldr	r3, [sp, #28]
 80043a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043a8:	1b9b      	subs	r3, r3, r6
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	b008      	add	sp, #32
 80043ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	9107      	str	r1, [sp, #28]
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e7f0      	b.n	800439c <__cvt+0xa0>

080043ba <__exponent>:
 80043ba:	4603      	mov	r3, r0
 80043bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043be:	2900      	cmp	r1, #0
 80043c0:	f803 2b02 	strb.w	r2, [r3], #2
 80043c4:	bfb6      	itet	lt
 80043c6:	222d      	movlt	r2, #45	; 0x2d
 80043c8:	222b      	movge	r2, #43	; 0x2b
 80043ca:	4249      	neglt	r1, r1
 80043cc:	2909      	cmp	r1, #9
 80043ce:	7042      	strb	r2, [r0, #1]
 80043d0:	dd2b      	ble.n	800442a <__exponent+0x70>
 80043d2:	f10d 0407 	add.w	r4, sp, #7
 80043d6:	46a4      	mov	ip, r4
 80043d8:	270a      	movs	r7, #10
 80043da:	fb91 f6f7 	sdiv	r6, r1, r7
 80043de:	460a      	mov	r2, r1
 80043e0:	46a6      	mov	lr, r4
 80043e2:	fb07 1516 	mls	r5, r7, r6, r1
 80043e6:	2a63      	cmp	r2, #99	; 0x63
 80043e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80043ec:	4631      	mov	r1, r6
 80043ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80043f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043f6:	dcf0      	bgt.n	80043da <__exponent+0x20>
 80043f8:	3130      	adds	r1, #48	; 0x30
 80043fa:	f1ae 0502 	sub.w	r5, lr, #2
 80043fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004402:	4629      	mov	r1, r5
 8004404:	1c44      	adds	r4, r0, #1
 8004406:	4561      	cmp	r1, ip
 8004408:	d30a      	bcc.n	8004420 <__exponent+0x66>
 800440a:	f10d 0209 	add.w	r2, sp, #9
 800440e:	eba2 020e 	sub.w	r2, r2, lr
 8004412:	4565      	cmp	r5, ip
 8004414:	bf88      	it	hi
 8004416:	2200      	movhi	r2, #0
 8004418:	4413      	add	r3, r2
 800441a:	1a18      	subs	r0, r3, r0
 800441c:	b003      	add	sp, #12
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004420:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004424:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004428:	e7ed      	b.n	8004406 <__exponent+0x4c>
 800442a:	2330      	movs	r3, #48	; 0x30
 800442c:	3130      	adds	r1, #48	; 0x30
 800442e:	7083      	strb	r3, [r0, #2]
 8004430:	70c1      	strb	r1, [r0, #3]
 8004432:	1d03      	adds	r3, r0, #4
 8004434:	e7f1      	b.n	800441a <__exponent+0x60>
	...

08004438 <_printf_float>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	b091      	sub	sp, #68	; 0x44
 800443e:	460c      	mov	r4, r1
 8004440:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004444:	4616      	mov	r6, r2
 8004446:	461f      	mov	r7, r3
 8004448:	4605      	mov	r5, r0
 800444a:	f001 fa53 	bl	80058f4 <_localeconv_r>
 800444e:	6803      	ldr	r3, [r0, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	9309      	str	r3, [sp, #36]	; 0x24
 8004454:	f7fb fee8 	bl	8000228 <strlen>
 8004458:	2300      	movs	r3, #0
 800445a:	930e      	str	r3, [sp, #56]	; 0x38
 800445c:	f8d8 3000 	ldr.w	r3, [r8]
 8004460:	900a      	str	r0, [sp, #40]	; 0x28
 8004462:	3307      	adds	r3, #7
 8004464:	f023 0307 	bic.w	r3, r3, #7
 8004468:	f103 0208 	add.w	r2, r3, #8
 800446c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004470:	f8d4 b000 	ldr.w	fp, [r4]
 8004474:	f8c8 2000 	str.w	r2, [r8]
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004480:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004484:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004488:	930b      	str	r3, [sp, #44]	; 0x2c
 800448a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800448e:	4640      	mov	r0, r8
 8004490:	4b9c      	ldr	r3, [pc, #624]	; (8004704 <_printf_float+0x2cc>)
 8004492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004494:	f7fc fb26 	bl	8000ae4 <__aeabi_dcmpun>
 8004498:	bb70      	cbnz	r0, 80044f8 <_printf_float+0xc0>
 800449a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800449e:	4640      	mov	r0, r8
 80044a0:	4b98      	ldr	r3, [pc, #608]	; (8004704 <_printf_float+0x2cc>)
 80044a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044a4:	f7fc fb00 	bl	8000aa8 <__aeabi_dcmple>
 80044a8:	bb30      	cbnz	r0, 80044f8 <_printf_float+0xc0>
 80044aa:	2200      	movs	r2, #0
 80044ac:	2300      	movs	r3, #0
 80044ae:	4640      	mov	r0, r8
 80044b0:	4651      	mov	r1, sl
 80044b2:	f7fc faef 	bl	8000a94 <__aeabi_dcmplt>
 80044b6:	b110      	cbz	r0, 80044be <_printf_float+0x86>
 80044b8:	232d      	movs	r3, #45	; 0x2d
 80044ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044be:	4b92      	ldr	r3, [pc, #584]	; (8004708 <_printf_float+0x2d0>)
 80044c0:	4892      	ldr	r0, [pc, #584]	; (800470c <_printf_float+0x2d4>)
 80044c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044c6:	bf94      	ite	ls
 80044c8:	4698      	movls	r8, r3
 80044ca:	4680      	movhi	r8, r0
 80044cc:	2303      	movs	r3, #3
 80044ce:	f04f 0a00 	mov.w	sl, #0
 80044d2:	6123      	str	r3, [r4, #16]
 80044d4:	f02b 0304 	bic.w	r3, fp, #4
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	4633      	mov	r3, r6
 80044dc:	4621      	mov	r1, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	9700      	str	r7, [sp, #0]
 80044e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80044e4:	f000 f9d4 	bl	8004890 <_printf_common>
 80044e8:	3001      	adds	r0, #1
 80044ea:	f040 8090 	bne.w	800460e <_printf_float+0x1d6>
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f2:	b011      	add	sp, #68	; 0x44
 80044f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f8:	4642      	mov	r2, r8
 80044fa:	4653      	mov	r3, sl
 80044fc:	4640      	mov	r0, r8
 80044fe:	4651      	mov	r1, sl
 8004500:	f7fc faf0 	bl	8000ae4 <__aeabi_dcmpun>
 8004504:	b148      	cbz	r0, 800451a <_printf_float+0xe2>
 8004506:	f1ba 0f00 	cmp.w	sl, #0
 800450a:	bfb8      	it	lt
 800450c:	232d      	movlt	r3, #45	; 0x2d
 800450e:	4880      	ldr	r0, [pc, #512]	; (8004710 <_printf_float+0x2d8>)
 8004510:	bfb8      	it	lt
 8004512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004516:	4b7f      	ldr	r3, [pc, #508]	; (8004714 <_printf_float+0x2dc>)
 8004518:	e7d3      	b.n	80044c2 <_printf_float+0x8a>
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	d142      	bne.n	80045aa <_printf_float+0x172>
 8004524:	2306      	movs	r3, #6
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	9206      	str	r2, [sp, #24]
 800452c:	aa0e      	add	r2, sp, #56	; 0x38
 800452e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004532:	aa0d      	add	r2, sp, #52	; 0x34
 8004534:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004538:	9203      	str	r2, [sp, #12]
 800453a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800453e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	6863      	ldr	r3, [r4, #4]
 8004546:	4642      	mov	r2, r8
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4628      	mov	r0, r5
 800454c:	4653      	mov	r3, sl
 800454e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004550:	f7ff fed4 	bl	80042fc <__cvt>
 8004554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004556:	4680      	mov	r8, r0
 8004558:	2947      	cmp	r1, #71	; 0x47
 800455a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800455c:	d108      	bne.n	8004570 <_printf_float+0x138>
 800455e:	1cc8      	adds	r0, r1, #3
 8004560:	db02      	blt.n	8004568 <_printf_float+0x130>
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	4299      	cmp	r1, r3
 8004566:	dd40      	ble.n	80045ea <_printf_float+0x1b2>
 8004568:	f1a9 0902 	sub.w	r9, r9, #2
 800456c:	fa5f f989 	uxtb.w	r9, r9
 8004570:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004574:	d81f      	bhi.n	80045b6 <_printf_float+0x17e>
 8004576:	464a      	mov	r2, r9
 8004578:	3901      	subs	r1, #1
 800457a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800457e:	910d      	str	r1, [sp, #52]	; 0x34
 8004580:	f7ff ff1b 	bl	80043ba <__exponent>
 8004584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004586:	4682      	mov	sl, r0
 8004588:	1813      	adds	r3, r2, r0
 800458a:	2a01      	cmp	r2, #1
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	dc02      	bgt.n	8004596 <_printf_float+0x15e>
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	07d2      	lsls	r2, r2, #31
 8004594:	d501      	bpl.n	800459a <_printf_float+0x162>
 8004596:	3301      	adds	r3, #1
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d09b      	beq.n	80044da <_printf_float+0xa2>
 80045a2:	232d      	movs	r3, #45	; 0x2d
 80045a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a8:	e797      	b.n	80044da <_printf_float+0xa2>
 80045aa:	2947      	cmp	r1, #71	; 0x47
 80045ac:	d1bc      	bne.n	8004528 <_printf_float+0xf0>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ba      	bne.n	8004528 <_printf_float+0xf0>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e7b7      	b.n	8004526 <_printf_float+0xee>
 80045b6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045ba:	d118      	bne.n	80045ee <_printf_float+0x1b6>
 80045bc:	2900      	cmp	r1, #0
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	dd0b      	ble.n	80045da <_printf_float+0x1a2>
 80045c2:	6121      	str	r1, [r4, #16]
 80045c4:	b913      	cbnz	r3, 80045cc <_printf_float+0x194>
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	07d0      	lsls	r0, r2, #31
 80045ca:	d502      	bpl.n	80045d2 <_printf_float+0x19a>
 80045cc:	3301      	adds	r3, #1
 80045ce:	440b      	add	r3, r1
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	f04f 0a00 	mov.w	sl, #0
 80045d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80045d8:	e7df      	b.n	800459a <_printf_float+0x162>
 80045da:	b913      	cbnz	r3, 80045e2 <_printf_float+0x1aa>
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	07d2      	lsls	r2, r2, #31
 80045e0:	d501      	bpl.n	80045e6 <_printf_float+0x1ae>
 80045e2:	3302      	adds	r3, #2
 80045e4:	e7f4      	b.n	80045d0 <_printf_float+0x198>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e7f2      	b.n	80045d0 <_printf_float+0x198>
 80045ea:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045f0:	4299      	cmp	r1, r3
 80045f2:	db05      	blt.n	8004600 <_printf_float+0x1c8>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	6121      	str	r1, [r4, #16]
 80045f8:	07d8      	lsls	r0, r3, #31
 80045fa:	d5ea      	bpl.n	80045d2 <_printf_float+0x19a>
 80045fc:	1c4b      	adds	r3, r1, #1
 80045fe:	e7e7      	b.n	80045d0 <_printf_float+0x198>
 8004600:	2900      	cmp	r1, #0
 8004602:	bfcc      	ite	gt
 8004604:	2201      	movgt	r2, #1
 8004606:	f1c1 0202 	rsble	r2, r1, #2
 800460a:	4413      	add	r3, r2
 800460c:	e7e0      	b.n	80045d0 <_printf_float+0x198>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	055a      	lsls	r2, r3, #21
 8004612:	d407      	bmi.n	8004624 <_printf_float+0x1ec>
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	4642      	mov	r2, r8
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	d12b      	bne.n	800467a <_printf_float+0x242>
 8004622:	e764      	b.n	80044ee <_printf_float+0xb6>
 8004624:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004628:	f240 80dd 	bls.w	80047e6 <_printf_float+0x3ae>
 800462c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004630:	2200      	movs	r2, #0
 8004632:	2300      	movs	r3, #0
 8004634:	f7fc fa24 	bl	8000a80 <__aeabi_dcmpeq>
 8004638:	2800      	cmp	r0, #0
 800463a:	d033      	beq.n	80046a4 <_printf_float+0x26c>
 800463c:	2301      	movs	r3, #1
 800463e:	4631      	mov	r1, r6
 8004640:	4628      	mov	r0, r5
 8004642:	4a35      	ldr	r2, [pc, #212]	; (8004718 <_printf_float+0x2e0>)
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af51 	beq.w	80044ee <_printf_float+0xb6>
 800464c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004650:	429a      	cmp	r2, r3
 8004652:	db02      	blt.n	800465a <_printf_float+0x222>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07d8      	lsls	r0, r3, #31
 8004658:	d50f      	bpl.n	800467a <_printf_float+0x242>
 800465a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	f43f af42 	beq.w	80044ee <_printf_float+0xb6>
 800466a:	f04f 0800 	mov.w	r8, #0
 800466e:	f104 091a 	add.w	r9, r4, #26
 8004672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004674:	3b01      	subs	r3, #1
 8004676:	4543      	cmp	r3, r8
 8004678:	dc09      	bgt.n	800468e <_printf_float+0x256>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	079b      	lsls	r3, r3, #30
 800467e:	f100 8102 	bmi.w	8004886 <_printf_float+0x44e>
 8004682:	68e0      	ldr	r0, [r4, #12]
 8004684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004686:	4298      	cmp	r0, r3
 8004688:	bfb8      	it	lt
 800468a:	4618      	movlt	r0, r3
 800468c:	e731      	b.n	80044f2 <_printf_float+0xba>
 800468e:	2301      	movs	r3, #1
 8004690:	464a      	mov	r2, r9
 8004692:	4631      	mov	r1, r6
 8004694:	4628      	mov	r0, r5
 8004696:	47b8      	blx	r7
 8004698:	3001      	adds	r0, #1
 800469a:	f43f af28 	beq.w	80044ee <_printf_float+0xb6>
 800469e:	f108 0801 	add.w	r8, r8, #1
 80046a2:	e7e6      	b.n	8004672 <_printf_float+0x23a>
 80046a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	dc38      	bgt.n	800471c <_printf_float+0x2e4>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4631      	mov	r1, r6
 80046ae:	4628      	mov	r0, r5
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <_printf_float+0x2e0>)
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f af1a 	beq.w	80044ee <_printf_float+0xb6>
 80046ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046be:	4313      	orrs	r3, r2
 80046c0:	d102      	bne.n	80046c8 <_printf_float+0x290>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	07d9      	lsls	r1, r3, #31
 80046c6:	d5d8      	bpl.n	800467a <_printf_float+0x242>
 80046c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046cc:	4631      	mov	r1, r6
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	f43f af0b 	beq.w	80044ee <_printf_float+0xb6>
 80046d8:	f04f 0900 	mov.w	r9, #0
 80046dc:	f104 0a1a 	add.w	sl, r4, #26
 80046e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046e2:	425b      	negs	r3, r3
 80046e4:	454b      	cmp	r3, r9
 80046e6:	dc01      	bgt.n	80046ec <_printf_float+0x2b4>
 80046e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ea:	e794      	b.n	8004616 <_printf_float+0x1de>
 80046ec:	2301      	movs	r3, #1
 80046ee:	4652      	mov	r2, sl
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	f43f aef9 	beq.w	80044ee <_printf_float+0xb6>
 80046fc:	f109 0901 	add.w	r9, r9, #1
 8004700:	e7ee      	b.n	80046e0 <_printf_float+0x2a8>
 8004702:	bf00      	nop
 8004704:	7fefffff 	.word	0x7fefffff
 8004708:	08007d70 	.word	0x08007d70
 800470c:	08007d74 	.word	0x08007d74
 8004710:	08007d7c 	.word	0x08007d7c
 8004714:	08007d78 	.word	0x08007d78
 8004718:	08007d80 	.word	0x08007d80
 800471c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800471e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004720:	429a      	cmp	r2, r3
 8004722:	bfa8      	it	ge
 8004724:	461a      	movge	r2, r3
 8004726:	2a00      	cmp	r2, #0
 8004728:	4691      	mov	r9, r2
 800472a:	dc37      	bgt.n	800479c <_printf_float+0x364>
 800472c:	f04f 0b00 	mov.w	fp, #0
 8004730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004734:	f104 021a 	add.w	r2, r4, #26
 8004738:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800473c:	ebaa 0309 	sub.w	r3, sl, r9
 8004740:	455b      	cmp	r3, fp
 8004742:	dc33      	bgt.n	80047ac <_printf_float+0x374>
 8004744:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004748:	429a      	cmp	r2, r3
 800474a:	db3b      	blt.n	80047c4 <_printf_float+0x38c>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	07da      	lsls	r2, r3, #31
 8004750:	d438      	bmi.n	80047c4 <_printf_float+0x38c>
 8004752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004754:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004756:	eba3 020a 	sub.w	r2, r3, sl
 800475a:	eba3 0901 	sub.w	r9, r3, r1
 800475e:	4591      	cmp	r9, r2
 8004760:	bfa8      	it	ge
 8004762:	4691      	movge	r9, r2
 8004764:	f1b9 0f00 	cmp.w	r9, #0
 8004768:	dc34      	bgt.n	80047d4 <_printf_float+0x39c>
 800476a:	f04f 0800 	mov.w	r8, #0
 800476e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004772:	f104 0a1a 	add.w	sl, r4, #26
 8004776:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	eba3 0309 	sub.w	r3, r3, r9
 8004780:	4543      	cmp	r3, r8
 8004782:	f77f af7a 	ble.w	800467a <_printf_float+0x242>
 8004786:	2301      	movs	r3, #1
 8004788:	4652      	mov	r2, sl
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	47b8      	blx	r7
 8004790:	3001      	adds	r0, #1
 8004792:	f43f aeac 	beq.w	80044ee <_printf_float+0xb6>
 8004796:	f108 0801 	add.w	r8, r8, #1
 800479a:	e7ec      	b.n	8004776 <_printf_float+0x33e>
 800479c:	4613      	mov	r3, r2
 800479e:	4631      	mov	r1, r6
 80047a0:	4642      	mov	r2, r8
 80047a2:	4628      	mov	r0, r5
 80047a4:	47b8      	blx	r7
 80047a6:	3001      	adds	r0, #1
 80047a8:	d1c0      	bne.n	800472c <_printf_float+0x2f4>
 80047aa:	e6a0      	b.n	80044ee <_printf_float+0xb6>
 80047ac:	2301      	movs	r3, #1
 80047ae:	4631      	mov	r1, r6
 80047b0:	4628      	mov	r0, r5
 80047b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	f43f ae99 	beq.w	80044ee <_printf_float+0xb6>
 80047bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047be:	f10b 0b01 	add.w	fp, fp, #1
 80047c2:	e7b9      	b.n	8004738 <_printf_float+0x300>
 80047c4:	4631      	mov	r1, r6
 80047c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ca:	4628      	mov	r0, r5
 80047cc:	47b8      	blx	r7
 80047ce:	3001      	adds	r0, #1
 80047d0:	d1bf      	bne.n	8004752 <_printf_float+0x31a>
 80047d2:	e68c      	b.n	80044ee <_printf_float+0xb6>
 80047d4:	464b      	mov	r3, r9
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	eb08 020a 	add.w	r2, r8, sl
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	d1c2      	bne.n	800476a <_printf_float+0x332>
 80047e4:	e683      	b.n	80044ee <_printf_float+0xb6>
 80047e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047e8:	2a01      	cmp	r2, #1
 80047ea:	dc01      	bgt.n	80047f0 <_printf_float+0x3b8>
 80047ec:	07db      	lsls	r3, r3, #31
 80047ee:	d537      	bpl.n	8004860 <_printf_float+0x428>
 80047f0:	2301      	movs	r3, #1
 80047f2:	4642      	mov	r2, r8
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f ae77 	beq.w	80044ee <_printf_float+0xb6>
 8004800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	f43f ae6f 	beq.w	80044ee <_printf_float+0xb6>
 8004810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004814:	2200      	movs	r2, #0
 8004816:	2300      	movs	r3, #0
 8004818:	f7fc f932 	bl	8000a80 <__aeabi_dcmpeq>
 800481c:	b9d8      	cbnz	r0, 8004856 <_printf_float+0x41e>
 800481e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004820:	f108 0201 	add.w	r2, r8, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	47b8      	blx	r7
 800482c:	3001      	adds	r0, #1
 800482e:	d10e      	bne.n	800484e <_printf_float+0x416>
 8004830:	e65d      	b.n	80044ee <_printf_float+0xb6>
 8004832:	2301      	movs	r3, #1
 8004834:	464a      	mov	r2, r9
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f ae56 	beq.w	80044ee <_printf_float+0xb6>
 8004842:	f108 0801 	add.w	r8, r8, #1
 8004846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004848:	3b01      	subs	r3, #1
 800484a:	4543      	cmp	r3, r8
 800484c:	dcf1      	bgt.n	8004832 <_printf_float+0x3fa>
 800484e:	4653      	mov	r3, sl
 8004850:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004854:	e6e0      	b.n	8004618 <_printf_float+0x1e0>
 8004856:	f04f 0800 	mov.w	r8, #0
 800485a:	f104 091a 	add.w	r9, r4, #26
 800485e:	e7f2      	b.n	8004846 <_printf_float+0x40e>
 8004860:	2301      	movs	r3, #1
 8004862:	4642      	mov	r2, r8
 8004864:	e7df      	b.n	8004826 <_printf_float+0x3ee>
 8004866:	2301      	movs	r3, #1
 8004868:	464a      	mov	r2, r9
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f ae3c 	beq.w	80044ee <_printf_float+0xb6>
 8004876:	f108 0801 	add.w	r8, r8, #1
 800487a:	68e3      	ldr	r3, [r4, #12]
 800487c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800487e:	1a5b      	subs	r3, r3, r1
 8004880:	4543      	cmp	r3, r8
 8004882:	dcf0      	bgt.n	8004866 <_printf_float+0x42e>
 8004884:	e6fd      	b.n	8004682 <_printf_float+0x24a>
 8004886:	f04f 0800 	mov.w	r8, #0
 800488a:	f104 0919 	add.w	r9, r4, #25
 800488e:	e7f4      	b.n	800487a <_printf_float+0x442>

08004890 <_printf_common>:
 8004890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	4616      	mov	r6, r2
 8004896:	4699      	mov	r9, r3
 8004898:	688a      	ldr	r2, [r1, #8]
 800489a:	690b      	ldr	r3, [r1, #16]
 800489c:	4607      	mov	r7, r0
 800489e:	4293      	cmp	r3, r2
 80048a0:	bfb8      	it	lt
 80048a2:	4613      	movlt	r3, r2
 80048a4:	6033      	str	r3, [r6, #0]
 80048a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048aa:	460c      	mov	r4, r1
 80048ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048b0:	b10a      	cbz	r2, 80048b6 <_printf_common+0x26>
 80048b2:	3301      	adds	r3, #1
 80048b4:	6033      	str	r3, [r6, #0]
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	0699      	lsls	r1, r3, #26
 80048ba:	bf42      	ittt	mi
 80048bc:	6833      	ldrmi	r3, [r6, #0]
 80048be:	3302      	addmi	r3, #2
 80048c0:	6033      	strmi	r3, [r6, #0]
 80048c2:	6825      	ldr	r5, [r4, #0]
 80048c4:	f015 0506 	ands.w	r5, r5, #6
 80048c8:	d106      	bne.n	80048d8 <_printf_common+0x48>
 80048ca:	f104 0a19 	add.w	sl, r4, #25
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	6832      	ldr	r2, [r6, #0]
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	42ab      	cmp	r3, r5
 80048d6:	dc28      	bgt.n	800492a <_printf_common+0x9a>
 80048d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048dc:	1e13      	subs	r3, r2, #0
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	bf18      	it	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	0692      	lsls	r2, r2, #26
 80048e6:	d42d      	bmi.n	8004944 <_printf_common+0xb4>
 80048e8:	4649      	mov	r1, r9
 80048ea:	4638      	mov	r0, r7
 80048ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048f0:	47c0      	blx	r8
 80048f2:	3001      	adds	r0, #1
 80048f4:	d020      	beq.n	8004938 <_printf_common+0xa8>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	68e5      	ldr	r5, [r4, #12]
 80048fa:	f003 0306 	and.w	r3, r3, #6
 80048fe:	2b04      	cmp	r3, #4
 8004900:	bf18      	it	ne
 8004902:	2500      	movne	r5, #0
 8004904:	6832      	ldr	r2, [r6, #0]
 8004906:	f04f 0600 	mov.w	r6, #0
 800490a:	68a3      	ldr	r3, [r4, #8]
 800490c:	bf08      	it	eq
 800490e:	1aad      	subeq	r5, r5, r2
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	bf08      	it	eq
 8004914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004918:	4293      	cmp	r3, r2
 800491a:	bfc4      	itt	gt
 800491c:	1a9b      	subgt	r3, r3, r2
 800491e:	18ed      	addgt	r5, r5, r3
 8004920:	341a      	adds	r4, #26
 8004922:	42b5      	cmp	r5, r6
 8004924:	d11a      	bne.n	800495c <_printf_common+0xcc>
 8004926:	2000      	movs	r0, #0
 8004928:	e008      	b.n	800493c <_printf_common+0xac>
 800492a:	2301      	movs	r3, #1
 800492c:	4652      	mov	r2, sl
 800492e:	4649      	mov	r1, r9
 8004930:	4638      	mov	r0, r7
 8004932:	47c0      	blx	r8
 8004934:	3001      	adds	r0, #1
 8004936:	d103      	bne.n	8004940 <_printf_common+0xb0>
 8004938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800493c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004940:	3501      	adds	r5, #1
 8004942:	e7c4      	b.n	80048ce <_printf_common+0x3e>
 8004944:	2030      	movs	r0, #48	; 0x30
 8004946:	18e1      	adds	r1, r4, r3
 8004948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004952:	4422      	add	r2, r4
 8004954:	3302      	adds	r3, #2
 8004956:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800495a:	e7c5      	b.n	80048e8 <_printf_common+0x58>
 800495c:	2301      	movs	r3, #1
 800495e:	4622      	mov	r2, r4
 8004960:	4649      	mov	r1, r9
 8004962:	4638      	mov	r0, r7
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d0e6      	beq.n	8004938 <_printf_common+0xa8>
 800496a:	3601      	adds	r6, #1
 800496c:	e7d9      	b.n	8004922 <_printf_common+0x92>
	...

08004970 <_printf_i>:
 8004970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	7e0f      	ldrb	r7, [r1, #24]
 8004976:	4691      	mov	r9, r2
 8004978:	2f78      	cmp	r7, #120	; 0x78
 800497a:	4680      	mov	r8, r0
 800497c:	460c      	mov	r4, r1
 800497e:	469a      	mov	sl, r3
 8004980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004986:	d807      	bhi.n	8004998 <_printf_i+0x28>
 8004988:	2f62      	cmp	r7, #98	; 0x62
 800498a:	d80a      	bhi.n	80049a2 <_printf_i+0x32>
 800498c:	2f00      	cmp	r7, #0
 800498e:	f000 80d9 	beq.w	8004b44 <_printf_i+0x1d4>
 8004992:	2f58      	cmp	r7, #88	; 0x58
 8004994:	f000 80a4 	beq.w	8004ae0 <_printf_i+0x170>
 8004998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800499c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049a0:	e03a      	b.n	8004a18 <_printf_i+0xa8>
 80049a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049a6:	2b15      	cmp	r3, #21
 80049a8:	d8f6      	bhi.n	8004998 <_printf_i+0x28>
 80049aa:	a101      	add	r1, pc, #4	; (adr r1, 80049b0 <_printf_i+0x40>)
 80049ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a1d 	.word	0x08004a1d
 80049b8:	08004999 	.word	0x08004999
 80049bc:	08004999 	.word	0x08004999
 80049c0:	08004999 	.word	0x08004999
 80049c4:	08004999 	.word	0x08004999
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004999 	.word	0x08004999
 80049d0:	08004999 	.word	0x08004999
 80049d4:	08004999 	.word	0x08004999
 80049d8:	08004999 	.word	0x08004999
 80049dc:	08004b2b 	.word	0x08004b2b
 80049e0:	08004a4d 	.word	0x08004a4d
 80049e4:	08004b0d 	.word	0x08004b0d
 80049e8:	08004999 	.word	0x08004999
 80049ec:	08004999 	.word	0x08004999
 80049f0:	08004b4d 	.word	0x08004b4d
 80049f4:	08004999 	.word	0x08004999
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	08004999 	.word	0x08004999
 8004a00:	08004999 	.word	0x08004999
 8004a04:	08004b15 	.word	0x08004b15
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0a4      	b.n	8004b66 <_printf_i+0x1f6>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	6829      	ldr	r1, [r5, #0]
 8004a20:	0606      	lsls	r6, r0, #24
 8004a22:	f101 0304 	add.w	r3, r1, #4
 8004a26:	d50a      	bpl.n	8004a3e <_printf_i+0xce>
 8004a28:	680e      	ldr	r6, [r1, #0]
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	da03      	bge.n	8004a38 <_printf_i+0xc8>
 8004a30:	232d      	movs	r3, #45	; 0x2d
 8004a32:	4276      	negs	r6, r6
 8004a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a38:	230a      	movs	r3, #10
 8004a3a:	485e      	ldr	r0, [pc, #376]	; (8004bb4 <_printf_i+0x244>)
 8004a3c:	e019      	b.n	8004a72 <_printf_i+0x102>
 8004a3e:	680e      	ldr	r6, [r1, #0]
 8004a40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	bf18      	it	ne
 8004a48:	b236      	sxthne	r6, r6
 8004a4a:	e7ef      	b.n	8004a2c <_printf_i+0xbc>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	6820      	ldr	r0, [r4, #0]
 8004a50:	1d19      	adds	r1, r3, #4
 8004a52:	6029      	str	r1, [r5, #0]
 8004a54:	0601      	lsls	r1, r0, #24
 8004a56:	d501      	bpl.n	8004a5c <_printf_i+0xec>
 8004a58:	681e      	ldr	r6, [r3, #0]
 8004a5a:	e002      	b.n	8004a62 <_printf_i+0xf2>
 8004a5c:	0646      	lsls	r6, r0, #25
 8004a5e:	d5fb      	bpl.n	8004a58 <_printf_i+0xe8>
 8004a60:	881e      	ldrh	r6, [r3, #0]
 8004a62:	2f6f      	cmp	r7, #111	; 0x6f
 8004a64:	bf0c      	ite	eq
 8004a66:	2308      	moveq	r3, #8
 8004a68:	230a      	movne	r3, #10
 8004a6a:	4852      	ldr	r0, [pc, #328]	; (8004bb4 <_printf_i+0x244>)
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a72:	6865      	ldr	r5, [r4, #4]
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	bfa8      	it	ge
 8004a78:	6821      	ldrge	r1, [r4, #0]
 8004a7a:	60a5      	str	r5, [r4, #8]
 8004a7c:	bfa4      	itt	ge
 8004a7e:	f021 0104 	bicge.w	r1, r1, #4
 8004a82:	6021      	strge	r1, [r4, #0]
 8004a84:	b90e      	cbnz	r6, 8004a8a <_printf_i+0x11a>
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	d04d      	beq.n	8004b26 <_printf_i+0x1b6>
 8004a8a:	4615      	mov	r5, r2
 8004a8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a90:	fb03 6711 	mls	r7, r3, r1, r6
 8004a94:	5dc7      	ldrb	r7, [r0, r7]
 8004a96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a9a:	4637      	mov	r7, r6
 8004a9c:	42bb      	cmp	r3, r7
 8004a9e:	460e      	mov	r6, r1
 8004aa0:	d9f4      	bls.n	8004a8c <_printf_i+0x11c>
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d10b      	bne.n	8004abe <_printf_i+0x14e>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	07de      	lsls	r6, r3, #31
 8004aaa:	d508      	bpl.n	8004abe <_printf_i+0x14e>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	6861      	ldr	r1, [r4, #4]
 8004ab0:	4299      	cmp	r1, r3
 8004ab2:	bfde      	ittt	le
 8004ab4:	2330      	movle	r3, #48	; 0x30
 8004ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004abe:	1b52      	subs	r2, r2, r5
 8004ac0:	6122      	str	r2, [r4, #16]
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	f8cd a000 	str.w	sl, [sp]
 8004acc:	aa03      	add	r2, sp, #12
 8004ace:	f7ff fedf 	bl	8004890 <_printf_common>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d14c      	bne.n	8004b70 <_printf_i+0x200>
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ada:	b004      	add	sp, #16
 8004adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae0:	4834      	ldr	r0, [pc, #208]	; (8004bb4 <_printf_i+0x244>)
 8004ae2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ae6:	6829      	ldr	r1, [r5, #0]
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aee:	6029      	str	r1, [r5, #0]
 8004af0:	061d      	lsls	r5, r3, #24
 8004af2:	d514      	bpl.n	8004b1e <_printf_i+0x1ae>
 8004af4:	07df      	lsls	r7, r3, #31
 8004af6:	bf44      	itt	mi
 8004af8:	f043 0320 	orrmi.w	r3, r3, #32
 8004afc:	6023      	strmi	r3, [r4, #0]
 8004afe:	b91e      	cbnz	r6, 8004b08 <_printf_i+0x198>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	f023 0320 	bic.w	r3, r3, #32
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2310      	movs	r3, #16
 8004b0a:	e7af      	b.n	8004a6c <_printf_i+0xfc>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f043 0320 	orr.w	r3, r3, #32
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	2378      	movs	r3, #120	; 0x78
 8004b16:	4828      	ldr	r0, [pc, #160]	; (8004bb8 <_printf_i+0x248>)
 8004b18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b1c:	e7e3      	b.n	8004ae6 <_printf_i+0x176>
 8004b1e:	0659      	lsls	r1, r3, #25
 8004b20:	bf48      	it	mi
 8004b22:	b2b6      	uxthmi	r6, r6
 8004b24:	e7e6      	b.n	8004af4 <_printf_i+0x184>
 8004b26:	4615      	mov	r5, r2
 8004b28:	e7bb      	b.n	8004aa2 <_printf_i+0x132>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	6826      	ldr	r6, [r4, #0]
 8004b2e:	1d18      	adds	r0, r3, #4
 8004b30:	6961      	ldr	r1, [r4, #20]
 8004b32:	6028      	str	r0, [r5, #0]
 8004b34:	0635      	lsls	r5, r6, #24
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	d501      	bpl.n	8004b3e <_printf_i+0x1ce>
 8004b3a:	6019      	str	r1, [r3, #0]
 8004b3c:	e002      	b.n	8004b44 <_printf_i+0x1d4>
 8004b3e:	0670      	lsls	r0, r6, #25
 8004b40:	d5fb      	bpl.n	8004b3a <_printf_i+0x1ca>
 8004b42:	8019      	strh	r1, [r3, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	4615      	mov	r5, r2
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	e7ba      	b.n	8004ac2 <_printf_i+0x152>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	2100      	movs	r1, #0
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 fed7 	bl	800590c <memchr>
 8004b5e:	b108      	cbz	r0, 8004b64 <_printf_i+0x1f4>
 8004b60:	1b40      	subs	r0, r0, r5
 8004b62:	6060      	str	r0, [r4, #4]
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6e:	e7a8      	b.n	8004ac2 <_printf_i+0x152>
 8004b70:	462a      	mov	r2, r5
 8004b72:	4649      	mov	r1, r9
 8004b74:	4640      	mov	r0, r8
 8004b76:	6923      	ldr	r3, [r4, #16]
 8004b78:	47d0      	blx	sl
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d0ab      	beq.n	8004ad6 <_printf_i+0x166>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	079b      	lsls	r3, r3, #30
 8004b82:	d413      	bmi.n	8004bac <_printf_i+0x23c>
 8004b84:	68e0      	ldr	r0, [r4, #12]
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	4298      	cmp	r0, r3
 8004b8a:	bfb8      	it	lt
 8004b8c:	4618      	movlt	r0, r3
 8004b8e:	e7a4      	b.n	8004ada <_printf_i+0x16a>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4632      	mov	r2, r6
 8004b94:	4649      	mov	r1, r9
 8004b96:	4640      	mov	r0, r8
 8004b98:	47d0      	blx	sl
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d09b      	beq.n	8004ad6 <_printf_i+0x166>
 8004b9e:	3501      	adds	r5, #1
 8004ba0:	68e3      	ldr	r3, [r4, #12]
 8004ba2:	9903      	ldr	r1, [sp, #12]
 8004ba4:	1a5b      	subs	r3, r3, r1
 8004ba6:	42ab      	cmp	r3, r5
 8004ba8:	dcf2      	bgt.n	8004b90 <_printf_i+0x220>
 8004baa:	e7eb      	b.n	8004b84 <_printf_i+0x214>
 8004bac:	2500      	movs	r5, #0
 8004bae:	f104 0619 	add.w	r6, r4, #25
 8004bb2:	e7f5      	b.n	8004ba0 <_printf_i+0x230>
 8004bb4:	08007d82 	.word	0x08007d82
 8004bb8:	08007d93 	.word	0x08007d93

08004bbc <siprintf>:
 8004bbc:	b40e      	push	{r1, r2, r3}
 8004bbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bc2:	b500      	push	{lr}
 8004bc4:	b09c      	sub	sp, #112	; 0x70
 8004bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc8:	9002      	str	r0, [sp, #8]
 8004bca:	9006      	str	r0, [sp, #24]
 8004bcc:	9107      	str	r1, [sp, #28]
 8004bce:	9104      	str	r1, [sp, #16]
 8004bd0:	4808      	ldr	r0, [pc, #32]	; (8004bf4 <siprintf+0x38>)
 8004bd2:	4909      	ldr	r1, [pc, #36]	; (8004bf8 <siprintf+0x3c>)
 8004bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd8:	9105      	str	r1, [sp, #20]
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	a902      	add	r1, sp, #8
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	f001 fb7e 	bl	80062e0 <_svfiprintf_r>
 8004be4:	2200      	movs	r2, #0
 8004be6:	9b02      	ldr	r3, [sp, #8]
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	b01c      	add	sp, #112	; 0x70
 8004bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf0:	b003      	add	sp, #12
 8004bf2:	4770      	bx	lr
 8004bf4:	2000009c 	.word	0x2000009c
 8004bf8:	ffff0208 	.word	0xffff0208

08004bfc <quorem>:
 8004bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	6903      	ldr	r3, [r0, #16]
 8004c02:	690c      	ldr	r4, [r1, #16]
 8004c04:	4607      	mov	r7, r0
 8004c06:	42a3      	cmp	r3, r4
 8004c08:	f2c0 8082 	blt.w	8004d10 <quorem+0x114>
 8004c0c:	3c01      	subs	r4, #1
 8004c0e:	f100 0514 	add.w	r5, r0, #20
 8004c12:	f101 0814 	add.w	r8, r1, #20
 8004c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c24:	3301      	adds	r3, #1
 8004c26:	429a      	cmp	r2, r3
 8004c28:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c34:	d331      	bcc.n	8004c9a <quorem+0x9e>
 8004c36:	f04f 0e00 	mov.w	lr, #0
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	46ac      	mov	ip, r5
 8004c3e:	46f2      	mov	sl, lr
 8004c40:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c44:	b293      	uxth	r3, r2
 8004c46:	fb06 e303 	mla	r3, r6, r3, lr
 8004c4a:	0c12      	lsrs	r2, r2, #16
 8004c4c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	fb06 e202 	mla	r2, r6, r2, lr
 8004c56:	ebaa 0303 	sub.w	r3, sl, r3
 8004c5a:	f8dc a000 	ldr.w	sl, [ip]
 8004c5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c62:	fa1f fa8a 	uxth.w	sl, sl
 8004c66:	4453      	add	r3, sl
 8004c68:	f8dc a000 	ldr.w	sl, [ip]
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c7c:	4581      	cmp	r9, r0
 8004c7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c82:	f84c 3b04 	str.w	r3, [ip], #4
 8004c86:	d2db      	bcs.n	8004c40 <quorem+0x44>
 8004c88:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c8c:	b92b      	cbnz	r3, 8004c9a <quorem+0x9e>
 8004c8e:	9b01      	ldr	r3, [sp, #4]
 8004c90:	3b04      	subs	r3, #4
 8004c92:	429d      	cmp	r5, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	d32f      	bcc.n	8004cf8 <quorem+0xfc>
 8004c98:	613c      	str	r4, [r7, #16]
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f001 f8d0 	bl	8005e40 <__mcmp>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	db25      	blt.n	8004cf0 <quorem+0xf4>
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f04f 0c00 	mov.w	ip, #0
 8004caa:	3601      	adds	r6, #1
 8004cac:	f858 1b04 	ldr.w	r1, [r8], #4
 8004cb0:	f8d0 e000 	ldr.w	lr, [r0]
 8004cb4:	b28b      	uxth	r3, r1
 8004cb6:	ebac 0303 	sub.w	r3, ip, r3
 8004cba:	fa1f f28e 	uxth.w	r2, lr
 8004cbe:	4413      	add	r3, r2
 8004cc0:	0c0a      	lsrs	r2, r1, #16
 8004cc2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cd0:	45c1      	cmp	r9, r8
 8004cd2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cd6:	f840 3b04 	str.w	r3, [r0], #4
 8004cda:	d2e7      	bcs.n	8004cac <quorem+0xb0>
 8004cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ce0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ce4:	b922      	cbnz	r2, 8004cf0 <quorem+0xf4>
 8004ce6:	3b04      	subs	r3, #4
 8004ce8:	429d      	cmp	r5, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	d30a      	bcc.n	8004d04 <quorem+0x108>
 8004cee:	613c      	str	r4, [r7, #16]
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	b003      	add	sp, #12
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	d1cb      	bne.n	8004c98 <quorem+0x9c>
 8004d00:	3c01      	subs	r4, #1
 8004d02:	e7c6      	b.n	8004c92 <quorem+0x96>
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	3b04      	subs	r3, #4
 8004d08:	2a00      	cmp	r2, #0
 8004d0a:	d1f0      	bne.n	8004cee <quorem+0xf2>
 8004d0c:	3c01      	subs	r4, #1
 8004d0e:	e7eb      	b.n	8004ce8 <quorem+0xec>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e7ee      	b.n	8004cf2 <quorem+0xf6>
 8004d14:	0000      	movs	r0, r0
	...

08004d18 <_dtoa_r>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	461f      	mov	r7, r3
 8004d20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d22:	b099      	sub	sp, #100	; 0x64
 8004d24:	4605      	mov	r5, r0
 8004d26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d2e:	b974      	cbnz	r4, 8004d4e <_dtoa_r+0x36>
 8004d30:	2010      	movs	r0, #16
 8004d32:	f000 fde3 	bl	80058fc <malloc>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6268      	str	r0, [r5, #36]	; 0x24
 8004d3a:	b920      	cbnz	r0, 8004d46 <_dtoa_r+0x2e>
 8004d3c:	21ea      	movs	r1, #234	; 0xea
 8004d3e:	4ba8      	ldr	r3, [pc, #672]	; (8004fe0 <_dtoa_r+0x2c8>)
 8004d40:	48a8      	ldr	r0, [pc, #672]	; (8004fe4 <_dtoa_r+0x2cc>)
 8004d42:	f001 fbdd 	bl	8006500 <__assert_func>
 8004d46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d4a:	6004      	str	r4, [r0, #0]
 8004d4c:	60c4      	str	r4, [r0, #12]
 8004d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	b151      	cbz	r1, 8004d6a <_dtoa_r+0x52>
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	2301      	movs	r3, #1
 8004d58:	4093      	lsls	r3, r2
 8004d5a:	604a      	str	r2, [r1, #4]
 8004d5c:	608b      	str	r3, [r1, #8]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 fe30 	bl	80059c4 <_Bfree>
 8004d64:	2200      	movs	r2, #0
 8004d66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	1e3b      	subs	r3, r7, #0
 8004d6c:	bfaf      	iteee	ge
 8004d6e:	2300      	movge	r3, #0
 8004d70:	2201      	movlt	r2, #1
 8004d72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	9305      	strlt	r3, [sp, #20]
 8004d78:	bfa8      	it	ge
 8004d7a:	f8c8 3000 	strge.w	r3, [r8]
 8004d7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d82:	4b99      	ldr	r3, [pc, #612]	; (8004fe8 <_dtoa_r+0x2d0>)
 8004d84:	bfb8      	it	lt
 8004d86:	f8c8 2000 	strlt.w	r2, [r8]
 8004d8a:	ea33 0309 	bics.w	r3, r3, r9
 8004d8e:	d119      	bne.n	8004dc4 <_dtoa_r+0xac>
 8004d90:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d9c:	4333      	orrs	r3, r6
 8004d9e:	f000 857f 	beq.w	80058a0 <_dtoa_r+0xb88>
 8004da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004da4:	b953      	cbnz	r3, 8004dbc <_dtoa_r+0xa4>
 8004da6:	4b91      	ldr	r3, [pc, #580]	; (8004fec <_dtoa_r+0x2d4>)
 8004da8:	e022      	b.n	8004df0 <_dtoa_r+0xd8>
 8004daa:	4b91      	ldr	r3, [pc, #580]	; (8004ff0 <_dtoa_r+0x2d8>)
 8004dac:	9303      	str	r3, [sp, #12]
 8004dae:	3308      	adds	r3, #8
 8004db0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	9803      	ldr	r0, [sp, #12]
 8004db6:	b019      	add	sp, #100	; 0x64
 8004db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbc:	4b8b      	ldr	r3, [pc, #556]	; (8004fec <_dtoa_r+0x2d4>)
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	e7f5      	b.n	8004db0 <_dtoa_r+0x98>
 8004dc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004dc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f7fb fe54 	bl	8000a80 <__aeabi_dcmpeq>
 8004dd8:	4680      	mov	r8, r0
 8004dda:	b158      	cbz	r0, 8004df4 <_dtoa_r+0xdc>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8558 	beq.w	800589a <_dtoa_r+0xb82>
 8004dea:	4882      	ldr	r0, [pc, #520]	; (8004ff4 <_dtoa_r+0x2dc>)
 8004dec:	6018      	str	r0, [r3, #0]
 8004dee:	1e43      	subs	r3, r0, #1
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	e7df      	b.n	8004db4 <_dtoa_r+0x9c>
 8004df4:	ab16      	add	r3, sp, #88	; 0x58
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	ab17      	add	r3, sp, #92	; 0x5c
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e02:	f001 f8c5 	bl	8005f90 <__d2b>
 8004e06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e0a:	4683      	mov	fp, r0
 8004e0c:	2c00      	cmp	r4, #0
 8004e0e:	d07f      	beq.n	8004f10 <_dtoa_r+0x1f8>
 8004e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4b72      	ldr	r3, [pc, #456]	; (8004ff8 <_dtoa_r+0x2e0>)
 8004e2e:	f7fb fa07 	bl	8000240 <__aeabi_dsub>
 8004e32:	a365      	add	r3, pc, #404	; (adr r3, 8004fc8 <_dtoa_r+0x2b0>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f7fb fbba 	bl	80005b0 <__aeabi_dmul>
 8004e3c:	a364      	add	r3, pc, #400	; (adr r3, 8004fd0 <_dtoa_r+0x2b8>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb f9ff 	bl	8000244 <__adddf3>
 8004e46:	4606      	mov	r6, r0
 8004e48:	4620      	mov	r0, r4
 8004e4a:	460f      	mov	r7, r1
 8004e4c:	f7fb fb46 	bl	80004dc <__aeabi_i2d>
 8004e50:	a361      	add	r3, pc, #388	; (adr r3, 8004fd8 <_dtoa_r+0x2c0>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f7fb fbab 	bl	80005b0 <__aeabi_dmul>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4630      	mov	r0, r6
 8004e60:	4639      	mov	r1, r7
 8004e62:	f7fb f9ef 	bl	8000244 <__adddf3>
 8004e66:	4606      	mov	r6, r0
 8004e68:	460f      	mov	r7, r1
 8004e6a:	f7fb fe51 	bl	8000b10 <__aeabi_d2iz>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	4682      	mov	sl, r0
 8004e72:	2300      	movs	r3, #0
 8004e74:	4630      	mov	r0, r6
 8004e76:	4639      	mov	r1, r7
 8004e78:	f7fb fe0c 	bl	8000a94 <__aeabi_dcmplt>
 8004e7c:	b148      	cbz	r0, 8004e92 <_dtoa_r+0x17a>
 8004e7e:	4650      	mov	r0, sl
 8004e80:	f7fb fb2c 	bl	80004dc <__aeabi_i2d>
 8004e84:	4632      	mov	r2, r6
 8004e86:	463b      	mov	r3, r7
 8004e88:	f7fb fdfa 	bl	8000a80 <__aeabi_dcmpeq>
 8004e8c:	b908      	cbnz	r0, 8004e92 <_dtoa_r+0x17a>
 8004e8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e92:	f1ba 0f16 	cmp.w	sl, #22
 8004e96:	d858      	bhi.n	8004f4a <_dtoa_r+0x232>
 8004e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e9c:	4b57      	ldr	r3, [pc, #348]	; (8004ffc <_dtoa_r+0x2e4>)
 8004e9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb fdf5 	bl	8000a94 <__aeabi_dcmplt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d04f      	beq.n	8004f4e <_dtoa_r+0x236>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004eb8:	1b1c      	subs	r4, r3, r4
 8004eba:	1e63      	subs	r3, r4, #1
 8004ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebe:	bf49      	itett	mi
 8004ec0:	f1c4 0301 	rsbmi	r3, r4, #1
 8004ec4:	2300      	movpl	r3, #0
 8004ec6:	9306      	strmi	r3, [sp, #24]
 8004ec8:	2300      	movmi	r3, #0
 8004eca:	bf54      	ite	pl
 8004ecc:	9306      	strpl	r3, [sp, #24]
 8004ece:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ed0:	f1ba 0f00 	cmp.w	sl, #0
 8004ed4:	db3d      	blt.n	8004f52 <_dtoa_r+0x23a>
 8004ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004edc:	4453      	add	r3, sl
 8004ede:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	f200 808c 	bhi.w	8005004 <_dtoa_r+0x2ec>
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	bfc4      	itt	gt
 8004ef0:	3b04      	subgt	r3, #4
 8004ef2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ef6:	bfc8      	it	gt
 8004ef8:	2400      	movgt	r4, #0
 8004efa:	f1a3 0302 	sub.w	r3, r3, #2
 8004efe:	bfd8      	it	le
 8004f00:	2401      	movle	r4, #1
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	f200 808a 	bhi.w	800501c <_dtoa_r+0x304>
 8004f08:	e8df f003 	tbb	[pc, r3]
 8004f0c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004f10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f14:	441c      	add	r4, r3
 8004f16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	bfc3      	ittte	gt
 8004f1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f26:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f2a:	f1c3 0320 	rsble	r3, r3, #32
 8004f2e:	bfc6      	itte	gt
 8004f30:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f34:	4318      	orrgt	r0, r3
 8004f36:	fa06 f003 	lslle.w	r0, r6, r3
 8004f3a:	f7fb fabf 	bl	80004bc <__aeabi_ui2d>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f44:	3c01      	subs	r4, #1
 8004f46:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f48:	e76f      	b.n	8004e2a <_dtoa_r+0x112>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e7b2      	b.n	8004eb4 <_dtoa_r+0x19c>
 8004f4e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f50:	e7b1      	b.n	8004eb6 <_dtoa_r+0x19e>
 8004f52:	9b06      	ldr	r3, [sp, #24]
 8004f54:	eba3 030a 	sub.w	r3, r3, sl
 8004f58:	9306      	str	r3, [sp, #24]
 8004f5a:	f1ca 0300 	rsb	r3, sl, #0
 8004f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f60:	2300      	movs	r3, #0
 8004f62:	930e      	str	r3, [sp, #56]	; 0x38
 8004f64:	e7be      	b.n	8004ee4 <_dtoa_r+0x1cc>
 8004f66:	2300      	movs	r3, #0
 8004f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dc58      	bgt.n	8005022 <_dtoa_r+0x30a>
 8004f70:	f04f 0901 	mov.w	r9, #1
 8004f74:	464b      	mov	r3, r9
 8004f76:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004f7e:	2200      	movs	r2, #0
 8004f80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f82:	6042      	str	r2, [r0, #4]
 8004f84:	2204      	movs	r2, #4
 8004f86:	f102 0614 	add.w	r6, r2, #20
 8004f8a:	429e      	cmp	r6, r3
 8004f8c:	6841      	ldr	r1, [r0, #4]
 8004f8e:	d94e      	bls.n	800502e <_dtoa_r+0x316>
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 fcd7 	bl	8005944 <_Balloc>
 8004f96:	9003      	str	r0, [sp, #12]
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d14c      	bne.n	8005036 <_dtoa_r+0x31e>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fa2:	4b17      	ldr	r3, [pc, #92]	; (8005000 <_dtoa_r+0x2e8>)
 8004fa4:	e6cc      	b.n	8004d40 <_dtoa_r+0x28>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e7de      	b.n	8004f68 <_dtoa_r+0x250>
 8004faa:	2300      	movs	r3, #0
 8004fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fb0:	eb0a 0903 	add.w	r9, sl, r3
 8004fb4:	f109 0301 	add.w	r3, r9, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	9308      	str	r3, [sp, #32]
 8004fbc:	bfb8      	it	lt
 8004fbe:	2301      	movlt	r3, #1
 8004fc0:	e7dd      	b.n	8004f7e <_dtoa_r+0x266>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7f2      	b.n	8004fac <_dtoa_r+0x294>
 8004fc6:	bf00      	nop
 8004fc8:	636f4361 	.word	0x636f4361
 8004fcc:	3fd287a7 	.word	0x3fd287a7
 8004fd0:	8b60c8b3 	.word	0x8b60c8b3
 8004fd4:	3fc68a28 	.word	0x3fc68a28
 8004fd8:	509f79fb 	.word	0x509f79fb
 8004fdc:	3fd34413 	.word	0x3fd34413
 8004fe0:	08007db1 	.word	0x08007db1
 8004fe4:	08007dc8 	.word	0x08007dc8
 8004fe8:	7ff00000 	.word	0x7ff00000
 8004fec:	08007dad 	.word	0x08007dad
 8004ff0:	08007da4 	.word	0x08007da4
 8004ff4:	08007d81 	.word	0x08007d81
 8004ff8:	3ff80000 	.word	0x3ff80000
 8004ffc:	08007eb8 	.word	0x08007eb8
 8005000:	08007e23 	.word	0x08007e23
 8005004:	2401      	movs	r4, #1
 8005006:	2300      	movs	r3, #0
 8005008:	940b      	str	r4, [sp, #44]	; 0x2c
 800500a:	9322      	str	r3, [sp, #136]	; 0x88
 800500c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005010:	2200      	movs	r2, #0
 8005012:	2312      	movs	r3, #18
 8005014:	f8cd 9020 	str.w	r9, [sp, #32]
 8005018:	9223      	str	r2, [sp, #140]	; 0x8c
 800501a:	e7b0      	b.n	8004f7e <_dtoa_r+0x266>
 800501c:	2301      	movs	r3, #1
 800501e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005020:	e7f4      	b.n	800500c <_dtoa_r+0x2f4>
 8005022:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005026:	464b      	mov	r3, r9
 8005028:	f8cd 9020 	str.w	r9, [sp, #32]
 800502c:	e7a7      	b.n	8004f7e <_dtoa_r+0x266>
 800502e:	3101      	adds	r1, #1
 8005030:	6041      	str	r1, [r0, #4]
 8005032:	0052      	lsls	r2, r2, #1
 8005034:	e7a7      	b.n	8004f86 <_dtoa_r+0x26e>
 8005036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005038:	9a03      	ldr	r2, [sp, #12]
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	9b08      	ldr	r3, [sp, #32]
 800503e:	2b0e      	cmp	r3, #14
 8005040:	f200 80a8 	bhi.w	8005194 <_dtoa_r+0x47c>
 8005044:	2c00      	cmp	r4, #0
 8005046:	f000 80a5 	beq.w	8005194 <_dtoa_r+0x47c>
 800504a:	f1ba 0f00 	cmp.w	sl, #0
 800504e:	dd34      	ble.n	80050ba <_dtoa_r+0x3a2>
 8005050:	4a9a      	ldr	r2, [pc, #616]	; (80052bc <_dtoa_r+0x5a4>)
 8005052:	f00a 030f 	and.w	r3, sl, #15
 8005056:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800505a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800505e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005062:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005066:	ea4f 142a 	mov.w	r4, sl, asr #4
 800506a:	d016      	beq.n	800509a <_dtoa_r+0x382>
 800506c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005070:	4b93      	ldr	r3, [pc, #588]	; (80052c0 <_dtoa_r+0x5a8>)
 8005072:	2703      	movs	r7, #3
 8005074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005078:	f7fb fbc4 	bl	8000804 <__aeabi_ddiv>
 800507c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005080:	f004 040f 	and.w	r4, r4, #15
 8005084:	4e8e      	ldr	r6, [pc, #568]	; (80052c0 <_dtoa_r+0x5a8>)
 8005086:	b954      	cbnz	r4, 800509e <_dtoa_r+0x386>
 8005088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800508c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005090:	f7fb fbb8 	bl	8000804 <__aeabi_ddiv>
 8005094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005098:	e029      	b.n	80050ee <_dtoa_r+0x3d6>
 800509a:	2702      	movs	r7, #2
 800509c:	e7f2      	b.n	8005084 <_dtoa_r+0x36c>
 800509e:	07e1      	lsls	r1, r4, #31
 80050a0:	d508      	bpl.n	80050b4 <_dtoa_r+0x39c>
 80050a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050aa:	f7fb fa81 	bl	80005b0 <__aeabi_dmul>
 80050ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050b2:	3701      	adds	r7, #1
 80050b4:	1064      	asrs	r4, r4, #1
 80050b6:	3608      	adds	r6, #8
 80050b8:	e7e5      	b.n	8005086 <_dtoa_r+0x36e>
 80050ba:	f000 80a5 	beq.w	8005208 <_dtoa_r+0x4f0>
 80050be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050c2:	f1ca 0400 	rsb	r4, sl, #0
 80050c6:	4b7d      	ldr	r3, [pc, #500]	; (80052bc <_dtoa_r+0x5a4>)
 80050c8:	f004 020f 	and.w	r2, r4, #15
 80050cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb fa6c 	bl	80005b0 <__aeabi_dmul>
 80050d8:	2702      	movs	r7, #2
 80050da:	2300      	movs	r3, #0
 80050dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e0:	4e77      	ldr	r6, [pc, #476]	; (80052c0 <_dtoa_r+0x5a8>)
 80050e2:	1124      	asrs	r4, r4, #4
 80050e4:	2c00      	cmp	r4, #0
 80050e6:	f040 8084 	bne.w	80051f2 <_dtoa_r+0x4da>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1d2      	bne.n	8005094 <_dtoa_r+0x37c>
 80050ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 808b 	beq.w	800520c <_dtoa_r+0x4f4>
 80050f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005102:	2200      	movs	r2, #0
 8005104:	4b6f      	ldr	r3, [pc, #444]	; (80052c4 <_dtoa_r+0x5ac>)
 8005106:	f7fb fcc5 	bl	8000a94 <__aeabi_dcmplt>
 800510a:	2800      	cmp	r0, #0
 800510c:	d07e      	beq.n	800520c <_dtoa_r+0x4f4>
 800510e:	9b08      	ldr	r3, [sp, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d07b      	beq.n	800520c <_dtoa_r+0x4f4>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dd38      	ble.n	800518c <_dtoa_r+0x474>
 800511a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800511e:	2200      	movs	r2, #0
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <_dtoa_r+0x5b0>)
 8005122:	f7fb fa45 	bl	80005b0 <__aeabi_dmul>
 8005126:	464c      	mov	r4, r9
 8005128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800512c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005130:	3701      	adds	r7, #1
 8005132:	4638      	mov	r0, r7
 8005134:	f7fb f9d2 	bl	80004dc <__aeabi_i2d>
 8005138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800513c:	f7fb fa38 	bl	80005b0 <__aeabi_dmul>
 8005140:	2200      	movs	r2, #0
 8005142:	4b62      	ldr	r3, [pc, #392]	; (80052cc <_dtoa_r+0x5b4>)
 8005144:	f7fb f87e 	bl	8000244 <__adddf3>
 8005148:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800514c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005150:	9611      	str	r6, [sp, #68]	; 0x44
 8005152:	2c00      	cmp	r4, #0
 8005154:	d15d      	bne.n	8005212 <_dtoa_r+0x4fa>
 8005156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800515a:	2200      	movs	r2, #0
 800515c:	4b5c      	ldr	r3, [pc, #368]	; (80052d0 <_dtoa_r+0x5b8>)
 800515e:	f7fb f86f 	bl	8000240 <__aeabi_dsub>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800516a:	4633      	mov	r3, r6
 800516c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800516e:	f7fb fcaf 	bl	8000ad0 <__aeabi_dcmpgt>
 8005172:	2800      	cmp	r0, #0
 8005174:	f040 829c 	bne.w	80056b0 <_dtoa_r+0x998>
 8005178:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800517c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800517e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005182:	f7fb fc87 	bl	8000a94 <__aeabi_dcmplt>
 8005186:	2800      	cmp	r0, #0
 8005188:	f040 8290 	bne.w	80056ac <_dtoa_r+0x994>
 800518c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005190:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005196:	2b00      	cmp	r3, #0
 8005198:	f2c0 8152 	blt.w	8005440 <_dtoa_r+0x728>
 800519c:	f1ba 0f0e 	cmp.w	sl, #14
 80051a0:	f300 814e 	bgt.w	8005440 <_dtoa_r+0x728>
 80051a4:	4b45      	ldr	r3, [pc, #276]	; (80052bc <_dtoa_r+0x5a4>)
 80051a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f280 80db 	bge.w	8005370 <_dtoa_r+0x658>
 80051ba:	9b08      	ldr	r3, [sp, #32]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f300 80d7 	bgt.w	8005370 <_dtoa_r+0x658>
 80051c2:	f040 8272 	bne.w	80056aa <_dtoa_r+0x992>
 80051c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051ca:	2200      	movs	r2, #0
 80051cc:	4b40      	ldr	r3, [pc, #256]	; (80052d0 <_dtoa_r+0x5b8>)
 80051ce:	f7fb f9ef 	bl	80005b0 <__aeabi_dmul>
 80051d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d6:	f7fb fc71 	bl	8000abc <__aeabi_dcmpge>
 80051da:	9c08      	ldr	r4, [sp, #32]
 80051dc:	4626      	mov	r6, r4
 80051de:	2800      	cmp	r0, #0
 80051e0:	f040 8248 	bne.w	8005674 <_dtoa_r+0x95c>
 80051e4:	2331      	movs	r3, #49	; 0x31
 80051e6:	9f03      	ldr	r7, [sp, #12]
 80051e8:	f10a 0a01 	add.w	sl, sl, #1
 80051ec:	f807 3b01 	strb.w	r3, [r7], #1
 80051f0:	e244      	b.n	800567c <_dtoa_r+0x964>
 80051f2:	07e2      	lsls	r2, r4, #31
 80051f4:	d505      	bpl.n	8005202 <_dtoa_r+0x4ea>
 80051f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051fa:	f7fb f9d9 	bl	80005b0 <__aeabi_dmul>
 80051fe:	2301      	movs	r3, #1
 8005200:	3701      	adds	r7, #1
 8005202:	1064      	asrs	r4, r4, #1
 8005204:	3608      	adds	r6, #8
 8005206:	e76d      	b.n	80050e4 <_dtoa_r+0x3cc>
 8005208:	2702      	movs	r7, #2
 800520a:	e770      	b.n	80050ee <_dtoa_r+0x3d6>
 800520c:	46d0      	mov	r8, sl
 800520e:	9c08      	ldr	r4, [sp, #32]
 8005210:	e78f      	b.n	8005132 <_dtoa_r+0x41a>
 8005212:	9903      	ldr	r1, [sp, #12]
 8005214:	4b29      	ldr	r3, [pc, #164]	; (80052bc <_dtoa_r+0x5a4>)
 8005216:	4421      	add	r1, r4
 8005218:	9112      	str	r1, [sp, #72]	; 0x48
 800521a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800521c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005220:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005224:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005228:	2900      	cmp	r1, #0
 800522a:	d055      	beq.n	80052d8 <_dtoa_r+0x5c0>
 800522c:	2000      	movs	r0, #0
 800522e:	4929      	ldr	r1, [pc, #164]	; (80052d4 <_dtoa_r+0x5bc>)
 8005230:	f7fb fae8 	bl	8000804 <__aeabi_ddiv>
 8005234:	463b      	mov	r3, r7
 8005236:	4632      	mov	r2, r6
 8005238:	f7fb f802 	bl	8000240 <__aeabi_dsub>
 800523c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005240:	9f03      	ldr	r7, [sp, #12]
 8005242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005246:	f7fb fc63 	bl	8000b10 <__aeabi_d2iz>
 800524a:	4604      	mov	r4, r0
 800524c:	f7fb f946 	bl	80004dc <__aeabi_i2d>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005258:	f7fa fff2 	bl	8000240 <__aeabi_dsub>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	3430      	adds	r4, #48	; 0x30
 8005262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800526a:	f807 4b01 	strb.w	r4, [r7], #1
 800526e:	f7fb fc11 	bl	8000a94 <__aeabi_dcmplt>
 8005272:	2800      	cmp	r0, #0
 8005274:	d174      	bne.n	8005360 <_dtoa_r+0x648>
 8005276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800527a:	2000      	movs	r0, #0
 800527c:	4911      	ldr	r1, [pc, #68]	; (80052c4 <_dtoa_r+0x5ac>)
 800527e:	f7fa ffdf 	bl	8000240 <__aeabi_dsub>
 8005282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005286:	f7fb fc05 	bl	8000a94 <__aeabi_dcmplt>
 800528a:	2800      	cmp	r0, #0
 800528c:	f040 80b7 	bne.w	80053fe <_dtoa_r+0x6e6>
 8005290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005292:	429f      	cmp	r7, r3
 8005294:	f43f af7a 	beq.w	800518c <_dtoa_r+0x474>
 8005298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800529c:	2200      	movs	r2, #0
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <_dtoa_r+0x5b0>)
 80052a0:	f7fb f986 	bl	80005b0 <__aeabi_dmul>
 80052a4:	2200      	movs	r2, #0
 80052a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <_dtoa_r+0x5b0>)
 80052b0:	f7fb f97e 	bl	80005b0 <__aeabi_dmul>
 80052b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052b8:	e7c3      	b.n	8005242 <_dtoa_r+0x52a>
 80052ba:	bf00      	nop
 80052bc:	08007eb8 	.word	0x08007eb8
 80052c0:	08007e90 	.word	0x08007e90
 80052c4:	3ff00000 	.word	0x3ff00000
 80052c8:	40240000 	.word	0x40240000
 80052cc:	401c0000 	.word	0x401c0000
 80052d0:	40140000 	.word	0x40140000
 80052d4:	3fe00000 	.word	0x3fe00000
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	f7fb f968 	bl	80005b0 <__aeabi_dmul>
 80052e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052e6:	9c03      	ldr	r4, [sp, #12]
 80052e8:	9314      	str	r3, [sp, #80]	; 0x50
 80052ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ee:	f7fb fc0f 	bl	8000b10 <__aeabi_d2iz>
 80052f2:	9015      	str	r0, [sp, #84]	; 0x54
 80052f4:	f7fb f8f2 	bl	80004dc <__aeabi_i2d>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005300:	f7fa ff9e 	bl	8000240 <__aeabi_dsub>
 8005304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005306:	4606      	mov	r6, r0
 8005308:	3330      	adds	r3, #48	; 0x30
 800530a:	f804 3b01 	strb.w	r3, [r4], #1
 800530e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005310:	460f      	mov	r7, r1
 8005312:	429c      	cmp	r4, r3
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	d124      	bne.n	8005364 <_dtoa_r+0x64c>
 800531a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800531e:	4bb0      	ldr	r3, [pc, #704]	; (80055e0 <_dtoa_r+0x8c8>)
 8005320:	f7fa ff90 	bl	8000244 <__adddf3>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4630      	mov	r0, r6
 800532a:	4639      	mov	r1, r7
 800532c:	f7fb fbd0 	bl	8000ad0 <__aeabi_dcmpgt>
 8005330:	2800      	cmp	r0, #0
 8005332:	d163      	bne.n	80053fc <_dtoa_r+0x6e4>
 8005334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005338:	2000      	movs	r0, #0
 800533a:	49a9      	ldr	r1, [pc, #676]	; (80055e0 <_dtoa_r+0x8c8>)
 800533c:	f7fa ff80 	bl	8000240 <__aeabi_dsub>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4630      	mov	r0, r6
 8005346:	4639      	mov	r1, r7
 8005348:	f7fb fba4 	bl	8000a94 <__aeabi_dcmplt>
 800534c:	2800      	cmp	r0, #0
 800534e:	f43f af1d 	beq.w	800518c <_dtoa_r+0x474>
 8005352:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005354:	1e7b      	subs	r3, r7, #1
 8005356:	9314      	str	r3, [sp, #80]	; 0x50
 8005358:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d0f8      	beq.n	8005352 <_dtoa_r+0x63a>
 8005360:	46c2      	mov	sl, r8
 8005362:	e03b      	b.n	80053dc <_dtoa_r+0x6c4>
 8005364:	4b9f      	ldr	r3, [pc, #636]	; (80055e4 <_dtoa_r+0x8cc>)
 8005366:	f7fb f923 	bl	80005b0 <__aeabi_dmul>
 800536a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800536e:	e7bc      	b.n	80052ea <_dtoa_r+0x5d2>
 8005370:	9f03      	ldr	r7, [sp, #12]
 8005372:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005376:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	f7fb fa41 	bl	8000804 <__aeabi_ddiv>
 8005382:	f7fb fbc5 	bl	8000b10 <__aeabi_d2iz>
 8005386:	4604      	mov	r4, r0
 8005388:	f7fb f8a8 	bl	80004dc <__aeabi_i2d>
 800538c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005390:	f7fb f90e 	bl	80005b0 <__aeabi_dmul>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4640      	mov	r0, r8
 800539a:	4649      	mov	r1, r9
 800539c:	f7fa ff50 	bl	8000240 <__aeabi_dsub>
 80053a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80053a4:	f807 6b01 	strb.w	r6, [r7], #1
 80053a8:	9e03      	ldr	r6, [sp, #12]
 80053aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80053ae:	1bbe      	subs	r6, r7, r6
 80053b0:	45b4      	cmp	ip, r6
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	d136      	bne.n	8005426 <_dtoa_r+0x70e>
 80053b8:	f7fa ff44 	bl	8000244 <__adddf3>
 80053bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c0:	4680      	mov	r8, r0
 80053c2:	4689      	mov	r9, r1
 80053c4:	f7fb fb84 	bl	8000ad0 <__aeabi_dcmpgt>
 80053c8:	bb58      	cbnz	r0, 8005422 <_dtoa_r+0x70a>
 80053ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053ce:	4640      	mov	r0, r8
 80053d0:	4649      	mov	r1, r9
 80053d2:	f7fb fb55 	bl	8000a80 <__aeabi_dcmpeq>
 80053d6:	b108      	cbz	r0, 80053dc <_dtoa_r+0x6c4>
 80053d8:	07e1      	lsls	r1, r4, #31
 80053da:	d422      	bmi.n	8005422 <_dtoa_r+0x70a>
 80053dc:	4628      	mov	r0, r5
 80053de:	4659      	mov	r1, fp
 80053e0:	f000 faf0 	bl	80059c4 <_Bfree>
 80053e4:	2300      	movs	r3, #0
 80053e6:	703b      	strb	r3, [r7, #0]
 80053e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053ea:	f10a 0001 	add.w	r0, sl, #1
 80053ee:	6018      	str	r0, [r3, #0]
 80053f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f43f acde 	beq.w	8004db4 <_dtoa_r+0x9c>
 80053f8:	601f      	str	r7, [r3, #0]
 80053fa:	e4db      	b.n	8004db4 <_dtoa_r+0x9c>
 80053fc:	4627      	mov	r7, r4
 80053fe:	463b      	mov	r3, r7
 8005400:	461f      	mov	r7, r3
 8005402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005406:	2a39      	cmp	r2, #57	; 0x39
 8005408:	d107      	bne.n	800541a <_dtoa_r+0x702>
 800540a:	9a03      	ldr	r2, [sp, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d1f7      	bne.n	8005400 <_dtoa_r+0x6e8>
 8005410:	2230      	movs	r2, #48	; 0x30
 8005412:	9903      	ldr	r1, [sp, #12]
 8005414:	f108 0801 	add.w	r8, r8, #1
 8005418:	700a      	strb	r2, [r1, #0]
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	3201      	adds	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e79e      	b.n	8005360 <_dtoa_r+0x648>
 8005422:	46d0      	mov	r8, sl
 8005424:	e7eb      	b.n	80053fe <_dtoa_r+0x6e6>
 8005426:	2200      	movs	r2, #0
 8005428:	4b6e      	ldr	r3, [pc, #440]	; (80055e4 <_dtoa_r+0x8cc>)
 800542a:	f7fb f8c1 	bl	80005b0 <__aeabi_dmul>
 800542e:	2200      	movs	r2, #0
 8005430:	2300      	movs	r3, #0
 8005432:	4680      	mov	r8, r0
 8005434:	4689      	mov	r9, r1
 8005436:	f7fb fb23 	bl	8000a80 <__aeabi_dcmpeq>
 800543a:	2800      	cmp	r0, #0
 800543c:	d09b      	beq.n	8005376 <_dtoa_r+0x65e>
 800543e:	e7cd      	b.n	80053dc <_dtoa_r+0x6c4>
 8005440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005442:	2a00      	cmp	r2, #0
 8005444:	f000 80d0 	beq.w	80055e8 <_dtoa_r+0x8d0>
 8005448:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800544a:	2a01      	cmp	r2, #1
 800544c:	f300 80ae 	bgt.w	80055ac <_dtoa_r+0x894>
 8005450:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005452:	2a00      	cmp	r2, #0
 8005454:	f000 80a6 	beq.w	80055a4 <_dtoa_r+0x88c>
 8005458:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800545c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800545e:	9f06      	ldr	r7, [sp, #24]
 8005460:	9a06      	ldr	r2, [sp, #24]
 8005462:	2101      	movs	r1, #1
 8005464:	441a      	add	r2, r3
 8005466:	9206      	str	r2, [sp, #24]
 8005468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800546a:	4628      	mov	r0, r5
 800546c:	441a      	add	r2, r3
 800546e:	9209      	str	r2, [sp, #36]	; 0x24
 8005470:	f000 fb5e 	bl	8005b30 <__i2b>
 8005474:	4606      	mov	r6, r0
 8005476:	2f00      	cmp	r7, #0
 8005478:	dd0c      	ble.n	8005494 <_dtoa_r+0x77c>
 800547a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	dd09      	ble.n	8005494 <_dtoa_r+0x77c>
 8005480:	42bb      	cmp	r3, r7
 8005482:	bfa8      	it	ge
 8005484:	463b      	movge	r3, r7
 8005486:	9a06      	ldr	r2, [sp, #24]
 8005488:	1aff      	subs	r7, r7, r3
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	9206      	str	r2, [sp, #24]
 800548e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	9309      	str	r3, [sp, #36]	; 0x24
 8005494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005496:	b1f3      	cbz	r3, 80054d6 <_dtoa_r+0x7be>
 8005498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80a8 	beq.w	80055f0 <_dtoa_r+0x8d8>
 80054a0:	2c00      	cmp	r4, #0
 80054a2:	dd10      	ble.n	80054c6 <_dtoa_r+0x7ae>
 80054a4:	4631      	mov	r1, r6
 80054a6:	4622      	mov	r2, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fbff 	bl	8005cac <__pow5mult>
 80054ae:	465a      	mov	r2, fp
 80054b0:	4601      	mov	r1, r0
 80054b2:	4606      	mov	r6, r0
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 fb51 	bl	8005b5c <__multiply>
 80054ba:	4680      	mov	r8, r0
 80054bc:	4659      	mov	r1, fp
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 fa80 	bl	80059c4 <_Bfree>
 80054c4:	46c3      	mov	fp, r8
 80054c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c8:	1b1a      	subs	r2, r3, r4
 80054ca:	d004      	beq.n	80054d6 <_dtoa_r+0x7be>
 80054cc:	4659      	mov	r1, fp
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 fbec 	bl	8005cac <__pow5mult>
 80054d4:	4683      	mov	fp, r0
 80054d6:	2101      	movs	r1, #1
 80054d8:	4628      	mov	r0, r5
 80054da:	f000 fb29 	bl	8005b30 <__i2b>
 80054de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e0:	4604      	mov	r4, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f340 8086 	ble.w	80055f4 <_dtoa_r+0x8dc>
 80054e8:	461a      	mov	r2, r3
 80054ea:	4601      	mov	r1, r0
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 fbdd 	bl	8005cac <__pow5mult>
 80054f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054f4:	4604      	mov	r4, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	dd7f      	ble.n	80055fa <_dtoa_r+0x8e2>
 80054fa:	f04f 0800 	mov.w	r8, #0
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005504:	6918      	ldr	r0, [r3, #16]
 8005506:	f000 fac5 	bl	8005a94 <__hi0bits>
 800550a:	f1c0 0020 	rsb	r0, r0, #32
 800550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005510:	4418      	add	r0, r3
 8005512:	f010 001f 	ands.w	r0, r0, #31
 8005516:	f000 8092 	beq.w	800563e <_dtoa_r+0x926>
 800551a:	f1c0 0320 	rsb	r3, r0, #32
 800551e:	2b04      	cmp	r3, #4
 8005520:	f340 808a 	ble.w	8005638 <_dtoa_r+0x920>
 8005524:	f1c0 001c 	rsb	r0, r0, #28
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	4407      	add	r7, r0
 800552c:	4403      	add	r3, r0
 800552e:	9306      	str	r3, [sp, #24]
 8005530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005532:	4403      	add	r3, r0
 8005534:	9309      	str	r3, [sp, #36]	; 0x24
 8005536:	9b06      	ldr	r3, [sp, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	dd05      	ble.n	8005548 <_dtoa_r+0x830>
 800553c:	4659      	mov	r1, fp
 800553e:	461a      	mov	r2, r3
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fc0d 	bl	8005d60 <__lshift>
 8005546:	4683      	mov	fp, r0
 8005548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	dd05      	ble.n	800555a <_dtoa_r+0x842>
 800554e:	4621      	mov	r1, r4
 8005550:	461a      	mov	r2, r3
 8005552:	4628      	mov	r0, r5
 8005554:	f000 fc04 	bl	8005d60 <__lshift>
 8005558:	4604      	mov	r4, r0
 800555a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d070      	beq.n	8005642 <_dtoa_r+0x92a>
 8005560:	4621      	mov	r1, r4
 8005562:	4658      	mov	r0, fp
 8005564:	f000 fc6c 	bl	8005e40 <__mcmp>
 8005568:	2800      	cmp	r0, #0
 800556a:	da6a      	bge.n	8005642 <_dtoa_r+0x92a>
 800556c:	2300      	movs	r3, #0
 800556e:	4659      	mov	r1, fp
 8005570:	220a      	movs	r2, #10
 8005572:	4628      	mov	r0, r5
 8005574:	f000 fa48 	bl	8005a08 <__multadd>
 8005578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800557a:	4683      	mov	fp, r0
 800557c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8194 	beq.w	80058ae <_dtoa_r+0xb96>
 8005586:	4631      	mov	r1, r6
 8005588:	2300      	movs	r3, #0
 800558a:	220a      	movs	r2, #10
 800558c:	4628      	mov	r0, r5
 800558e:	f000 fa3b 	bl	8005a08 <__multadd>
 8005592:	f1b9 0f00 	cmp.w	r9, #0
 8005596:	4606      	mov	r6, r0
 8005598:	f300 8093 	bgt.w	80056c2 <_dtoa_r+0x9aa>
 800559c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559e:	2b02      	cmp	r3, #2
 80055a0:	dc57      	bgt.n	8005652 <_dtoa_r+0x93a>
 80055a2:	e08e      	b.n	80056c2 <_dtoa_r+0x9aa>
 80055a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055aa:	e757      	b.n	800545c <_dtoa_r+0x744>
 80055ac:	9b08      	ldr	r3, [sp, #32]
 80055ae:	1e5c      	subs	r4, r3, #1
 80055b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b2:	42a3      	cmp	r3, r4
 80055b4:	bfb7      	itett	lt
 80055b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055b8:	1b1c      	subge	r4, r3, r4
 80055ba:	1ae2      	sublt	r2, r4, r3
 80055bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055be:	bfbe      	ittt	lt
 80055c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80055c2:	189b      	addlt	r3, r3, r2
 80055c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055c6:	9b08      	ldr	r3, [sp, #32]
 80055c8:	bfb8      	it	lt
 80055ca:	2400      	movlt	r4, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bfbb      	ittet	lt
 80055d0:	9b06      	ldrlt	r3, [sp, #24]
 80055d2:	9a08      	ldrlt	r2, [sp, #32]
 80055d4:	9f06      	ldrge	r7, [sp, #24]
 80055d6:	1a9f      	sublt	r7, r3, r2
 80055d8:	bfac      	ite	ge
 80055da:	9b08      	ldrge	r3, [sp, #32]
 80055dc:	2300      	movlt	r3, #0
 80055de:	e73f      	b.n	8005460 <_dtoa_r+0x748>
 80055e0:	3fe00000 	.word	0x3fe00000
 80055e4:	40240000 	.word	0x40240000
 80055e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055ea:	9f06      	ldr	r7, [sp, #24]
 80055ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80055ee:	e742      	b.n	8005476 <_dtoa_r+0x75e>
 80055f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055f2:	e76b      	b.n	80054cc <_dtoa_r+0x7b4>
 80055f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	dc19      	bgt.n	800562e <_dtoa_r+0x916>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	b9bb      	cbnz	r3, 800562e <_dtoa_r+0x916>
 80055fe:	9b05      	ldr	r3, [sp, #20]
 8005600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005604:	b99b      	cbnz	r3, 800562e <_dtoa_r+0x916>
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800560c:	0d1b      	lsrs	r3, r3, #20
 800560e:	051b      	lsls	r3, r3, #20
 8005610:	b183      	cbz	r3, 8005634 <_dtoa_r+0x91c>
 8005612:	f04f 0801 	mov.w	r8, #1
 8005616:	9b06      	ldr	r3, [sp, #24]
 8005618:	3301      	adds	r3, #1
 800561a:	9306      	str	r3, [sp, #24]
 800561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561e:	3301      	adds	r3, #1
 8005620:	9309      	str	r3, [sp, #36]	; 0x24
 8005622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	f47f af6a 	bne.w	80054fe <_dtoa_r+0x7e6>
 800562a:	2001      	movs	r0, #1
 800562c:	e76f      	b.n	800550e <_dtoa_r+0x7f6>
 800562e:	f04f 0800 	mov.w	r8, #0
 8005632:	e7f6      	b.n	8005622 <_dtoa_r+0x90a>
 8005634:	4698      	mov	r8, r3
 8005636:	e7f4      	b.n	8005622 <_dtoa_r+0x90a>
 8005638:	f43f af7d 	beq.w	8005536 <_dtoa_r+0x81e>
 800563c:	4618      	mov	r0, r3
 800563e:	301c      	adds	r0, #28
 8005640:	e772      	b.n	8005528 <_dtoa_r+0x810>
 8005642:	9b08      	ldr	r3, [sp, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	dc36      	bgt.n	80056b6 <_dtoa_r+0x99e>
 8005648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800564a:	2b02      	cmp	r3, #2
 800564c:	dd33      	ble.n	80056b6 <_dtoa_r+0x99e>
 800564e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005652:	f1b9 0f00 	cmp.w	r9, #0
 8005656:	d10d      	bne.n	8005674 <_dtoa_r+0x95c>
 8005658:	4621      	mov	r1, r4
 800565a:	464b      	mov	r3, r9
 800565c:	2205      	movs	r2, #5
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f9d2 	bl	8005a08 <__multadd>
 8005664:	4601      	mov	r1, r0
 8005666:	4604      	mov	r4, r0
 8005668:	4658      	mov	r0, fp
 800566a:	f000 fbe9 	bl	8005e40 <__mcmp>
 800566e:	2800      	cmp	r0, #0
 8005670:	f73f adb8 	bgt.w	80051e4 <_dtoa_r+0x4cc>
 8005674:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005676:	9f03      	ldr	r7, [sp, #12]
 8005678:	ea6f 0a03 	mvn.w	sl, r3
 800567c:	f04f 0800 	mov.w	r8, #0
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f99e 	bl	80059c4 <_Bfree>
 8005688:	2e00      	cmp	r6, #0
 800568a:	f43f aea7 	beq.w	80053dc <_dtoa_r+0x6c4>
 800568e:	f1b8 0f00 	cmp.w	r8, #0
 8005692:	d005      	beq.n	80056a0 <_dtoa_r+0x988>
 8005694:	45b0      	cmp	r8, r6
 8005696:	d003      	beq.n	80056a0 <_dtoa_r+0x988>
 8005698:	4641      	mov	r1, r8
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f992 	bl	80059c4 <_Bfree>
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f98e 	bl	80059c4 <_Bfree>
 80056a8:	e698      	b.n	80053dc <_dtoa_r+0x6c4>
 80056aa:	2400      	movs	r4, #0
 80056ac:	4626      	mov	r6, r4
 80056ae:	e7e1      	b.n	8005674 <_dtoa_r+0x95c>
 80056b0:	46c2      	mov	sl, r8
 80056b2:	4626      	mov	r6, r4
 80056b4:	e596      	b.n	80051e4 <_dtoa_r+0x4cc>
 80056b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80fd 	beq.w	80058bc <_dtoa_r+0xba4>
 80056c2:	2f00      	cmp	r7, #0
 80056c4:	dd05      	ble.n	80056d2 <_dtoa_r+0x9ba>
 80056c6:	4631      	mov	r1, r6
 80056c8:	463a      	mov	r2, r7
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 fb48 	bl	8005d60 <__lshift>
 80056d0:	4606      	mov	r6, r0
 80056d2:	f1b8 0f00 	cmp.w	r8, #0
 80056d6:	d05c      	beq.n	8005792 <_dtoa_r+0xa7a>
 80056d8:	4628      	mov	r0, r5
 80056da:	6871      	ldr	r1, [r6, #4]
 80056dc:	f000 f932 	bl	8005944 <_Balloc>
 80056e0:	4607      	mov	r7, r0
 80056e2:	b928      	cbnz	r0, 80056f0 <_dtoa_r+0x9d8>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056ea:	4b7f      	ldr	r3, [pc, #508]	; (80058e8 <_dtoa_r+0xbd0>)
 80056ec:	f7ff bb28 	b.w	8004d40 <_dtoa_r+0x28>
 80056f0:	6932      	ldr	r2, [r6, #16]
 80056f2:	f106 010c 	add.w	r1, r6, #12
 80056f6:	3202      	adds	r2, #2
 80056f8:	0092      	lsls	r2, r2, #2
 80056fa:	300c      	adds	r0, #12
 80056fc:	f000 f914 	bl	8005928 <memcpy>
 8005700:	2201      	movs	r2, #1
 8005702:	4639      	mov	r1, r7
 8005704:	4628      	mov	r0, r5
 8005706:	f000 fb2b 	bl	8005d60 <__lshift>
 800570a:	46b0      	mov	r8, r6
 800570c:	4606      	mov	r6, r0
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	9308      	str	r3, [sp, #32]
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	444b      	add	r3, r9
 8005718:	930a      	str	r3, [sp, #40]	; 0x28
 800571a:	9b04      	ldr	r3, [sp, #16]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	9309      	str	r3, [sp, #36]	; 0x24
 8005722:	9b08      	ldr	r3, [sp, #32]
 8005724:	4621      	mov	r1, r4
 8005726:	3b01      	subs	r3, #1
 8005728:	4658      	mov	r0, fp
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	f7ff fa66 	bl	8004bfc <quorem>
 8005730:	4603      	mov	r3, r0
 8005732:	4641      	mov	r1, r8
 8005734:	3330      	adds	r3, #48	; 0x30
 8005736:	9006      	str	r0, [sp, #24]
 8005738:	4658      	mov	r0, fp
 800573a:	930b      	str	r3, [sp, #44]	; 0x2c
 800573c:	f000 fb80 	bl	8005e40 <__mcmp>
 8005740:	4632      	mov	r2, r6
 8005742:	4681      	mov	r9, r0
 8005744:	4621      	mov	r1, r4
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fb96 	bl	8005e78 <__mdiff>
 800574c:	68c2      	ldr	r2, [r0, #12]
 800574e:	4607      	mov	r7, r0
 8005750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005752:	bb02      	cbnz	r2, 8005796 <_dtoa_r+0xa7e>
 8005754:	4601      	mov	r1, r0
 8005756:	4658      	mov	r0, fp
 8005758:	f000 fb72 	bl	8005e40 <__mcmp>
 800575c:	4602      	mov	r2, r0
 800575e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005760:	4639      	mov	r1, r7
 8005762:	4628      	mov	r0, r5
 8005764:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005768:	f000 f92c 	bl	80059c4 <_Bfree>
 800576c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800576e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005770:	9f08      	ldr	r7, [sp, #32]
 8005772:	ea43 0102 	orr.w	r1, r3, r2
 8005776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005778:	430b      	orrs	r3, r1
 800577a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577c:	d10d      	bne.n	800579a <_dtoa_r+0xa82>
 800577e:	2b39      	cmp	r3, #57	; 0x39
 8005780:	d029      	beq.n	80057d6 <_dtoa_r+0xabe>
 8005782:	f1b9 0f00 	cmp.w	r9, #0
 8005786:	dd01      	ble.n	800578c <_dtoa_r+0xa74>
 8005788:	9b06      	ldr	r3, [sp, #24]
 800578a:	3331      	adds	r3, #49	; 0x31
 800578c:	9a04      	ldr	r2, [sp, #16]
 800578e:	7013      	strb	r3, [r2, #0]
 8005790:	e776      	b.n	8005680 <_dtoa_r+0x968>
 8005792:	4630      	mov	r0, r6
 8005794:	e7b9      	b.n	800570a <_dtoa_r+0x9f2>
 8005796:	2201      	movs	r2, #1
 8005798:	e7e2      	b.n	8005760 <_dtoa_r+0xa48>
 800579a:	f1b9 0f00 	cmp.w	r9, #0
 800579e:	db06      	blt.n	80057ae <_dtoa_r+0xa96>
 80057a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80057a2:	ea41 0909 	orr.w	r9, r1, r9
 80057a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057a8:	ea59 0101 	orrs.w	r1, r9, r1
 80057ac:	d120      	bne.n	80057f0 <_dtoa_r+0xad8>
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	ddec      	ble.n	800578c <_dtoa_r+0xa74>
 80057b2:	4659      	mov	r1, fp
 80057b4:	2201      	movs	r2, #1
 80057b6:	4628      	mov	r0, r5
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	f000 fad1 	bl	8005d60 <__lshift>
 80057be:	4621      	mov	r1, r4
 80057c0:	4683      	mov	fp, r0
 80057c2:	f000 fb3d 	bl	8005e40 <__mcmp>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	9b08      	ldr	r3, [sp, #32]
 80057ca:	dc02      	bgt.n	80057d2 <_dtoa_r+0xaba>
 80057cc:	d1de      	bne.n	800578c <_dtoa_r+0xa74>
 80057ce:	07da      	lsls	r2, r3, #31
 80057d0:	d5dc      	bpl.n	800578c <_dtoa_r+0xa74>
 80057d2:	2b39      	cmp	r3, #57	; 0x39
 80057d4:	d1d8      	bne.n	8005788 <_dtoa_r+0xa70>
 80057d6:	2339      	movs	r3, #57	; 0x39
 80057d8:	9a04      	ldr	r2, [sp, #16]
 80057da:	7013      	strb	r3, [r2, #0]
 80057dc:	463b      	mov	r3, r7
 80057de:	461f      	mov	r7, r3
 80057e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	2a39      	cmp	r2, #57	; 0x39
 80057e8:	d050      	beq.n	800588c <_dtoa_r+0xb74>
 80057ea:	3201      	adds	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e747      	b.n	8005680 <_dtoa_r+0x968>
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	dd03      	ble.n	80057fc <_dtoa_r+0xae4>
 80057f4:	2b39      	cmp	r3, #57	; 0x39
 80057f6:	d0ee      	beq.n	80057d6 <_dtoa_r+0xabe>
 80057f8:	3301      	adds	r3, #1
 80057fa:	e7c7      	b.n	800578c <_dtoa_r+0xa74>
 80057fc:	9a08      	ldr	r2, [sp, #32]
 80057fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005800:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005804:	428a      	cmp	r2, r1
 8005806:	d02a      	beq.n	800585e <_dtoa_r+0xb46>
 8005808:	4659      	mov	r1, fp
 800580a:	2300      	movs	r3, #0
 800580c:	220a      	movs	r2, #10
 800580e:	4628      	mov	r0, r5
 8005810:	f000 f8fa 	bl	8005a08 <__multadd>
 8005814:	45b0      	cmp	r8, r6
 8005816:	4683      	mov	fp, r0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	f04f 020a 	mov.w	r2, #10
 8005820:	4641      	mov	r1, r8
 8005822:	4628      	mov	r0, r5
 8005824:	d107      	bne.n	8005836 <_dtoa_r+0xb1e>
 8005826:	f000 f8ef 	bl	8005a08 <__multadd>
 800582a:	4680      	mov	r8, r0
 800582c:	4606      	mov	r6, r0
 800582e:	9b08      	ldr	r3, [sp, #32]
 8005830:	3301      	adds	r3, #1
 8005832:	9308      	str	r3, [sp, #32]
 8005834:	e775      	b.n	8005722 <_dtoa_r+0xa0a>
 8005836:	f000 f8e7 	bl	8005a08 <__multadd>
 800583a:	4631      	mov	r1, r6
 800583c:	4680      	mov	r8, r0
 800583e:	2300      	movs	r3, #0
 8005840:	220a      	movs	r2, #10
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f8e0 	bl	8005a08 <__multadd>
 8005848:	4606      	mov	r6, r0
 800584a:	e7f0      	b.n	800582e <_dtoa_r+0xb16>
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	bfcc      	ite	gt
 8005852:	464f      	movgt	r7, r9
 8005854:	2701      	movle	r7, #1
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	9a03      	ldr	r2, [sp, #12]
 800585c:	4417      	add	r7, r2
 800585e:	4659      	mov	r1, fp
 8005860:	2201      	movs	r2, #1
 8005862:	4628      	mov	r0, r5
 8005864:	9308      	str	r3, [sp, #32]
 8005866:	f000 fa7b 	bl	8005d60 <__lshift>
 800586a:	4621      	mov	r1, r4
 800586c:	4683      	mov	fp, r0
 800586e:	f000 fae7 	bl	8005e40 <__mcmp>
 8005872:	2800      	cmp	r0, #0
 8005874:	dcb2      	bgt.n	80057dc <_dtoa_r+0xac4>
 8005876:	d102      	bne.n	800587e <_dtoa_r+0xb66>
 8005878:	9b08      	ldr	r3, [sp, #32]
 800587a:	07db      	lsls	r3, r3, #31
 800587c:	d4ae      	bmi.n	80057dc <_dtoa_r+0xac4>
 800587e:	463b      	mov	r3, r7
 8005880:	461f      	mov	r7, r3
 8005882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005886:	2a30      	cmp	r2, #48	; 0x30
 8005888:	d0fa      	beq.n	8005880 <_dtoa_r+0xb68>
 800588a:	e6f9      	b.n	8005680 <_dtoa_r+0x968>
 800588c:	9a03      	ldr	r2, [sp, #12]
 800588e:	429a      	cmp	r2, r3
 8005890:	d1a5      	bne.n	80057de <_dtoa_r+0xac6>
 8005892:	2331      	movs	r3, #49	; 0x31
 8005894:	f10a 0a01 	add.w	sl, sl, #1
 8005898:	e779      	b.n	800578e <_dtoa_r+0xa76>
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <_dtoa_r+0xbd4>)
 800589c:	f7ff baa8 	b.w	8004df0 <_dtoa_r+0xd8>
 80058a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f47f aa81 	bne.w	8004daa <_dtoa_r+0x92>
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <_dtoa_r+0xbd8>)
 80058aa:	f7ff baa1 	b.w	8004df0 <_dtoa_r+0xd8>
 80058ae:	f1b9 0f00 	cmp.w	r9, #0
 80058b2:	dc03      	bgt.n	80058bc <_dtoa_r+0xba4>
 80058b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	f73f aecb 	bgt.w	8005652 <_dtoa_r+0x93a>
 80058bc:	9f03      	ldr	r7, [sp, #12]
 80058be:	4621      	mov	r1, r4
 80058c0:	4658      	mov	r0, fp
 80058c2:	f7ff f99b 	bl	8004bfc <quorem>
 80058c6:	9a03      	ldr	r2, [sp, #12]
 80058c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80058cc:	f807 3b01 	strb.w	r3, [r7], #1
 80058d0:	1aba      	subs	r2, r7, r2
 80058d2:	4591      	cmp	r9, r2
 80058d4:	ddba      	ble.n	800584c <_dtoa_r+0xb34>
 80058d6:	4659      	mov	r1, fp
 80058d8:	2300      	movs	r3, #0
 80058da:	220a      	movs	r2, #10
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f893 	bl	8005a08 <__multadd>
 80058e2:	4683      	mov	fp, r0
 80058e4:	e7eb      	b.n	80058be <_dtoa_r+0xba6>
 80058e6:	bf00      	nop
 80058e8:	08007e23 	.word	0x08007e23
 80058ec:	08007d80 	.word	0x08007d80
 80058f0:	08007da4 	.word	0x08007da4

080058f4 <_localeconv_r>:
 80058f4:	4800      	ldr	r0, [pc, #0]	; (80058f8 <_localeconv_r+0x4>)
 80058f6:	4770      	bx	lr
 80058f8:	200001f0 	.word	0x200001f0

080058fc <malloc>:
 80058fc:	4b02      	ldr	r3, [pc, #8]	; (8005908 <malloc+0xc>)
 80058fe:	4601      	mov	r1, r0
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	f000 bc1d 	b.w	8006140 <_malloc_r>
 8005906:	bf00      	nop
 8005908:	2000009c 	.word	0x2000009c

0800590c <memchr>:
 800590c:	4603      	mov	r3, r0
 800590e:	b510      	push	{r4, lr}
 8005910:	b2c9      	uxtb	r1, r1
 8005912:	4402      	add	r2, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	4618      	mov	r0, r3
 8005918:	d101      	bne.n	800591e <memchr+0x12>
 800591a:	2000      	movs	r0, #0
 800591c:	e003      	b.n	8005926 <memchr+0x1a>
 800591e:	7804      	ldrb	r4, [r0, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	428c      	cmp	r4, r1
 8005924:	d1f6      	bne.n	8005914 <memchr+0x8>
 8005926:	bd10      	pop	{r4, pc}

08005928 <memcpy>:
 8005928:	440a      	add	r2, r1
 800592a:	4291      	cmp	r1, r2
 800592c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005930:	d100      	bne.n	8005934 <memcpy+0xc>
 8005932:	4770      	bx	lr
 8005934:	b510      	push	{r4, lr}
 8005936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800593a:	4291      	cmp	r1, r2
 800593c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005940:	d1f9      	bne.n	8005936 <memcpy+0xe>
 8005942:	bd10      	pop	{r4, pc}

08005944 <_Balloc>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	b976      	cbnz	r6, 800596c <_Balloc+0x28>
 800594e:	2010      	movs	r0, #16
 8005950:	f7ff ffd4 	bl	80058fc <malloc>
 8005954:	4602      	mov	r2, r0
 8005956:	6260      	str	r0, [r4, #36]	; 0x24
 8005958:	b920      	cbnz	r0, 8005964 <_Balloc+0x20>
 800595a:	2166      	movs	r1, #102	; 0x66
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <_Balloc+0x78>)
 800595e:	4818      	ldr	r0, [pc, #96]	; (80059c0 <_Balloc+0x7c>)
 8005960:	f000 fdce 	bl	8006500 <__assert_func>
 8005964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005968:	6006      	str	r6, [r0, #0]
 800596a:	60c6      	str	r6, [r0, #12]
 800596c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800596e:	68f3      	ldr	r3, [r6, #12]
 8005970:	b183      	cbz	r3, 8005994 <_Balloc+0x50>
 8005972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800597a:	b9b8      	cbnz	r0, 80059ac <_Balloc+0x68>
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f605 	lsl.w	r6, r1, r5
 8005982:	1d72      	adds	r2, r6, #5
 8005984:	4620      	mov	r0, r4
 8005986:	0092      	lsls	r2, r2, #2
 8005988:	f000 fb5e 	bl	8006048 <_calloc_r>
 800598c:	b160      	cbz	r0, 80059a8 <_Balloc+0x64>
 800598e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005992:	e00e      	b.n	80059b2 <_Balloc+0x6e>
 8005994:	2221      	movs	r2, #33	; 0x21
 8005996:	2104      	movs	r1, #4
 8005998:	4620      	mov	r0, r4
 800599a:	f000 fb55 	bl	8006048 <_calloc_r>
 800599e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a0:	60f0      	str	r0, [r6, #12]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e4      	bne.n	8005972 <_Balloc+0x2e>
 80059a8:	2000      	movs	r0, #0
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	6802      	ldr	r2, [r0, #0]
 80059ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059b2:	2300      	movs	r3, #0
 80059b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059b8:	e7f7      	b.n	80059aa <_Balloc+0x66>
 80059ba:	bf00      	nop
 80059bc:	08007db1 	.word	0x08007db1
 80059c0:	08007e34 	.word	0x08007e34

080059c4 <_Bfree>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059c8:	4605      	mov	r5, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	b976      	cbnz	r6, 80059ec <_Bfree+0x28>
 80059ce:	2010      	movs	r0, #16
 80059d0:	f7ff ff94 	bl	80058fc <malloc>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6268      	str	r0, [r5, #36]	; 0x24
 80059d8:	b920      	cbnz	r0, 80059e4 <_Bfree+0x20>
 80059da:	218a      	movs	r1, #138	; 0x8a
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <_Bfree+0x3c>)
 80059de:	4809      	ldr	r0, [pc, #36]	; (8005a04 <_Bfree+0x40>)
 80059e0:	f000 fd8e 	bl	8006500 <__assert_func>
 80059e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059e8:	6006      	str	r6, [r0, #0]
 80059ea:	60c6      	str	r6, [r0, #12]
 80059ec:	b13c      	cbz	r4, 80059fe <_Bfree+0x3a>
 80059ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059f0:	6862      	ldr	r2, [r4, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059f8:	6021      	str	r1, [r4, #0]
 80059fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	08007db1 	.word	0x08007db1
 8005a04:	08007e34 	.word	0x08007e34

08005a08 <__multadd>:
 8005a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	461e      	mov	r6, r3
 8005a12:	2000      	movs	r0, #0
 8005a14:	690d      	ldr	r5, [r1, #16]
 8005a16:	f101 0c14 	add.w	ip, r1, #20
 8005a1a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a1e:	3001      	adds	r0, #1
 8005a20:	b299      	uxth	r1, r3
 8005a22:	fb02 6101 	mla	r1, r2, r1, r6
 8005a26:	0c1e      	lsrs	r6, r3, #16
 8005a28:	0c0b      	lsrs	r3, r1, #16
 8005a2a:	fb02 3306 	mla	r3, r2, r6, r3
 8005a2e:	b289      	uxth	r1, r1
 8005a30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a34:	4285      	cmp	r5, r0
 8005a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a3a:	f84c 1b04 	str.w	r1, [ip], #4
 8005a3e:	dcec      	bgt.n	8005a1a <__multadd+0x12>
 8005a40:	b30e      	cbz	r6, 8005a86 <__multadd+0x7e>
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dc19      	bgt.n	8005a7c <__multadd+0x74>
 8005a48:	6861      	ldr	r1, [r4, #4]
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	3101      	adds	r1, #1
 8005a4e:	f7ff ff79 	bl	8005944 <_Balloc>
 8005a52:	4680      	mov	r8, r0
 8005a54:	b928      	cbnz	r0, 8005a62 <__multadd+0x5a>
 8005a56:	4602      	mov	r2, r0
 8005a58:	21b5      	movs	r1, #181	; 0xb5
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <__multadd+0x84>)
 8005a5c:	480c      	ldr	r0, [pc, #48]	; (8005a90 <__multadd+0x88>)
 8005a5e:	f000 fd4f 	bl	8006500 <__assert_func>
 8005a62:	6922      	ldr	r2, [r4, #16]
 8005a64:	f104 010c 	add.w	r1, r4, #12
 8005a68:	3202      	adds	r2, #2
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	300c      	adds	r0, #12
 8005a6e:	f7ff ff5b 	bl	8005928 <memcpy>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7ff ffa5 	bl	80059c4 <_Bfree>
 8005a7a:	4644      	mov	r4, r8
 8005a7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a80:	3501      	adds	r5, #1
 8005a82:	615e      	str	r6, [r3, #20]
 8005a84:	6125      	str	r5, [r4, #16]
 8005a86:	4620      	mov	r0, r4
 8005a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a8c:	08007e23 	.word	0x08007e23
 8005a90:	08007e34 	.word	0x08007e34

08005a94 <__hi0bits>:
 8005a94:	0c02      	lsrs	r2, r0, #16
 8005a96:	0412      	lsls	r2, r2, #16
 8005a98:	4603      	mov	r3, r0
 8005a9a:	b9ca      	cbnz	r2, 8005ad0 <__hi0bits+0x3c>
 8005a9c:	0403      	lsls	r3, r0, #16
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005aa4:	bf04      	itt	eq
 8005aa6:	021b      	lsleq	r3, r3, #8
 8005aa8:	3008      	addeq	r0, #8
 8005aaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005aae:	bf04      	itt	eq
 8005ab0:	011b      	lsleq	r3, r3, #4
 8005ab2:	3004      	addeq	r0, #4
 8005ab4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ab8:	bf04      	itt	eq
 8005aba:	009b      	lsleq	r3, r3, #2
 8005abc:	3002      	addeq	r0, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db05      	blt.n	8005ace <__hi0bits+0x3a>
 8005ac2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ac6:	f100 0001 	add.w	r0, r0, #1
 8005aca:	bf08      	it	eq
 8005acc:	2020      	moveq	r0, #32
 8005ace:	4770      	bx	lr
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e7e5      	b.n	8005aa0 <__hi0bits+0xc>

08005ad4 <__lo0bits>:
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f013 0007 	ands.w	r0, r3, #7
 8005adc:	d00b      	beq.n	8005af6 <__lo0bits+0x22>
 8005ade:	07d9      	lsls	r1, r3, #31
 8005ae0:	d421      	bmi.n	8005b26 <__lo0bits+0x52>
 8005ae2:	0798      	lsls	r0, r3, #30
 8005ae4:	bf49      	itett	mi
 8005ae6:	085b      	lsrmi	r3, r3, #1
 8005ae8:	089b      	lsrpl	r3, r3, #2
 8005aea:	2001      	movmi	r0, #1
 8005aec:	6013      	strmi	r3, [r2, #0]
 8005aee:	bf5c      	itt	pl
 8005af0:	2002      	movpl	r0, #2
 8005af2:	6013      	strpl	r3, [r2, #0]
 8005af4:	4770      	bx	lr
 8005af6:	b299      	uxth	r1, r3
 8005af8:	b909      	cbnz	r1, 8005afe <__lo0bits+0x2a>
 8005afa:	2010      	movs	r0, #16
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	b2d9      	uxtb	r1, r3
 8005b00:	b909      	cbnz	r1, 8005b06 <__lo0bits+0x32>
 8005b02:	3008      	adds	r0, #8
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	0719      	lsls	r1, r3, #28
 8005b08:	bf04      	itt	eq
 8005b0a:	091b      	lsreq	r3, r3, #4
 8005b0c:	3004      	addeq	r0, #4
 8005b0e:	0799      	lsls	r1, r3, #30
 8005b10:	bf04      	itt	eq
 8005b12:	089b      	lsreq	r3, r3, #2
 8005b14:	3002      	addeq	r0, #2
 8005b16:	07d9      	lsls	r1, r3, #31
 8005b18:	d403      	bmi.n	8005b22 <__lo0bits+0x4e>
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	f100 0001 	add.w	r0, r0, #1
 8005b20:	d003      	beq.n	8005b2a <__lo0bits+0x56>
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4770      	bx	lr
 8005b26:	2000      	movs	r0, #0
 8005b28:	4770      	bx	lr
 8005b2a:	2020      	movs	r0, #32
 8005b2c:	4770      	bx	lr
	...

08005b30 <__i2b>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	2101      	movs	r1, #1
 8005b36:	f7ff ff05 	bl	8005944 <_Balloc>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	b928      	cbnz	r0, 8005b4a <__i2b+0x1a>
 8005b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <__i2b+0x24>)
 8005b44:	4804      	ldr	r0, [pc, #16]	; (8005b58 <__i2b+0x28>)
 8005b46:	f000 fcdb 	bl	8006500 <__assert_func>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	6144      	str	r4, [r0, #20]
 8005b4e:	6103      	str	r3, [r0, #16]
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	bf00      	nop
 8005b54:	08007e23 	.word	0x08007e23
 8005b58:	08007e34 	.word	0x08007e34

08005b5c <__multiply>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	4691      	mov	r9, r2
 8005b62:	690a      	ldr	r2, [r1, #16]
 8005b64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b68:	460c      	mov	r4, r1
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bfbe      	ittt	lt
 8005b6e:	460b      	movlt	r3, r1
 8005b70:	464c      	movlt	r4, r9
 8005b72:	4699      	movlt	r9, r3
 8005b74:	6927      	ldr	r7, [r4, #16]
 8005b76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	6861      	ldr	r1, [r4, #4]
 8005b7e:	eb07 060a 	add.w	r6, r7, sl
 8005b82:	42b3      	cmp	r3, r6
 8005b84:	b085      	sub	sp, #20
 8005b86:	bfb8      	it	lt
 8005b88:	3101      	addlt	r1, #1
 8005b8a:	f7ff fedb 	bl	8005944 <_Balloc>
 8005b8e:	b930      	cbnz	r0, 8005b9e <__multiply+0x42>
 8005b90:	4602      	mov	r2, r0
 8005b92:	f240 115d 	movw	r1, #349	; 0x15d
 8005b96:	4b43      	ldr	r3, [pc, #268]	; (8005ca4 <__multiply+0x148>)
 8005b98:	4843      	ldr	r0, [pc, #268]	; (8005ca8 <__multiply+0x14c>)
 8005b9a:	f000 fcb1 	bl	8006500 <__assert_func>
 8005b9e:	f100 0514 	add.w	r5, r0, #20
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005baa:	4543      	cmp	r3, r8
 8005bac:	d321      	bcc.n	8005bf2 <__multiply+0x96>
 8005bae:	f104 0314 	add.w	r3, r4, #20
 8005bb2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005bb6:	f109 0314 	add.w	r3, r9, #20
 8005bba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	1b3a      	subs	r2, r7, r4
 8005bc2:	3a15      	subs	r2, #21
 8005bc4:	f022 0203 	bic.w	r2, r2, #3
 8005bc8:	3204      	adds	r2, #4
 8005bca:	f104 0115 	add.w	r1, r4, #21
 8005bce:	428f      	cmp	r7, r1
 8005bd0:	bf38      	it	cc
 8005bd2:	2204      	movcc	r2, #4
 8005bd4:	9201      	str	r2, [sp, #4]
 8005bd6:	9a02      	ldr	r2, [sp, #8]
 8005bd8:	9303      	str	r3, [sp, #12]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d80c      	bhi.n	8005bf8 <__multiply+0x9c>
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	dd03      	ble.n	8005bea <__multiply+0x8e>
 8005be2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d059      	beq.n	8005c9e <__multiply+0x142>
 8005bea:	6106      	str	r6, [r0, #16]
 8005bec:	b005      	add	sp, #20
 8005bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf2:	f843 2b04 	str.w	r2, [r3], #4
 8005bf6:	e7d8      	b.n	8005baa <__multiply+0x4e>
 8005bf8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bfc:	f1ba 0f00 	cmp.w	sl, #0
 8005c00:	d023      	beq.n	8005c4a <__multiply+0xee>
 8005c02:	46a9      	mov	r9, r5
 8005c04:	f04f 0c00 	mov.w	ip, #0
 8005c08:	f104 0e14 	add.w	lr, r4, #20
 8005c0c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c10:	f8d9 1000 	ldr.w	r1, [r9]
 8005c14:	fa1f fb82 	uxth.w	fp, r2
 8005c18:	b289      	uxth	r1, r1
 8005c1a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c1e:	4461      	add	r1, ip
 8005c20:	f8d9 c000 	ldr.w	ip, [r9]
 8005c24:	0c12      	lsrs	r2, r2, #16
 8005c26:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c2a:	fb0a c202 	mla	r2, sl, r2, ip
 8005c2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c32:	b289      	uxth	r1, r1
 8005c34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c38:	4577      	cmp	r7, lr
 8005c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c3e:	f849 1b04 	str.w	r1, [r9], #4
 8005c42:	d8e3      	bhi.n	8005c0c <__multiply+0xb0>
 8005c44:	9a01      	ldr	r2, [sp, #4]
 8005c46:	f845 c002 	str.w	ip, [r5, r2]
 8005c4a:	9a03      	ldr	r2, [sp, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	d020      	beq.n	8005c9a <__multiply+0x13e>
 8005c58:	46ae      	mov	lr, r5
 8005c5a:	f04f 0a00 	mov.w	sl, #0
 8005c5e:	6829      	ldr	r1, [r5, #0]
 8005c60:	f104 0c14 	add.w	ip, r4, #20
 8005c64:	f8bc b000 	ldrh.w	fp, [ip]
 8005c68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c6c:	b289      	uxth	r1, r1
 8005c6e:	fb09 220b 	mla	r2, r9, fp, r2
 8005c72:	4492      	add	sl, r2
 8005c74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005c78:	f84e 1b04 	str.w	r1, [lr], #4
 8005c7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005c80:	f8be 1000 	ldrh.w	r1, [lr]
 8005c84:	0c12      	lsrs	r2, r2, #16
 8005c86:	fb09 1102 	mla	r1, r9, r2, r1
 8005c8a:	4567      	cmp	r7, ip
 8005c8c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005c90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c94:	d8e6      	bhi.n	8005c64 <__multiply+0x108>
 8005c96:	9a01      	ldr	r2, [sp, #4]
 8005c98:	50a9      	str	r1, [r5, r2]
 8005c9a:	3504      	adds	r5, #4
 8005c9c:	e79b      	b.n	8005bd6 <__multiply+0x7a>
 8005c9e:	3e01      	subs	r6, #1
 8005ca0:	e79d      	b.n	8005bde <__multiply+0x82>
 8005ca2:	bf00      	nop
 8005ca4:	08007e23 	.word	0x08007e23
 8005ca8:	08007e34 	.word	0x08007e34

08005cac <__pow5mult>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	f012 0203 	ands.w	r2, r2, #3
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460f      	mov	r7, r1
 8005cba:	d007      	beq.n	8005ccc <__pow5mult+0x20>
 8005cbc:	4c25      	ldr	r4, [pc, #148]	; (8005d54 <__pow5mult+0xa8>)
 8005cbe:	3a01      	subs	r2, #1
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cc6:	f7ff fe9f 	bl	8005a08 <__multadd>
 8005cca:	4607      	mov	r7, r0
 8005ccc:	10ad      	asrs	r5, r5, #2
 8005cce:	d03d      	beq.n	8005d4c <__pow5mult+0xa0>
 8005cd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cd2:	b97c      	cbnz	r4, 8005cf4 <__pow5mult+0x48>
 8005cd4:	2010      	movs	r0, #16
 8005cd6:	f7ff fe11 	bl	80058fc <malloc>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	6270      	str	r0, [r6, #36]	; 0x24
 8005cde:	b928      	cbnz	r0, 8005cec <__pow5mult+0x40>
 8005ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ce4:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <__pow5mult+0xac>)
 8005ce6:	481d      	ldr	r0, [pc, #116]	; (8005d5c <__pow5mult+0xb0>)
 8005ce8:	f000 fc0a 	bl	8006500 <__assert_func>
 8005cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cf0:	6004      	str	r4, [r0, #0]
 8005cf2:	60c4      	str	r4, [r0, #12]
 8005cf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cfc:	b94c      	cbnz	r4, 8005d12 <__pow5mult+0x66>
 8005cfe:	f240 2171 	movw	r1, #625	; 0x271
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7ff ff14 	bl	8005b30 <__i2b>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d10:	6003      	str	r3, [r0, #0]
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	07eb      	lsls	r3, r5, #31
 8005d18:	d50a      	bpl.n	8005d30 <__pow5mult+0x84>
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f7ff ff1c 	bl	8005b5c <__multiply>
 8005d24:	4680      	mov	r8, r0
 8005d26:	4639      	mov	r1, r7
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff fe4b 	bl	80059c4 <_Bfree>
 8005d2e:	4647      	mov	r7, r8
 8005d30:	106d      	asrs	r5, r5, #1
 8005d32:	d00b      	beq.n	8005d4c <__pow5mult+0xa0>
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	b938      	cbnz	r0, 8005d48 <__pow5mult+0x9c>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff ff0d 	bl	8005b5c <__multiply>
 8005d42:	6020      	str	r0, [r4, #0]
 8005d44:	f8c0 9000 	str.w	r9, [r0]
 8005d48:	4604      	mov	r4, r0
 8005d4a:	e7e4      	b.n	8005d16 <__pow5mult+0x6a>
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d52:	bf00      	nop
 8005d54:	08007f80 	.word	0x08007f80
 8005d58:	08007db1 	.word	0x08007db1
 8005d5c:	08007e34 	.word	0x08007e34

08005d60 <__lshift>:
 8005d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	460c      	mov	r4, r1
 8005d66:	4607      	mov	r7, r0
 8005d68:	4691      	mov	r9, r2
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	6849      	ldr	r1, [r1, #4]
 8005d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d78:	f108 0601 	add.w	r6, r8, #1
 8005d7c:	42b3      	cmp	r3, r6
 8005d7e:	db0b      	blt.n	8005d98 <__lshift+0x38>
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7ff fddf 	bl	8005944 <_Balloc>
 8005d86:	4605      	mov	r5, r0
 8005d88:	b948      	cbnz	r0, 8005d9e <__lshift+0x3e>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d90:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <__lshift+0xd8>)
 8005d92:	482a      	ldr	r0, [pc, #168]	; (8005e3c <__lshift+0xdc>)
 8005d94:	f000 fbb4 	bl	8006500 <__assert_func>
 8005d98:	3101      	adds	r1, #1
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	e7ee      	b.n	8005d7c <__lshift+0x1c>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f100 0114 	add.w	r1, r0, #20
 8005da4:	f100 0210 	add.w	r2, r0, #16
 8005da8:	4618      	mov	r0, r3
 8005daa:	4553      	cmp	r3, sl
 8005dac:	db37      	blt.n	8005e1e <__lshift+0xbe>
 8005dae:	6920      	ldr	r0, [r4, #16]
 8005db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005db4:	f104 0314 	add.w	r3, r4, #20
 8005db8:	f019 091f 	ands.w	r9, r9, #31
 8005dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005dc4:	d02f      	beq.n	8005e26 <__lshift+0xc6>
 8005dc6:	468a      	mov	sl, r1
 8005dc8:	f04f 0c00 	mov.w	ip, #0
 8005dcc:	f1c9 0e20 	rsb	lr, r9, #32
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	fa02 f209 	lsl.w	r2, r2, r9
 8005dd6:	ea42 020c 	orr.w	r2, r2, ip
 8005dda:	f84a 2b04 	str.w	r2, [sl], #4
 8005dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de2:	4298      	cmp	r0, r3
 8005de4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005de8:	d8f2      	bhi.n	8005dd0 <__lshift+0x70>
 8005dea:	1b03      	subs	r3, r0, r4
 8005dec:	3b15      	subs	r3, #21
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	3304      	adds	r3, #4
 8005df4:	f104 0215 	add.w	r2, r4, #21
 8005df8:	4290      	cmp	r0, r2
 8005dfa:	bf38      	it	cc
 8005dfc:	2304      	movcc	r3, #4
 8005dfe:	f841 c003 	str.w	ip, [r1, r3]
 8005e02:	f1bc 0f00 	cmp.w	ip, #0
 8005e06:	d001      	beq.n	8005e0c <__lshift+0xac>
 8005e08:	f108 0602 	add.w	r6, r8, #2
 8005e0c:	3e01      	subs	r6, #1
 8005e0e:	4638      	mov	r0, r7
 8005e10:	4621      	mov	r1, r4
 8005e12:	612e      	str	r6, [r5, #16]
 8005e14:	f7ff fdd6 	bl	80059c4 <_Bfree>
 8005e18:	4628      	mov	r0, r5
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e22:	3301      	adds	r3, #1
 8005e24:	e7c1      	b.n	8005daa <__lshift+0x4a>
 8005e26:	3904      	subs	r1, #4
 8005e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2c:	4298      	cmp	r0, r3
 8005e2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e32:	d8f9      	bhi.n	8005e28 <__lshift+0xc8>
 8005e34:	e7ea      	b.n	8005e0c <__lshift+0xac>
 8005e36:	bf00      	nop
 8005e38:	08007e23 	.word	0x08007e23
 8005e3c:	08007e34 	.word	0x08007e34

08005e40 <__mcmp>:
 8005e40:	4603      	mov	r3, r0
 8005e42:	690a      	ldr	r2, [r1, #16]
 8005e44:	6900      	ldr	r0, [r0, #16]
 8005e46:	b530      	push	{r4, r5, lr}
 8005e48:	1a80      	subs	r0, r0, r2
 8005e4a:	d10d      	bne.n	8005e68 <__mcmp+0x28>
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	3114      	adds	r1, #20
 8005e50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e60:	4295      	cmp	r5, r2
 8005e62:	d002      	beq.n	8005e6a <__mcmp+0x2a>
 8005e64:	d304      	bcc.n	8005e70 <__mcmp+0x30>
 8005e66:	2001      	movs	r0, #1
 8005e68:	bd30      	pop	{r4, r5, pc}
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	d3f4      	bcc.n	8005e58 <__mcmp+0x18>
 8005e6e:	e7fb      	b.n	8005e68 <__mcmp+0x28>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e74:	e7f8      	b.n	8005e68 <__mcmp+0x28>
	...

08005e78 <__mdiff>:
 8005e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	4607      	mov	r7, r0
 8005e80:	4611      	mov	r1, r2
 8005e82:	4628      	mov	r0, r5
 8005e84:	4614      	mov	r4, r2
 8005e86:	f7ff ffdb 	bl	8005e40 <__mcmp>
 8005e8a:	1e06      	subs	r6, r0, #0
 8005e8c:	d111      	bne.n	8005eb2 <__mdiff+0x3a>
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff fd57 	bl	8005944 <_Balloc>
 8005e96:	4602      	mov	r2, r0
 8005e98:	b928      	cbnz	r0, 8005ea6 <__mdiff+0x2e>
 8005e9a:	f240 2132 	movw	r1, #562	; 0x232
 8005e9e:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <__mdiff+0x110>)
 8005ea0:	483a      	ldr	r0, [pc, #232]	; (8005f8c <__mdiff+0x114>)
 8005ea2:	f000 fb2d 	bl	8006500 <__assert_func>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005eac:	4610      	mov	r0, r2
 8005eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	bfa4      	itt	ge
 8005eb4:	4623      	movge	r3, r4
 8005eb6:	462c      	movge	r4, r5
 8005eb8:	4638      	mov	r0, r7
 8005eba:	6861      	ldr	r1, [r4, #4]
 8005ebc:	bfa6      	itte	ge
 8005ebe:	461d      	movge	r5, r3
 8005ec0:	2600      	movge	r6, #0
 8005ec2:	2601      	movlt	r6, #1
 8005ec4:	f7ff fd3e 	bl	8005944 <_Balloc>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	b918      	cbnz	r0, 8005ed4 <__mdiff+0x5c>
 8005ecc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <__mdiff+0x110>)
 8005ed2:	e7e5      	b.n	8005ea0 <__mdiff+0x28>
 8005ed4:	f102 0814 	add.w	r8, r2, #20
 8005ed8:	46c2      	mov	sl, r8
 8005eda:	f04f 0c00 	mov.w	ip, #0
 8005ede:	6927      	ldr	r7, [r4, #16]
 8005ee0:	60c6      	str	r6, [r0, #12]
 8005ee2:	692e      	ldr	r6, [r5, #16]
 8005ee4:	f104 0014 	add.w	r0, r4, #20
 8005ee8:	f105 0914 	add.w	r9, r5, #20
 8005eec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005ef0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ef4:	3410      	adds	r4, #16
 8005ef6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005efa:	f859 3b04 	ldr.w	r3, [r9], #4
 8005efe:	fa1f f18b 	uxth.w	r1, fp
 8005f02:	448c      	add	ip, r1
 8005f04:	b299      	uxth	r1, r3
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	ebac 0101 	sub.w	r1, ip, r1
 8005f0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f14:	b289      	uxth	r1, r1
 8005f16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f1a:	454e      	cmp	r6, r9
 8005f1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f20:	f84a 3b04 	str.w	r3, [sl], #4
 8005f24:	d8e7      	bhi.n	8005ef6 <__mdiff+0x7e>
 8005f26:	1b73      	subs	r3, r6, r5
 8005f28:	3b15      	subs	r3, #21
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	3515      	adds	r5, #21
 8005f30:	3304      	adds	r3, #4
 8005f32:	42ae      	cmp	r6, r5
 8005f34:	bf38      	it	cc
 8005f36:	2304      	movcc	r3, #4
 8005f38:	4418      	add	r0, r3
 8005f3a:	4443      	add	r3, r8
 8005f3c:	461e      	mov	r6, r3
 8005f3e:	4605      	mov	r5, r0
 8005f40:	4575      	cmp	r5, lr
 8005f42:	d30e      	bcc.n	8005f62 <__mdiff+0xea>
 8005f44:	f10e 0103 	add.w	r1, lr, #3
 8005f48:	1a09      	subs	r1, r1, r0
 8005f4a:	f021 0103 	bic.w	r1, r1, #3
 8005f4e:	3803      	subs	r0, #3
 8005f50:	4586      	cmp	lr, r0
 8005f52:	bf38      	it	cc
 8005f54:	2100      	movcc	r1, #0
 8005f56:	4419      	add	r1, r3
 8005f58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f5c:	b18b      	cbz	r3, 8005f82 <__mdiff+0x10a>
 8005f5e:	6117      	str	r7, [r2, #16]
 8005f60:	e7a4      	b.n	8005eac <__mdiff+0x34>
 8005f62:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f66:	fa1f f188 	uxth.w	r1, r8
 8005f6a:	4461      	add	r1, ip
 8005f6c:	140c      	asrs	r4, r1, #16
 8005f6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f72:	b289      	uxth	r1, r1
 8005f74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f78:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005f7c:	f846 1b04 	str.w	r1, [r6], #4
 8005f80:	e7de      	b.n	8005f40 <__mdiff+0xc8>
 8005f82:	3f01      	subs	r7, #1
 8005f84:	e7e8      	b.n	8005f58 <__mdiff+0xe0>
 8005f86:	bf00      	nop
 8005f88:	08007e23 	.word	0x08007e23
 8005f8c:	08007e34 	.word	0x08007e34

08005f90 <__d2b>:
 8005f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f94:	2101      	movs	r1, #1
 8005f96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005f9a:	4690      	mov	r8, r2
 8005f9c:	461d      	mov	r5, r3
 8005f9e:	f7ff fcd1 	bl	8005944 <_Balloc>
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	b930      	cbnz	r0, 8005fb4 <__d2b+0x24>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8005fac:	4b24      	ldr	r3, [pc, #144]	; (8006040 <__d2b+0xb0>)
 8005fae:	4825      	ldr	r0, [pc, #148]	; (8006044 <__d2b+0xb4>)
 8005fb0:	f000 faa6 	bl	8006500 <__assert_func>
 8005fb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fbc:	bb2d      	cbnz	r5, 800600a <__d2b+0x7a>
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	f1b8 0300 	subs.w	r3, r8, #0
 8005fc4:	d026      	beq.n	8006014 <__d2b+0x84>
 8005fc6:	4668      	mov	r0, sp
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	f7ff fd83 	bl	8005ad4 <__lo0bits>
 8005fce:	9900      	ldr	r1, [sp, #0]
 8005fd0:	b1f0      	cbz	r0, 8006010 <__d2b+0x80>
 8005fd2:	9a01      	ldr	r2, [sp, #4]
 8005fd4:	f1c0 0320 	rsb	r3, r0, #32
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	40c2      	lsrs	r2, r0
 8005fe0:	6163      	str	r3, [r4, #20]
 8005fe2:	9201      	str	r2, [sp, #4]
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf14      	ite	ne
 8005fea:	2102      	movne	r1, #2
 8005fec:	2101      	moveq	r1, #1
 8005fee:	61a3      	str	r3, [r4, #24]
 8005ff0:	6121      	str	r1, [r4, #16]
 8005ff2:	b1c5      	cbz	r5, 8006026 <__d2b+0x96>
 8005ff4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ff8:	4405      	add	r5, r0
 8005ffa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ffe:	603d      	str	r5, [r7, #0]
 8006000:	6030      	str	r0, [r6, #0]
 8006002:	4620      	mov	r0, r4
 8006004:	b002      	add	sp, #8
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800600e:	e7d6      	b.n	8005fbe <__d2b+0x2e>
 8006010:	6161      	str	r1, [r4, #20]
 8006012:	e7e7      	b.n	8005fe4 <__d2b+0x54>
 8006014:	a801      	add	r0, sp, #4
 8006016:	f7ff fd5d 	bl	8005ad4 <__lo0bits>
 800601a:	2101      	movs	r1, #1
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	6121      	str	r1, [r4, #16]
 8006020:	6163      	str	r3, [r4, #20]
 8006022:	3020      	adds	r0, #32
 8006024:	e7e5      	b.n	8005ff2 <__d2b+0x62>
 8006026:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800602a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800602e:	6038      	str	r0, [r7, #0]
 8006030:	6918      	ldr	r0, [r3, #16]
 8006032:	f7ff fd2f 	bl	8005a94 <__hi0bits>
 8006036:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800603a:	6031      	str	r1, [r6, #0]
 800603c:	e7e1      	b.n	8006002 <__d2b+0x72>
 800603e:	bf00      	nop
 8006040:	08007e23 	.word	0x08007e23
 8006044:	08007e34 	.word	0x08007e34

08006048 <_calloc_r>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	fba1 5402 	umull	r5, r4, r1, r2
 800604e:	b934      	cbnz	r4, 800605e <_calloc_r+0x16>
 8006050:	4629      	mov	r1, r5
 8006052:	f000 f875 	bl	8006140 <_malloc_r>
 8006056:	4606      	mov	r6, r0
 8006058:	b928      	cbnz	r0, 8006066 <_calloc_r+0x1e>
 800605a:	4630      	mov	r0, r6
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	220c      	movs	r2, #12
 8006060:	2600      	movs	r6, #0
 8006062:	6002      	str	r2, [r0, #0]
 8006064:	e7f9      	b.n	800605a <_calloc_r+0x12>
 8006066:	462a      	mov	r2, r5
 8006068:	4621      	mov	r1, r4
 800606a:	f7fe f93f 	bl	80042ec <memset>
 800606e:	e7f4      	b.n	800605a <_calloc_r+0x12>

08006070 <_free_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4605      	mov	r5, r0
 8006074:	2900      	cmp	r1, #0
 8006076:	d040      	beq.n	80060fa <_free_r+0x8a>
 8006078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607c:	1f0c      	subs	r4, r1, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	bfb8      	it	lt
 8006082:	18e4      	addlt	r4, r4, r3
 8006084:	f000 fa98 	bl	80065b8 <__malloc_lock>
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <_free_r+0x8c>)
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	b933      	cbnz	r3, 800609c <_free_r+0x2c>
 800608e:	6063      	str	r3, [r4, #4]
 8006090:	6014      	str	r4, [r2, #0]
 8006092:	4628      	mov	r0, r5
 8006094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006098:	f000 ba94 	b.w	80065c4 <__malloc_unlock>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d908      	bls.n	80060b2 <_free_r+0x42>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	1821      	adds	r1, r4, r0
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf01      	itttt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	1809      	addeq	r1, r1, r0
 80060ae:	6021      	streq	r1, [r4, #0]
 80060b0:	e7ed      	b.n	800608e <_free_r+0x1e>
 80060b2:	461a      	mov	r2, r3
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b10b      	cbz	r3, 80060bc <_free_r+0x4c>
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d9fa      	bls.n	80060b2 <_free_r+0x42>
 80060bc:	6811      	ldr	r1, [r2, #0]
 80060be:	1850      	adds	r0, r2, r1
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d10b      	bne.n	80060dc <_free_r+0x6c>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	4401      	add	r1, r0
 80060c8:	1850      	adds	r0, r2, r1
 80060ca:	4283      	cmp	r3, r0
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	d1e0      	bne.n	8006092 <_free_r+0x22>
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	4401      	add	r1, r0
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	e7da      	b.n	8006092 <_free_r+0x22>
 80060dc:	d902      	bls.n	80060e4 <_free_r+0x74>
 80060de:	230c      	movs	r3, #12
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	e7d6      	b.n	8006092 <_free_r+0x22>
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	1821      	adds	r1, r4, r0
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf01      	itttt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	1809      	addeq	r1, r1, r0
 80060f2:	6021      	streq	r1, [r4, #0]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	6054      	str	r4, [r2, #4]
 80060f8:	e7cb      	b.n	8006092 <_free_r+0x22>
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	2000036c 	.word	0x2000036c

08006100 <sbrk_aligned>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	4e0e      	ldr	r6, [pc, #56]	; (800613c <sbrk_aligned+0x3c>)
 8006104:	460c      	mov	r4, r1
 8006106:	6831      	ldr	r1, [r6, #0]
 8006108:	4605      	mov	r5, r0
 800610a:	b911      	cbnz	r1, 8006112 <sbrk_aligned+0x12>
 800610c:	f000 f9e8 	bl	80064e0 <_sbrk_r>
 8006110:	6030      	str	r0, [r6, #0]
 8006112:	4621      	mov	r1, r4
 8006114:	4628      	mov	r0, r5
 8006116:	f000 f9e3 	bl	80064e0 <_sbrk_r>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d00a      	beq.n	8006134 <sbrk_aligned+0x34>
 800611e:	1cc4      	adds	r4, r0, #3
 8006120:	f024 0403 	bic.w	r4, r4, #3
 8006124:	42a0      	cmp	r0, r4
 8006126:	d007      	beq.n	8006138 <sbrk_aligned+0x38>
 8006128:	1a21      	subs	r1, r4, r0
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f9d8 	bl	80064e0 <_sbrk_r>
 8006130:	3001      	adds	r0, #1
 8006132:	d101      	bne.n	8006138 <sbrk_aligned+0x38>
 8006134:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006138:	4620      	mov	r0, r4
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	20000370 	.word	0x20000370

08006140 <_malloc_r>:
 8006140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006144:	1ccd      	adds	r5, r1, #3
 8006146:	f025 0503 	bic.w	r5, r5, #3
 800614a:	3508      	adds	r5, #8
 800614c:	2d0c      	cmp	r5, #12
 800614e:	bf38      	it	cc
 8006150:	250c      	movcc	r5, #12
 8006152:	2d00      	cmp	r5, #0
 8006154:	4607      	mov	r7, r0
 8006156:	db01      	blt.n	800615c <_malloc_r+0x1c>
 8006158:	42a9      	cmp	r1, r5
 800615a:	d905      	bls.n	8006168 <_malloc_r+0x28>
 800615c:	230c      	movs	r3, #12
 800615e:	2600      	movs	r6, #0
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4630      	mov	r0, r6
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006168:	4e2e      	ldr	r6, [pc, #184]	; (8006224 <_malloc_r+0xe4>)
 800616a:	f000 fa25 	bl	80065b8 <__malloc_lock>
 800616e:	6833      	ldr	r3, [r6, #0]
 8006170:	461c      	mov	r4, r3
 8006172:	bb34      	cbnz	r4, 80061c2 <_malloc_r+0x82>
 8006174:	4629      	mov	r1, r5
 8006176:	4638      	mov	r0, r7
 8006178:	f7ff ffc2 	bl	8006100 <sbrk_aligned>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	4604      	mov	r4, r0
 8006180:	d14d      	bne.n	800621e <_malloc_r+0xde>
 8006182:	6834      	ldr	r4, [r6, #0]
 8006184:	4626      	mov	r6, r4
 8006186:	2e00      	cmp	r6, #0
 8006188:	d140      	bne.n	800620c <_malloc_r+0xcc>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4631      	mov	r1, r6
 800618e:	4638      	mov	r0, r7
 8006190:	eb04 0803 	add.w	r8, r4, r3
 8006194:	f000 f9a4 	bl	80064e0 <_sbrk_r>
 8006198:	4580      	cmp	r8, r0
 800619a:	d13a      	bne.n	8006212 <_malloc_r+0xd2>
 800619c:	6821      	ldr	r1, [r4, #0]
 800619e:	3503      	adds	r5, #3
 80061a0:	1a6d      	subs	r5, r5, r1
 80061a2:	f025 0503 	bic.w	r5, r5, #3
 80061a6:	3508      	adds	r5, #8
 80061a8:	2d0c      	cmp	r5, #12
 80061aa:	bf38      	it	cc
 80061ac:	250c      	movcc	r5, #12
 80061ae:	4638      	mov	r0, r7
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7ff ffa5 	bl	8006100 <sbrk_aligned>
 80061b6:	3001      	adds	r0, #1
 80061b8:	d02b      	beq.n	8006212 <_malloc_r+0xd2>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	442b      	add	r3, r5
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	e00e      	b.n	80061e0 <_malloc_r+0xa0>
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	1b52      	subs	r2, r2, r5
 80061c6:	d41e      	bmi.n	8006206 <_malloc_r+0xc6>
 80061c8:	2a0b      	cmp	r2, #11
 80061ca:	d916      	bls.n	80061fa <_malloc_r+0xba>
 80061cc:	1961      	adds	r1, r4, r5
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	6025      	str	r5, [r4, #0]
 80061d2:	bf18      	it	ne
 80061d4:	6059      	strne	r1, [r3, #4]
 80061d6:	6863      	ldr	r3, [r4, #4]
 80061d8:	bf08      	it	eq
 80061da:	6031      	streq	r1, [r6, #0]
 80061dc:	5162      	str	r2, [r4, r5]
 80061de:	604b      	str	r3, [r1, #4]
 80061e0:	4638      	mov	r0, r7
 80061e2:	f104 060b 	add.w	r6, r4, #11
 80061e6:	f000 f9ed 	bl	80065c4 <__malloc_unlock>
 80061ea:	f026 0607 	bic.w	r6, r6, #7
 80061ee:	1d23      	adds	r3, r4, #4
 80061f0:	1af2      	subs	r2, r6, r3
 80061f2:	d0b6      	beq.n	8006162 <_malloc_r+0x22>
 80061f4:	1b9b      	subs	r3, r3, r6
 80061f6:	50a3      	str	r3, [r4, r2]
 80061f8:	e7b3      	b.n	8006162 <_malloc_r+0x22>
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	bf0c      	ite	eq
 8006200:	6032      	streq	r2, [r6, #0]
 8006202:	605a      	strne	r2, [r3, #4]
 8006204:	e7ec      	b.n	80061e0 <_malloc_r+0xa0>
 8006206:	4623      	mov	r3, r4
 8006208:	6864      	ldr	r4, [r4, #4]
 800620a:	e7b2      	b.n	8006172 <_malloc_r+0x32>
 800620c:	4634      	mov	r4, r6
 800620e:	6876      	ldr	r6, [r6, #4]
 8006210:	e7b9      	b.n	8006186 <_malloc_r+0x46>
 8006212:	230c      	movs	r3, #12
 8006214:	4638      	mov	r0, r7
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	f000 f9d4 	bl	80065c4 <__malloc_unlock>
 800621c:	e7a1      	b.n	8006162 <_malloc_r+0x22>
 800621e:	6025      	str	r5, [r4, #0]
 8006220:	e7de      	b.n	80061e0 <_malloc_r+0xa0>
 8006222:	bf00      	nop
 8006224:	2000036c 	.word	0x2000036c

08006228 <__ssputs_r>:
 8006228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	688e      	ldr	r6, [r1, #8]
 800622e:	4682      	mov	sl, r0
 8006230:	429e      	cmp	r6, r3
 8006232:	460c      	mov	r4, r1
 8006234:	4690      	mov	r8, r2
 8006236:	461f      	mov	r7, r3
 8006238:	d838      	bhi.n	80062ac <__ssputs_r+0x84>
 800623a:	898a      	ldrh	r2, [r1, #12]
 800623c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006240:	d032      	beq.n	80062a8 <__ssputs_r+0x80>
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6909      	ldr	r1, [r1, #16]
 8006246:	3301      	adds	r3, #1
 8006248:	eba5 0901 	sub.w	r9, r5, r1
 800624c:	6965      	ldr	r5, [r4, #20]
 800624e:	444b      	add	r3, r9
 8006250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006258:	106d      	asrs	r5, r5, #1
 800625a:	429d      	cmp	r5, r3
 800625c:	bf38      	it	cc
 800625e:	461d      	movcc	r5, r3
 8006260:	0553      	lsls	r3, r2, #21
 8006262:	d531      	bpl.n	80062c8 <__ssputs_r+0xa0>
 8006264:	4629      	mov	r1, r5
 8006266:	f7ff ff6b 	bl	8006140 <_malloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	b950      	cbnz	r0, 8006284 <__ssputs_r+0x5c>
 800626e:	230c      	movs	r3, #12
 8006270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006274:	f8ca 3000 	str.w	r3, [sl]
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	464a      	mov	r2, r9
 8006286:	6921      	ldr	r1, [r4, #16]
 8006288:	f7ff fb4e 	bl	8005928 <memcpy>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	6126      	str	r6, [r4, #16]
 800629a:	444e      	add	r6, r9
 800629c:	6026      	str	r6, [r4, #0]
 800629e:	463e      	mov	r6, r7
 80062a0:	6165      	str	r5, [r4, #20]
 80062a2:	eba5 0509 	sub.w	r5, r5, r9
 80062a6:	60a5      	str	r5, [r4, #8]
 80062a8:	42be      	cmp	r6, r7
 80062aa:	d900      	bls.n	80062ae <__ssputs_r+0x86>
 80062ac:	463e      	mov	r6, r7
 80062ae:	4632      	mov	r2, r6
 80062b0:	4641      	mov	r1, r8
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	f000 f966 	bl	8006584 <memmove>
 80062b8:	68a3      	ldr	r3, [r4, #8]
 80062ba:	2000      	movs	r0, #0
 80062bc:	1b9b      	subs	r3, r3, r6
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	4433      	add	r3, r6
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	e7db      	b.n	8006280 <__ssputs_r+0x58>
 80062c8:	462a      	mov	r2, r5
 80062ca:	f000 f981 	bl	80065d0 <_realloc_r>
 80062ce:	4606      	mov	r6, r0
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d1e1      	bne.n	8006298 <__ssputs_r+0x70>
 80062d4:	4650      	mov	r0, sl
 80062d6:	6921      	ldr	r1, [r4, #16]
 80062d8:	f7ff feca 	bl	8006070 <_free_r>
 80062dc:	e7c7      	b.n	800626e <__ssputs_r+0x46>
	...

080062e0 <_svfiprintf_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	4698      	mov	r8, r3
 80062e6:	898b      	ldrh	r3, [r1, #12]
 80062e8:	4607      	mov	r7, r0
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	460d      	mov	r5, r1
 80062ee:	4614      	mov	r4, r2
 80062f0:	b09d      	sub	sp, #116	; 0x74
 80062f2:	d50e      	bpl.n	8006312 <_svfiprintf_r+0x32>
 80062f4:	690b      	ldr	r3, [r1, #16]
 80062f6:	b963      	cbnz	r3, 8006312 <_svfiprintf_r+0x32>
 80062f8:	2140      	movs	r1, #64	; 0x40
 80062fa:	f7ff ff21 	bl	8006140 <_malloc_r>
 80062fe:	6028      	str	r0, [r5, #0]
 8006300:	6128      	str	r0, [r5, #16]
 8006302:	b920      	cbnz	r0, 800630e <_svfiprintf_r+0x2e>
 8006304:	230c      	movs	r3, #12
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800630c:	e0d1      	b.n	80064b2 <_svfiprintf_r+0x1d2>
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	616b      	str	r3, [r5, #20]
 8006312:	2300      	movs	r3, #0
 8006314:	9309      	str	r3, [sp, #36]	; 0x24
 8006316:	2320      	movs	r3, #32
 8006318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800631c:	2330      	movs	r3, #48	; 0x30
 800631e:	f04f 0901 	mov.w	r9, #1
 8006322:	f8cd 800c 	str.w	r8, [sp, #12]
 8006326:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064cc <_svfiprintf_r+0x1ec>
 800632a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800632e:	4623      	mov	r3, r4
 8006330:	469a      	mov	sl, r3
 8006332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006336:	b10a      	cbz	r2, 800633c <_svfiprintf_r+0x5c>
 8006338:	2a25      	cmp	r2, #37	; 0x25
 800633a:	d1f9      	bne.n	8006330 <_svfiprintf_r+0x50>
 800633c:	ebba 0b04 	subs.w	fp, sl, r4
 8006340:	d00b      	beq.n	800635a <_svfiprintf_r+0x7a>
 8006342:	465b      	mov	r3, fp
 8006344:	4622      	mov	r2, r4
 8006346:	4629      	mov	r1, r5
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ff6d 	bl	8006228 <__ssputs_r>
 800634e:	3001      	adds	r0, #1
 8006350:	f000 80aa 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006356:	445a      	add	r2, fp
 8006358:	9209      	str	r2, [sp, #36]	; 0x24
 800635a:	f89a 3000 	ldrb.w	r3, [sl]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80a2 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006364:	2300      	movs	r3, #0
 8006366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800636a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800636e:	f10a 0a01 	add.w	sl, sl, #1
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800637a:	931a      	str	r3, [sp, #104]	; 0x68
 800637c:	4654      	mov	r4, sl
 800637e:	2205      	movs	r2, #5
 8006380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006384:	4851      	ldr	r0, [pc, #324]	; (80064cc <_svfiprintf_r+0x1ec>)
 8006386:	f7ff fac1 	bl	800590c <memchr>
 800638a:	9a04      	ldr	r2, [sp, #16]
 800638c:	b9d8      	cbnz	r0, 80063c6 <_svfiprintf_r+0xe6>
 800638e:	06d0      	lsls	r0, r2, #27
 8006390:	bf44      	itt	mi
 8006392:	2320      	movmi	r3, #32
 8006394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006398:	0711      	lsls	r1, r2, #28
 800639a:	bf44      	itt	mi
 800639c:	232b      	movmi	r3, #43	; 0x2b
 800639e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a2:	f89a 3000 	ldrb.w	r3, [sl]
 80063a6:	2b2a      	cmp	r3, #42	; 0x2a
 80063a8:	d015      	beq.n	80063d6 <_svfiprintf_r+0xf6>
 80063aa:	4654      	mov	r4, sl
 80063ac:	2000      	movs	r0, #0
 80063ae:	f04f 0c0a 	mov.w	ip, #10
 80063b2:	9a07      	ldr	r2, [sp, #28]
 80063b4:	4621      	mov	r1, r4
 80063b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ba:	3b30      	subs	r3, #48	; 0x30
 80063bc:	2b09      	cmp	r3, #9
 80063be:	d94e      	bls.n	800645e <_svfiprintf_r+0x17e>
 80063c0:	b1b0      	cbz	r0, 80063f0 <_svfiprintf_r+0x110>
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	e014      	b.n	80063f0 <_svfiprintf_r+0x110>
 80063c6:	eba0 0308 	sub.w	r3, r0, r8
 80063ca:	fa09 f303 	lsl.w	r3, r9, r3
 80063ce:	4313      	orrs	r3, r2
 80063d0:	46a2      	mov	sl, r4
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	e7d2      	b.n	800637c <_svfiprintf_r+0x9c>
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	1d19      	adds	r1, r3, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	9103      	str	r1, [sp, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfbb      	ittet	lt
 80063e2:	425b      	neglt	r3, r3
 80063e4:	f042 0202 	orrlt.w	r2, r2, #2
 80063e8:	9307      	strge	r3, [sp, #28]
 80063ea:	9307      	strlt	r3, [sp, #28]
 80063ec:	bfb8      	it	lt
 80063ee:	9204      	strlt	r2, [sp, #16]
 80063f0:	7823      	ldrb	r3, [r4, #0]
 80063f2:	2b2e      	cmp	r3, #46	; 0x2e
 80063f4:	d10c      	bne.n	8006410 <_svfiprintf_r+0x130>
 80063f6:	7863      	ldrb	r3, [r4, #1]
 80063f8:	2b2a      	cmp	r3, #42	; 0x2a
 80063fa:	d135      	bne.n	8006468 <_svfiprintf_r+0x188>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	3402      	adds	r4, #2
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	9203      	str	r2, [sp, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80064d0 <_svfiprintf_r+0x1f0>
 8006414:	2203      	movs	r2, #3
 8006416:	4650      	mov	r0, sl
 8006418:	7821      	ldrb	r1, [r4, #0]
 800641a:	f7ff fa77 	bl	800590c <memchr>
 800641e:	b140      	cbz	r0, 8006432 <_svfiprintf_r+0x152>
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	eba0 000a 	sub.w	r0, r0, sl
 8006426:	fa03 f000 	lsl.w	r0, r3, r0
 800642a:	9b04      	ldr	r3, [sp, #16]
 800642c:	3401      	adds	r4, #1
 800642e:	4303      	orrs	r3, r0
 8006430:	9304      	str	r3, [sp, #16]
 8006432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006436:	2206      	movs	r2, #6
 8006438:	4826      	ldr	r0, [pc, #152]	; (80064d4 <_svfiprintf_r+0x1f4>)
 800643a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800643e:	f7ff fa65 	bl	800590c <memchr>
 8006442:	2800      	cmp	r0, #0
 8006444:	d038      	beq.n	80064b8 <_svfiprintf_r+0x1d8>
 8006446:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <_svfiprintf_r+0x1f8>)
 8006448:	bb1b      	cbnz	r3, 8006492 <_svfiprintf_r+0x1b2>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	3307      	adds	r3, #7
 800644e:	f023 0307 	bic.w	r3, r3, #7
 8006452:	3308      	adds	r3, #8
 8006454:	9303      	str	r3, [sp, #12]
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	4433      	add	r3, r6
 800645a:	9309      	str	r3, [sp, #36]	; 0x24
 800645c:	e767      	b.n	800632e <_svfiprintf_r+0x4e>
 800645e:	460c      	mov	r4, r1
 8006460:	2001      	movs	r0, #1
 8006462:	fb0c 3202 	mla	r2, ip, r2, r3
 8006466:	e7a5      	b.n	80063b4 <_svfiprintf_r+0xd4>
 8006468:	2300      	movs	r3, #0
 800646a:	f04f 0c0a 	mov.w	ip, #10
 800646e:	4619      	mov	r1, r3
 8006470:	3401      	adds	r4, #1
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	4620      	mov	r0, r4
 8006476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800647a:	3a30      	subs	r2, #48	; 0x30
 800647c:	2a09      	cmp	r2, #9
 800647e:	d903      	bls.n	8006488 <_svfiprintf_r+0x1a8>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0c5      	beq.n	8006410 <_svfiprintf_r+0x130>
 8006484:	9105      	str	r1, [sp, #20]
 8006486:	e7c3      	b.n	8006410 <_svfiprintf_r+0x130>
 8006488:	4604      	mov	r4, r0
 800648a:	2301      	movs	r3, #1
 800648c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006490:	e7f0      	b.n	8006474 <_svfiprintf_r+0x194>
 8006492:	ab03      	add	r3, sp, #12
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	462a      	mov	r2, r5
 8006498:	4638      	mov	r0, r7
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <_svfiprintf_r+0x1fc>)
 800649c:	a904      	add	r1, sp, #16
 800649e:	f7fd ffcb 	bl	8004438 <_printf_float>
 80064a2:	1c42      	adds	r2, r0, #1
 80064a4:	4606      	mov	r6, r0
 80064a6:	d1d6      	bne.n	8006456 <_svfiprintf_r+0x176>
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	065b      	lsls	r3, r3, #25
 80064ac:	f53f af2c 	bmi.w	8006308 <_svfiprintf_r+0x28>
 80064b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b2:	b01d      	add	sp, #116	; 0x74
 80064b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b8:	ab03      	add	r3, sp, #12
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	462a      	mov	r2, r5
 80064be:	4638      	mov	r0, r7
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <_svfiprintf_r+0x1fc>)
 80064c2:	a904      	add	r1, sp, #16
 80064c4:	f7fe fa54 	bl	8004970 <_printf_i>
 80064c8:	e7eb      	b.n	80064a2 <_svfiprintf_r+0x1c2>
 80064ca:	bf00      	nop
 80064cc:	08007f8c 	.word	0x08007f8c
 80064d0:	08007f92 	.word	0x08007f92
 80064d4:	08007f96 	.word	0x08007f96
 80064d8:	08004439 	.word	0x08004439
 80064dc:	08006229 	.word	0x08006229

080064e0 <_sbrk_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	2300      	movs	r3, #0
 80064e4:	4d05      	ldr	r5, [pc, #20]	; (80064fc <_sbrk_r+0x1c>)
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fb fe32 	bl	8002154 <_sbrk>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_sbrk_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_sbrk_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	20000374 	.word	0x20000374

08006500 <__assert_func>:
 8006500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006502:	4614      	mov	r4, r2
 8006504:	461a      	mov	r2, r3
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <__assert_func+0x2c>)
 8006508:	4605      	mov	r5, r0
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68d8      	ldr	r0, [r3, #12]
 800650e:	b14c      	cbz	r4, 8006524 <__assert_func+0x24>
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <__assert_func+0x30>)
 8006512:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006516:	9100      	str	r1, [sp, #0]
 8006518:	462b      	mov	r3, r5
 800651a:	4906      	ldr	r1, [pc, #24]	; (8006534 <__assert_func+0x34>)
 800651c:	f000 f80e 	bl	800653c <fiprintf>
 8006520:	f000 faaa 	bl	8006a78 <abort>
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <__assert_func+0x38>)
 8006526:	461c      	mov	r4, r3
 8006528:	e7f3      	b.n	8006512 <__assert_func+0x12>
 800652a:	bf00      	nop
 800652c:	2000009c 	.word	0x2000009c
 8006530:	08007f9d 	.word	0x08007f9d
 8006534:	08007faa 	.word	0x08007faa
 8006538:	08007fd8 	.word	0x08007fd8

0800653c <fiprintf>:
 800653c:	b40e      	push	{r1, r2, r3}
 800653e:	b503      	push	{r0, r1, lr}
 8006540:	4601      	mov	r1, r0
 8006542:	ab03      	add	r3, sp, #12
 8006544:	4805      	ldr	r0, [pc, #20]	; (800655c <fiprintf+0x20>)
 8006546:	f853 2b04 	ldr.w	r2, [r3], #4
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	f000 f895 	bl	800667c <_vfiprintf_r>
 8006552:	b002      	add	sp, #8
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	2000009c 	.word	0x2000009c

08006560 <__ascii_mbtowc>:
 8006560:	b082      	sub	sp, #8
 8006562:	b901      	cbnz	r1, 8006566 <__ascii_mbtowc+0x6>
 8006564:	a901      	add	r1, sp, #4
 8006566:	b142      	cbz	r2, 800657a <__ascii_mbtowc+0x1a>
 8006568:	b14b      	cbz	r3, 800657e <__ascii_mbtowc+0x1e>
 800656a:	7813      	ldrb	r3, [r2, #0]
 800656c:	600b      	str	r3, [r1, #0]
 800656e:	7812      	ldrb	r2, [r2, #0]
 8006570:	1e10      	subs	r0, r2, #0
 8006572:	bf18      	it	ne
 8006574:	2001      	movne	r0, #1
 8006576:	b002      	add	sp, #8
 8006578:	4770      	bx	lr
 800657a:	4610      	mov	r0, r2
 800657c:	e7fb      	b.n	8006576 <__ascii_mbtowc+0x16>
 800657e:	f06f 0001 	mvn.w	r0, #1
 8006582:	e7f8      	b.n	8006576 <__ascii_mbtowc+0x16>

08006584 <memmove>:
 8006584:	4288      	cmp	r0, r1
 8006586:	b510      	push	{r4, lr}
 8006588:	eb01 0402 	add.w	r4, r1, r2
 800658c:	d902      	bls.n	8006594 <memmove+0x10>
 800658e:	4284      	cmp	r4, r0
 8006590:	4623      	mov	r3, r4
 8006592:	d807      	bhi.n	80065a4 <memmove+0x20>
 8006594:	1e43      	subs	r3, r0, #1
 8006596:	42a1      	cmp	r1, r4
 8006598:	d008      	beq.n	80065ac <memmove+0x28>
 800659a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800659e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065a2:	e7f8      	b.n	8006596 <memmove+0x12>
 80065a4:	4601      	mov	r1, r0
 80065a6:	4402      	add	r2, r0
 80065a8:	428a      	cmp	r2, r1
 80065aa:	d100      	bne.n	80065ae <memmove+0x2a>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065b6:	e7f7      	b.n	80065a8 <memmove+0x24>

080065b8 <__malloc_lock>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__malloc_lock+0x8>)
 80065ba:	f000 bc19 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 80065be:	bf00      	nop
 80065c0:	20000378 	.word	0x20000378

080065c4 <__malloc_unlock>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__malloc_unlock+0x8>)
 80065c6:	f000 bc14 	b.w	8006df2 <__retarget_lock_release_recursive>
 80065ca:	bf00      	nop
 80065cc:	20000378 	.word	0x20000378

080065d0 <_realloc_r>:
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	4680      	mov	r8, r0
 80065d6:	4614      	mov	r4, r2
 80065d8:	460e      	mov	r6, r1
 80065da:	b921      	cbnz	r1, 80065e6 <_realloc_r+0x16>
 80065dc:	4611      	mov	r1, r2
 80065de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e2:	f7ff bdad 	b.w	8006140 <_malloc_r>
 80065e6:	b92a      	cbnz	r2, 80065f4 <_realloc_r+0x24>
 80065e8:	f7ff fd42 	bl	8006070 <_free_r>
 80065ec:	4625      	mov	r5, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	f000 fc64 	bl	8006ec0 <_malloc_usable_size_r>
 80065f8:	4284      	cmp	r4, r0
 80065fa:	4607      	mov	r7, r0
 80065fc:	d802      	bhi.n	8006604 <_realloc_r+0x34>
 80065fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006602:	d812      	bhi.n	800662a <_realloc_r+0x5a>
 8006604:	4621      	mov	r1, r4
 8006606:	4640      	mov	r0, r8
 8006608:	f7ff fd9a 	bl	8006140 <_malloc_r>
 800660c:	4605      	mov	r5, r0
 800660e:	2800      	cmp	r0, #0
 8006610:	d0ed      	beq.n	80065ee <_realloc_r+0x1e>
 8006612:	42bc      	cmp	r4, r7
 8006614:	4622      	mov	r2, r4
 8006616:	4631      	mov	r1, r6
 8006618:	bf28      	it	cs
 800661a:	463a      	movcs	r2, r7
 800661c:	f7ff f984 	bl	8005928 <memcpy>
 8006620:	4631      	mov	r1, r6
 8006622:	4640      	mov	r0, r8
 8006624:	f7ff fd24 	bl	8006070 <_free_r>
 8006628:	e7e1      	b.n	80065ee <_realloc_r+0x1e>
 800662a:	4635      	mov	r5, r6
 800662c:	e7df      	b.n	80065ee <_realloc_r+0x1e>

0800662e <__sfputc_r>:
 800662e:	6893      	ldr	r3, [r2, #8]
 8006630:	b410      	push	{r4}
 8006632:	3b01      	subs	r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	da07      	bge.n	800664a <__sfputc_r+0x1c>
 800663a:	6994      	ldr	r4, [r2, #24]
 800663c:	42a3      	cmp	r3, r4
 800663e:	db01      	blt.n	8006644 <__sfputc_r+0x16>
 8006640:	290a      	cmp	r1, #10
 8006642:	d102      	bne.n	800664a <__sfputc_r+0x1c>
 8006644:	bc10      	pop	{r4}
 8006646:	f000 b949 	b.w	80068dc <__swbuf_r>
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	1c58      	adds	r0, r3, #1
 800664e:	6010      	str	r0, [r2, #0]
 8006650:	7019      	strb	r1, [r3, #0]
 8006652:	4608      	mov	r0, r1
 8006654:	bc10      	pop	{r4}
 8006656:	4770      	bx	lr

08006658 <__sfputs_r>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	4606      	mov	r6, r0
 800665c:	460f      	mov	r7, r1
 800665e:	4614      	mov	r4, r2
 8006660:	18d5      	adds	r5, r2, r3
 8006662:	42ac      	cmp	r4, r5
 8006664:	d101      	bne.n	800666a <__sfputs_r+0x12>
 8006666:	2000      	movs	r0, #0
 8006668:	e007      	b.n	800667a <__sfputs_r+0x22>
 800666a:	463a      	mov	r2, r7
 800666c:	4630      	mov	r0, r6
 800666e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006672:	f7ff ffdc 	bl	800662e <__sfputc_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d1f3      	bne.n	8006662 <__sfputs_r+0xa>
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800667c <_vfiprintf_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	460d      	mov	r5, r1
 8006682:	4614      	mov	r4, r2
 8006684:	4698      	mov	r8, r3
 8006686:	4606      	mov	r6, r0
 8006688:	b09d      	sub	sp, #116	; 0x74
 800668a:	b118      	cbz	r0, 8006694 <_vfiprintf_r+0x18>
 800668c:	6983      	ldr	r3, [r0, #24]
 800668e:	b90b      	cbnz	r3, 8006694 <_vfiprintf_r+0x18>
 8006690:	f000 fb10 	bl	8006cb4 <__sinit>
 8006694:	4b89      	ldr	r3, [pc, #548]	; (80068bc <_vfiprintf_r+0x240>)
 8006696:	429d      	cmp	r5, r3
 8006698:	d11b      	bne.n	80066d2 <_vfiprintf_r+0x56>
 800669a:	6875      	ldr	r5, [r6, #4]
 800669c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d405      	bmi.n	80066ae <_vfiprintf_r+0x32>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	059a      	lsls	r2, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_vfiprintf_r+0x32>
 80066a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066aa:	f000 fba1 	bl	8006df0 <__retarget_lock_acquire_recursive>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	071b      	lsls	r3, r3, #28
 80066b2:	d501      	bpl.n	80066b8 <_vfiprintf_r+0x3c>
 80066b4:	692b      	ldr	r3, [r5, #16]
 80066b6:	b9eb      	cbnz	r3, 80066f4 <_vfiprintf_r+0x78>
 80066b8:	4629      	mov	r1, r5
 80066ba:	4630      	mov	r0, r6
 80066bc:	f000 f96e 	bl	800699c <__swsetup_r>
 80066c0:	b1c0      	cbz	r0, 80066f4 <_vfiprintf_r+0x78>
 80066c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066c4:	07dc      	lsls	r4, r3, #31
 80066c6:	d50e      	bpl.n	80066e6 <_vfiprintf_r+0x6a>
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066cc:	b01d      	add	sp, #116	; 0x74
 80066ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d2:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <_vfiprintf_r+0x244>)
 80066d4:	429d      	cmp	r5, r3
 80066d6:	d101      	bne.n	80066dc <_vfiprintf_r+0x60>
 80066d8:	68b5      	ldr	r5, [r6, #8]
 80066da:	e7df      	b.n	800669c <_vfiprintf_r+0x20>
 80066dc:	4b79      	ldr	r3, [pc, #484]	; (80068c4 <_vfiprintf_r+0x248>)
 80066de:	429d      	cmp	r5, r3
 80066e0:	bf08      	it	eq
 80066e2:	68f5      	ldreq	r5, [r6, #12]
 80066e4:	e7da      	b.n	800669c <_vfiprintf_r+0x20>
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	0598      	lsls	r0, r3, #22
 80066ea:	d4ed      	bmi.n	80066c8 <_vfiprintf_r+0x4c>
 80066ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ee:	f000 fb80 	bl	8006df2 <__retarget_lock_release_recursive>
 80066f2:	e7e9      	b.n	80066c8 <_vfiprintf_r+0x4c>
 80066f4:	2300      	movs	r3, #0
 80066f6:	9309      	str	r3, [sp, #36]	; 0x24
 80066f8:	2320      	movs	r3, #32
 80066fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066fe:	2330      	movs	r3, #48	; 0x30
 8006700:	f04f 0901 	mov.w	r9, #1
 8006704:	f8cd 800c 	str.w	r8, [sp, #12]
 8006708:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80068c8 <_vfiprintf_r+0x24c>
 800670c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006710:	4623      	mov	r3, r4
 8006712:	469a      	mov	sl, r3
 8006714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006718:	b10a      	cbz	r2, 800671e <_vfiprintf_r+0xa2>
 800671a:	2a25      	cmp	r2, #37	; 0x25
 800671c:	d1f9      	bne.n	8006712 <_vfiprintf_r+0x96>
 800671e:	ebba 0b04 	subs.w	fp, sl, r4
 8006722:	d00b      	beq.n	800673c <_vfiprintf_r+0xc0>
 8006724:	465b      	mov	r3, fp
 8006726:	4622      	mov	r2, r4
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ff94 	bl	8006658 <__sfputs_r>
 8006730:	3001      	adds	r0, #1
 8006732:	f000 80aa 	beq.w	800688a <_vfiprintf_r+0x20e>
 8006736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006738:	445a      	add	r2, fp
 800673a:	9209      	str	r2, [sp, #36]	; 0x24
 800673c:	f89a 3000 	ldrb.w	r3, [sl]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80a2 	beq.w	800688a <_vfiprintf_r+0x20e>
 8006746:	2300      	movs	r3, #0
 8006748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800674c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006750:	f10a 0a01 	add.w	sl, sl, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800675c:	931a      	str	r3, [sp, #104]	; 0x68
 800675e:	4654      	mov	r4, sl
 8006760:	2205      	movs	r2, #5
 8006762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006766:	4858      	ldr	r0, [pc, #352]	; (80068c8 <_vfiprintf_r+0x24c>)
 8006768:	f7ff f8d0 	bl	800590c <memchr>
 800676c:	9a04      	ldr	r2, [sp, #16]
 800676e:	b9d8      	cbnz	r0, 80067a8 <_vfiprintf_r+0x12c>
 8006770:	06d1      	lsls	r1, r2, #27
 8006772:	bf44      	itt	mi
 8006774:	2320      	movmi	r3, #32
 8006776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800677a:	0713      	lsls	r3, r2, #28
 800677c:	bf44      	itt	mi
 800677e:	232b      	movmi	r3, #43	; 0x2b
 8006780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b2a      	cmp	r3, #42	; 0x2a
 800678a:	d015      	beq.n	80067b8 <_vfiprintf_r+0x13c>
 800678c:	4654      	mov	r4, sl
 800678e:	2000      	movs	r0, #0
 8006790:	f04f 0c0a 	mov.w	ip, #10
 8006794:	9a07      	ldr	r2, [sp, #28]
 8006796:	4621      	mov	r1, r4
 8006798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679c:	3b30      	subs	r3, #48	; 0x30
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d94e      	bls.n	8006840 <_vfiprintf_r+0x1c4>
 80067a2:	b1b0      	cbz	r0, 80067d2 <_vfiprintf_r+0x156>
 80067a4:	9207      	str	r2, [sp, #28]
 80067a6:	e014      	b.n	80067d2 <_vfiprintf_r+0x156>
 80067a8:	eba0 0308 	sub.w	r3, r0, r8
 80067ac:	fa09 f303 	lsl.w	r3, r9, r3
 80067b0:	4313      	orrs	r3, r2
 80067b2:	46a2      	mov	sl, r4
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	e7d2      	b.n	800675e <_vfiprintf_r+0xe2>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	1d19      	adds	r1, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	9103      	str	r1, [sp, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfbb      	ittet	lt
 80067c4:	425b      	neglt	r3, r3
 80067c6:	f042 0202 	orrlt.w	r2, r2, #2
 80067ca:	9307      	strge	r3, [sp, #28]
 80067cc:	9307      	strlt	r3, [sp, #28]
 80067ce:	bfb8      	it	lt
 80067d0:	9204      	strlt	r2, [sp, #16]
 80067d2:	7823      	ldrb	r3, [r4, #0]
 80067d4:	2b2e      	cmp	r3, #46	; 0x2e
 80067d6:	d10c      	bne.n	80067f2 <_vfiprintf_r+0x176>
 80067d8:	7863      	ldrb	r3, [r4, #1]
 80067da:	2b2a      	cmp	r3, #42	; 0x2a
 80067dc:	d135      	bne.n	800684a <_vfiprintf_r+0x1ce>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	3402      	adds	r4, #2
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	9203      	str	r2, [sp, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bfb8      	it	lt
 80067ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80068cc <_vfiprintf_r+0x250>
 80067f6:	2203      	movs	r2, #3
 80067f8:	4650      	mov	r0, sl
 80067fa:	7821      	ldrb	r1, [r4, #0]
 80067fc:	f7ff f886 	bl	800590c <memchr>
 8006800:	b140      	cbz	r0, 8006814 <_vfiprintf_r+0x198>
 8006802:	2340      	movs	r3, #64	; 0x40
 8006804:	eba0 000a 	sub.w	r0, r0, sl
 8006808:	fa03 f000 	lsl.w	r0, r3, r0
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	3401      	adds	r4, #1
 8006810:	4303      	orrs	r3, r0
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006818:	2206      	movs	r2, #6
 800681a:	482d      	ldr	r0, [pc, #180]	; (80068d0 <_vfiprintf_r+0x254>)
 800681c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006820:	f7ff f874 	bl	800590c <memchr>
 8006824:	2800      	cmp	r0, #0
 8006826:	d03f      	beq.n	80068a8 <_vfiprintf_r+0x22c>
 8006828:	4b2a      	ldr	r3, [pc, #168]	; (80068d4 <_vfiprintf_r+0x258>)
 800682a:	bb1b      	cbnz	r3, 8006874 <_vfiprintf_r+0x1f8>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	3307      	adds	r3, #7
 8006830:	f023 0307 	bic.w	r3, r3, #7
 8006834:	3308      	adds	r3, #8
 8006836:	9303      	str	r3, [sp, #12]
 8006838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683a:	443b      	add	r3, r7
 800683c:	9309      	str	r3, [sp, #36]	; 0x24
 800683e:	e767      	b.n	8006710 <_vfiprintf_r+0x94>
 8006840:	460c      	mov	r4, r1
 8006842:	2001      	movs	r0, #1
 8006844:	fb0c 3202 	mla	r2, ip, r2, r3
 8006848:	e7a5      	b.n	8006796 <_vfiprintf_r+0x11a>
 800684a:	2300      	movs	r3, #0
 800684c:	f04f 0c0a 	mov.w	ip, #10
 8006850:	4619      	mov	r1, r3
 8006852:	3401      	adds	r4, #1
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	4620      	mov	r0, r4
 8006858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800685c:	3a30      	subs	r2, #48	; 0x30
 800685e:	2a09      	cmp	r2, #9
 8006860:	d903      	bls.n	800686a <_vfiprintf_r+0x1ee>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0c5      	beq.n	80067f2 <_vfiprintf_r+0x176>
 8006866:	9105      	str	r1, [sp, #20]
 8006868:	e7c3      	b.n	80067f2 <_vfiprintf_r+0x176>
 800686a:	4604      	mov	r4, r0
 800686c:	2301      	movs	r3, #1
 800686e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006872:	e7f0      	b.n	8006856 <_vfiprintf_r+0x1da>
 8006874:	ab03      	add	r3, sp, #12
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	462a      	mov	r2, r5
 800687a:	4630      	mov	r0, r6
 800687c:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <_vfiprintf_r+0x25c>)
 800687e:	a904      	add	r1, sp, #16
 8006880:	f7fd fdda 	bl	8004438 <_printf_float>
 8006884:	4607      	mov	r7, r0
 8006886:	1c78      	adds	r0, r7, #1
 8006888:	d1d6      	bne.n	8006838 <_vfiprintf_r+0x1bc>
 800688a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800688c:	07d9      	lsls	r1, r3, #31
 800688e:	d405      	bmi.n	800689c <_vfiprintf_r+0x220>
 8006890:	89ab      	ldrh	r3, [r5, #12]
 8006892:	059a      	lsls	r2, r3, #22
 8006894:	d402      	bmi.n	800689c <_vfiprintf_r+0x220>
 8006896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006898:	f000 faab 	bl	8006df2 <__retarget_lock_release_recursive>
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	065b      	lsls	r3, r3, #25
 80068a0:	f53f af12 	bmi.w	80066c8 <_vfiprintf_r+0x4c>
 80068a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a6:	e711      	b.n	80066cc <_vfiprintf_r+0x50>
 80068a8:	ab03      	add	r3, sp, #12
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	462a      	mov	r2, r5
 80068ae:	4630      	mov	r0, r6
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <_vfiprintf_r+0x25c>)
 80068b2:	a904      	add	r1, sp, #16
 80068b4:	f7fe f85c 	bl	8004970 <_printf_i>
 80068b8:	e7e4      	b.n	8006884 <_vfiprintf_r+0x208>
 80068ba:	bf00      	nop
 80068bc:	08008104 	.word	0x08008104
 80068c0:	08008124 	.word	0x08008124
 80068c4:	080080e4 	.word	0x080080e4
 80068c8:	08007f8c 	.word	0x08007f8c
 80068cc:	08007f92 	.word	0x08007f92
 80068d0:	08007f96 	.word	0x08007f96
 80068d4:	08004439 	.word	0x08004439
 80068d8:	08006659 	.word	0x08006659

080068dc <__swbuf_r>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	460e      	mov	r6, r1
 80068e0:	4614      	mov	r4, r2
 80068e2:	4605      	mov	r5, r0
 80068e4:	b118      	cbz	r0, 80068ee <__swbuf_r+0x12>
 80068e6:	6983      	ldr	r3, [r0, #24]
 80068e8:	b90b      	cbnz	r3, 80068ee <__swbuf_r+0x12>
 80068ea:	f000 f9e3 	bl	8006cb4 <__sinit>
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <__swbuf_r+0x98>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d12b      	bne.n	800694c <__swbuf_r+0x70>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d52f      	bpl.n	8006960 <__swbuf_r+0x84>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b36b      	cbz	r3, 8006960 <__swbuf_r+0x84>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	b2f6      	uxtb	r6, r6
 800690a:	1ac0      	subs	r0, r0, r3
 800690c:	6963      	ldr	r3, [r4, #20]
 800690e:	4637      	mov	r7, r6
 8006910:	4283      	cmp	r3, r0
 8006912:	dc04      	bgt.n	800691e <__swbuf_r+0x42>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f938 	bl	8006b8c <_fflush_r>
 800691c:	bb30      	cbnz	r0, 800696c <__swbuf_r+0x90>
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	3001      	adds	r0, #1
 8006922:	3b01      	subs	r3, #1
 8006924:	60a3      	str	r3, [r4, #8]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	6022      	str	r2, [r4, #0]
 800692c:	701e      	strb	r6, [r3, #0]
 800692e:	6963      	ldr	r3, [r4, #20]
 8006930:	4283      	cmp	r3, r0
 8006932:	d004      	beq.n	800693e <__swbuf_r+0x62>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d506      	bpl.n	8006948 <__swbuf_r+0x6c>
 800693a:	2e0a      	cmp	r6, #10
 800693c:	d104      	bne.n	8006948 <__swbuf_r+0x6c>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f923 	bl	8006b8c <_fflush_r>
 8006946:	b988      	cbnz	r0, 800696c <__swbuf_r+0x90>
 8006948:	4638      	mov	r0, r7
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <__swbuf_r+0x9c>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <__swbuf_r+0x7a>
 8006952:	68ac      	ldr	r4, [r5, #8]
 8006954:	e7cf      	b.n	80068f6 <__swbuf_r+0x1a>
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <__swbuf_r+0xa0>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68ec      	ldreq	r4, [r5, #12]
 800695e:	e7ca      	b.n	80068f6 <__swbuf_r+0x1a>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f81a 	bl	800699c <__swsetup_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0cb      	beq.n	8006904 <__swbuf_r+0x28>
 800696c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006970:	e7ea      	b.n	8006948 <__swbuf_r+0x6c>
 8006972:	bf00      	nop
 8006974:	08008104 	.word	0x08008104
 8006978:	08008124 	.word	0x08008124
 800697c:	080080e4 	.word	0x080080e4

08006980 <__ascii_wctomb>:
 8006980:	4603      	mov	r3, r0
 8006982:	4608      	mov	r0, r1
 8006984:	b141      	cbz	r1, 8006998 <__ascii_wctomb+0x18>
 8006986:	2aff      	cmp	r2, #255	; 0xff
 8006988:	d904      	bls.n	8006994 <__ascii_wctomb+0x14>
 800698a:	228a      	movs	r2, #138	; 0x8a
 800698c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	4770      	bx	lr
 8006994:	2001      	movs	r0, #1
 8006996:	700a      	strb	r2, [r1, #0]
 8006998:	4770      	bx	lr
	...

0800699c <__swsetup_r>:
 800699c:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <__swsetup_r+0xcc>)
 800699e:	b570      	push	{r4, r5, r6, lr}
 80069a0:	681d      	ldr	r5, [r3, #0]
 80069a2:	4606      	mov	r6, r0
 80069a4:	460c      	mov	r4, r1
 80069a6:	b125      	cbz	r5, 80069b2 <__swsetup_r+0x16>
 80069a8:	69ab      	ldr	r3, [r5, #24]
 80069aa:	b913      	cbnz	r3, 80069b2 <__swsetup_r+0x16>
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 f981 	bl	8006cb4 <__sinit>
 80069b2:	4b2e      	ldr	r3, [pc, #184]	; (8006a6c <__swsetup_r+0xd0>)
 80069b4:	429c      	cmp	r4, r3
 80069b6:	d10f      	bne.n	80069d8 <__swsetup_r+0x3c>
 80069b8:	686c      	ldr	r4, [r5, #4]
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c0:	0719      	lsls	r1, r3, #28
 80069c2:	d42c      	bmi.n	8006a1e <__swsetup_r+0x82>
 80069c4:	06dd      	lsls	r5, r3, #27
 80069c6:	d411      	bmi.n	80069ec <__swsetup_r+0x50>
 80069c8:	2309      	movs	r3, #9
 80069ca:	6033      	str	r3, [r6, #0]
 80069cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	e03e      	b.n	8006a56 <__swsetup_r+0xba>
 80069d8:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <__swsetup_r+0xd4>)
 80069da:	429c      	cmp	r4, r3
 80069dc:	d101      	bne.n	80069e2 <__swsetup_r+0x46>
 80069de:	68ac      	ldr	r4, [r5, #8]
 80069e0:	e7eb      	b.n	80069ba <__swsetup_r+0x1e>
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <__swsetup_r+0xd8>)
 80069e4:	429c      	cmp	r4, r3
 80069e6:	bf08      	it	eq
 80069e8:	68ec      	ldreq	r4, [r5, #12]
 80069ea:	e7e6      	b.n	80069ba <__swsetup_r+0x1e>
 80069ec:	0758      	lsls	r0, r3, #29
 80069ee:	d512      	bpl.n	8006a16 <__swsetup_r+0x7a>
 80069f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f2:	b141      	cbz	r1, 8006a06 <__swsetup_r+0x6a>
 80069f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f8:	4299      	cmp	r1, r3
 80069fa:	d002      	beq.n	8006a02 <__swsetup_r+0x66>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff fb37 	bl	8006070 <_free_r>
 8006a02:	2300      	movs	r3, #0
 8006a04:	6363      	str	r3, [r4, #52]	; 0x34
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f043 0308 	orr.w	r3, r3, #8
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	b94b      	cbnz	r3, 8006a36 <__swsetup_r+0x9a>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d003      	beq.n	8006a36 <__swsetup_r+0x9a>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 fa05 	bl	8006e40 <__smakebuf_r>
 8006a36:	89a0      	ldrh	r0, [r4, #12]
 8006a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a3c:	f010 0301 	ands.w	r3, r0, #1
 8006a40:	d00a      	beq.n	8006a58 <__swsetup_r+0xbc>
 8006a42:	2300      	movs	r3, #0
 8006a44:	60a3      	str	r3, [r4, #8]
 8006a46:	6963      	ldr	r3, [r4, #20]
 8006a48:	425b      	negs	r3, r3
 8006a4a:	61a3      	str	r3, [r4, #24]
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	b943      	cbnz	r3, 8006a62 <__swsetup_r+0xc6>
 8006a50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a54:	d1ba      	bne.n	80069cc <__swsetup_r+0x30>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	0781      	lsls	r1, r0, #30
 8006a5a:	bf58      	it	pl
 8006a5c:	6963      	ldrpl	r3, [r4, #20]
 8006a5e:	60a3      	str	r3, [r4, #8]
 8006a60:	e7f4      	b.n	8006a4c <__swsetup_r+0xb0>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e7f7      	b.n	8006a56 <__swsetup_r+0xba>
 8006a66:	bf00      	nop
 8006a68:	2000009c 	.word	0x2000009c
 8006a6c:	08008104 	.word	0x08008104
 8006a70:	08008124 	.word	0x08008124
 8006a74:	080080e4 	.word	0x080080e4

08006a78 <abort>:
 8006a78:	2006      	movs	r0, #6
 8006a7a:	b508      	push	{r3, lr}
 8006a7c:	f000 fa50 	bl	8006f20 <raise>
 8006a80:	2001      	movs	r0, #1
 8006a82:	f7fb faf3 	bl	800206c <_exit>
	...

08006a88 <__sflush_r>:
 8006a88:	898a      	ldrh	r2, [r1, #12]
 8006a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	0710      	lsls	r0, r2, #28
 8006a90:	460c      	mov	r4, r1
 8006a92:	d457      	bmi.n	8006b44 <__sflush_r+0xbc>
 8006a94:	684b      	ldr	r3, [r1, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc04      	bgt.n	8006aa4 <__sflush_r+0x1c>
 8006a9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dc01      	bgt.n	8006aa4 <__sflush_r+0x1c>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa6:	2e00      	cmp	r6, #0
 8006aa8:	d0fa      	beq.n	8006aa0 <__sflush_r+0x18>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ab0:	682f      	ldr	r7, [r5, #0]
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	d032      	beq.n	8006b1c <__sflush_r+0x94>
 8006ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	075a      	lsls	r2, r3, #29
 8006abc:	d505      	bpl.n	8006aca <__sflush_r+0x42>
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	1ac0      	subs	r0, r0, r3
 8006ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac4:	b10b      	cbz	r3, 8006aca <__sflush_r+0x42>
 8006ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ac8:	1ac0      	subs	r0, r0, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	4602      	mov	r2, r0
 8006ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	6a21      	ldr	r1, [r4, #32]
 8006ad4:	47b0      	blx	r6
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	d106      	bne.n	8006aea <__sflush_r+0x62>
 8006adc:	6829      	ldr	r1, [r5, #0]
 8006ade:	291d      	cmp	r1, #29
 8006ae0:	d82c      	bhi.n	8006b3c <__sflush_r+0xb4>
 8006ae2:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <__sflush_r+0x100>)
 8006ae4:	40ca      	lsrs	r2, r1
 8006ae6:	07d6      	lsls	r6, r2, #31
 8006ae8:	d528      	bpl.n	8006b3c <__sflush_r+0xb4>
 8006aea:	2200      	movs	r2, #0
 8006aec:	6062      	str	r2, [r4, #4]
 8006aee:	6922      	ldr	r2, [r4, #16]
 8006af0:	04d9      	lsls	r1, r3, #19
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	d504      	bpl.n	8006b00 <__sflush_r+0x78>
 8006af6:	1c42      	adds	r2, r0, #1
 8006af8:	d101      	bne.n	8006afe <__sflush_r+0x76>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	b903      	cbnz	r3, 8006b00 <__sflush_r+0x78>
 8006afe:	6560      	str	r0, [r4, #84]	; 0x54
 8006b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b02:	602f      	str	r7, [r5, #0]
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d0cb      	beq.n	8006aa0 <__sflush_r+0x18>
 8006b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <__sflush_r+0x8e>
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7ff faad 	bl	8006070 <_free_r>
 8006b16:	2000      	movs	r0, #0
 8006b18:	6360      	str	r0, [r4, #52]	; 0x34
 8006b1a:	e7c2      	b.n	8006aa2 <__sflush_r+0x1a>
 8006b1c:	6a21      	ldr	r1, [r4, #32]
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b0      	blx	r6
 8006b24:	1c41      	adds	r1, r0, #1
 8006b26:	d1c7      	bne.n	8006ab8 <__sflush_r+0x30>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0c4      	beq.n	8006ab8 <__sflush_r+0x30>
 8006b2e:	2b1d      	cmp	r3, #29
 8006b30:	d001      	beq.n	8006b36 <__sflush_r+0xae>
 8006b32:	2b16      	cmp	r3, #22
 8006b34:	d101      	bne.n	8006b3a <__sflush_r+0xb2>
 8006b36:	602f      	str	r7, [r5, #0]
 8006b38:	e7b2      	b.n	8006aa0 <__sflush_r+0x18>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	e7ae      	b.n	8006aa2 <__sflush_r+0x1a>
 8006b44:	690f      	ldr	r7, [r1, #16]
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	d0aa      	beq.n	8006aa0 <__sflush_r+0x18>
 8006b4a:	0793      	lsls	r3, r2, #30
 8006b4c:	bf18      	it	ne
 8006b4e:	2300      	movne	r3, #0
 8006b50:	680e      	ldr	r6, [r1, #0]
 8006b52:	bf08      	it	eq
 8006b54:	694b      	ldreq	r3, [r1, #20]
 8006b56:	1bf6      	subs	r6, r6, r7
 8006b58:	600f      	str	r7, [r1, #0]
 8006b5a:	608b      	str	r3, [r1, #8]
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	dd9f      	ble.n	8006aa0 <__sflush_r+0x18>
 8006b60:	4633      	mov	r3, r6
 8006b62:	463a      	mov	r2, r7
 8006b64:	4628      	mov	r0, r5
 8006b66:	6a21      	ldr	r1, [r4, #32]
 8006b68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006b6c:	47e0      	blx	ip
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	dc06      	bgt.n	8006b80 <__sflush_r+0xf8>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7c:	81a3      	strh	r3, [r4, #12]
 8006b7e:	e790      	b.n	8006aa2 <__sflush_r+0x1a>
 8006b80:	4407      	add	r7, r0
 8006b82:	1a36      	subs	r6, r6, r0
 8006b84:	e7ea      	b.n	8006b5c <__sflush_r+0xd4>
 8006b86:	bf00      	nop
 8006b88:	20400001 	.word	0x20400001

08006b8c <_fflush_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	690b      	ldr	r3, [r1, #16]
 8006b90:	4605      	mov	r5, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	b913      	cbnz	r3, 8006b9c <_fflush_r+0x10>
 8006b96:	2500      	movs	r5, #0
 8006b98:	4628      	mov	r0, r5
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	b118      	cbz	r0, 8006ba6 <_fflush_r+0x1a>
 8006b9e:	6983      	ldr	r3, [r0, #24]
 8006ba0:	b90b      	cbnz	r3, 8006ba6 <_fflush_r+0x1a>
 8006ba2:	f000 f887 	bl	8006cb4 <__sinit>
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <_fflush_r+0x6c>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	d11b      	bne.n	8006be4 <_fflush_r+0x58>
 8006bac:	686c      	ldr	r4, [r5, #4]
 8006bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0ef      	beq.n	8006b96 <_fflush_r+0xa>
 8006bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bb8:	07d0      	lsls	r0, r2, #31
 8006bba:	d404      	bmi.n	8006bc6 <_fflush_r+0x3a>
 8006bbc:	0599      	lsls	r1, r3, #22
 8006bbe:	d402      	bmi.n	8006bc6 <_fflush_r+0x3a>
 8006bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc2:	f000 f915 	bl	8006df0 <__retarget_lock_acquire_recursive>
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f7ff ff5d 	bl	8006a88 <__sflush_r>
 8006bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	07da      	lsls	r2, r3, #31
 8006bd4:	d4e0      	bmi.n	8006b98 <_fflush_r+0xc>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	059b      	lsls	r3, r3, #22
 8006bda:	d4dd      	bmi.n	8006b98 <_fflush_r+0xc>
 8006bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bde:	f000 f908 	bl	8006df2 <__retarget_lock_release_recursive>
 8006be2:	e7d9      	b.n	8006b98 <_fflush_r+0xc>
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <_fflush_r+0x70>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d101      	bne.n	8006bee <_fflush_r+0x62>
 8006bea:	68ac      	ldr	r4, [r5, #8]
 8006bec:	e7df      	b.n	8006bae <_fflush_r+0x22>
 8006bee:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <_fflush_r+0x74>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	bf08      	it	eq
 8006bf4:	68ec      	ldreq	r4, [r5, #12]
 8006bf6:	e7da      	b.n	8006bae <_fflush_r+0x22>
 8006bf8:	08008104 	.word	0x08008104
 8006bfc:	08008124 	.word	0x08008124
 8006c00:	080080e4 	.word	0x080080e4

08006c04 <std>:
 8006c04:	2300      	movs	r3, #0
 8006c06:	b510      	push	{r4, lr}
 8006c08:	4604      	mov	r4, r0
 8006c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c12:	6083      	str	r3, [r0, #8]
 8006c14:	8181      	strh	r1, [r0, #12]
 8006c16:	6643      	str	r3, [r0, #100]	; 0x64
 8006c18:	81c2      	strh	r2, [r0, #14]
 8006c1a:	6183      	str	r3, [r0, #24]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	2208      	movs	r2, #8
 8006c20:	305c      	adds	r0, #92	; 0x5c
 8006c22:	f7fd fb63 	bl	80042ec <memset>
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <std+0x38>)
 8006c28:	6224      	str	r4, [r4, #32]
 8006c2a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <std+0x3c>)
 8006c2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c30:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <std+0x40>)
 8006c32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c34:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <std+0x44>)
 8006c36:	6323      	str	r3, [r4, #48]	; 0x30
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08006f59 	.word	0x08006f59
 8006c40:	08006f7b 	.word	0x08006f7b
 8006c44:	08006fb3 	.word	0x08006fb3
 8006c48:	08006fd7 	.word	0x08006fd7

08006c4c <_cleanup_r>:
 8006c4c:	4901      	ldr	r1, [pc, #4]	; (8006c54 <_cleanup_r+0x8>)
 8006c4e:	f000 b8af 	b.w	8006db0 <_fwalk_reent>
 8006c52:	bf00      	nop
 8006c54:	08006b8d 	.word	0x08006b8d

08006c58 <__sfmoreglue>:
 8006c58:	2268      	movs	r2, #104	; 0x68
 8006c5a:	b570      	push	{r4, r5, r6, lr}
 8006c5c:	1e4d      	subs	r5, r1, #1
 8006c5e:	4355      	muls	r5, r2
 8006c60:	460e      	mov	r6, r1
 8006c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c66:	f7ff fa6b 	bl	8006140 <_malloc_r>
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	b140      	cbz	r0, 8006c80 <__sfmoreglue+0x28>
 8006c6e:	2100      	movs	r1, #0
 8006c70:	e9c0 1600 	strd	r1, r6, [r0]
 8006c74:	300c      	adds	r0, #12
 8006c76:	60a0      	str	r0, [r4, #8]
 8006c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c7c:	f7fd fb36 	bl	80042ec <memset>
 8006c80:	4620      	mov	r0, r4
 8006c82:	bd70      	pop	{r4, r5, r6, pc}

08006c84 <__sfp_lock_acquire>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sfp_lock_acquire+0x8>)
 8006c86:	f000 b8b3 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	20000379 	.word	0x20000379

08006c90 <__sfp_lock_release>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__sfp_lock_release+0x8>)
 8006c92:	f000 b8ae 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006c96:	bf00      	nop
 8006c98:	20000379 	.word	0x20000379

08006c9c <__sinit_lock_acquire>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__sinit_lock_acquire+0x8>)
 8006c9e:	f000 b8a7 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	2000037a 	.word	0x2000037a

08006ca8 <__sinit_lock_release>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	; (8006cb0 <__sinit_lock_release+0x8>)
 8006caa:	f000 b8a2 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006cae:	bf00      	nop
 8006cb0:	2000037a 	.word	0x2000037a

08006cb4 <__sinit>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	f7ff fff0 	bl	8006c9c <__sinit_lock_acquire>
 8006cbc:	69a3      	ldr	r3, [r4, #24]
 8006cbe:	b11b      	cbz	r3, 8006cc8 <__sinit+0x14>
 8006cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc4:	f7ff bff0 	b.w	8006ca8 <__sinit_lock_release>
 8006cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <__sinit+0x68>)
 8006cd0:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <__sinit+0x6c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	bf08      	it	eq
 8006cda:	2301      	moveq	r3, #1
 8006cdc:	4620      	mov	r0, r4
 8006cde:	bf08      	it	eq
 8006ce0:	61a3      	streq	r3, [r4, #24]
 8006ce2:	f000 f81f 	bl	8006d24 <__sfp>
 8006ce6:	6060      	str	r0, [r4, #4]
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 f81b 	bl	8006d24 <__sfp>
 8006cee:	60a0      	str	r0, [r4, #8]
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 f817 	bl	8006d24 <__sfp>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2104      	movs	r1, #4
 8006cfa:	60e0      	str	r0, [r4, #12]
 8006cfc:	6860      	ldr	r0, [r4, #4]
 8006cfe:	f7ff ff81 	bl	8006c04 <std>
 8006d02:	2201      	movs	r2, #1
 8006d04:	2109      	movs	r1, #9
 8006d06:	68a0      	ldr	r0, [r4, #8]
 8006d08:	f7ff ff7c 	bl	8006c04 <std>
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	2112      	movs	r1, #18
 8006d10:	68e0      	ldr	r0, [r4, #12]
 8006d12:	f7ff ff77 	bl	8006c04 <std>
 8006d16:	2301      	movs	r3, #1
 8006d18:	61a3      	str	r3, [r4, #24]
 8006d1a:	e7d1      	b.n	8006cc0 <__sinit+0xc>
 8006d1c:	08007d6c 	.word	0x08007d6c
 8006d20:	08006c4d 	.word	0x08006c4d

08006d24 <__sfp>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	4607      	mov	r7, r0
 8006d28:	f7ff ffac 	bl	8006c84 <__sfp_lock_acquire>
 8006d2c:	4b1e      	ldr	r3, [pc, #120]	; (8006da8 <__sfp+0x84>)
 8006d2e:	681e      	ldr	r6, [r3, #0]
 8006d30:	69b3      	ldr	r3, [r6, #24]
 8006d32:	b913      	cbnz	r3, 8006d3a <__sfp+0x16>
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ffbd 	bl	8006cb4 <__sinit>
 8006d3a:	3648      	adds	r6, #72	; 0x48
 8006d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	d503      	bpl.n	8006d4c <__sfp+0x28>
 8006d44:	6833      	ldr	r3, [r6, #0]
 8006d46:	b30b      	cbz	r3, 8006d8c <__sfp+0x68>
 8006d48:	6836      	ldr	r6, [r6, #0]
 8006d4a:	e7f7      	b.n	8006d3c <__sfp+0x18>
 8006d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d50:	b9d5      	cbnz	r5, 8006d88 <__sfp+0x64>
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <__sfp+0x88>)
 8006d54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d58:	60e3      	str	r3, [r4, #12]
 8006d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d5c:	f000 f847 	bl	8006dee <__retarget_lock_init_recursive>
 8006d60:	f7ff ff96 	bl	8006c90 <__sfp_lock_release>
 8006d64:	2208      	movs	r2, #8
 8006d66:	4629      	mov	r1, r5
 8006d68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d70:	6025      	str	r5, [r4, #0]
 8006d72:	61a5      	str	r5, [r4, #24]
 8006d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d78:	f7fd fab8 	bl	80042ec <memset>
 8006d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d84:	4620      	mov	r0, r4
 8006d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d88:	3468      	adds	r4, #104	; 0x68
 8006d8a:	e7d9      	b.n	8006d40 <__sfp+0x1c>
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7ff ff62 	bl	8006c58 <__sfmoreglue>
 8006d94:	4604      	mov	r4, r0
 8006d96:	6030      	str	r0, [r6, #0]
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d1d5      	bne.n	8006d48 <__sfp+0x24>
 8006d9c:	f7ff ff78 	bl	8006c90 <__sfp_lock_release>
 8006da0:	230c      	movs	r3, #12
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	e7ee      	b.n	8006d84 <__sfp+0x60>
 8006da6:	bf00      	nop
 8006da8:	08007d6c 	.word	0x08007d6c
 8006dac:	ffff0001 	.word	0xffff0001

08006db0 <_fwalk_reent>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	4606      	mov	r6, r0
 8006db6:	4688      	mov	r8, r1
 8006db8:	2700      	movs	r7, #0
 8006dba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc6:	d505      	bpl.n	8006dd4 <_fwalk_reent+0x24>
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	d1f7      	bne.n	8006dbe <_fwalk_reent+0xe>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd4:	89ab      	ldrh	r3, [r5, #12]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d907      	bls.n	8006dea <_fwalk_reent+0x3a>
 8006dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dde:	3301      	adds	r3, #1
 8006de0:	d003      	beq.n	8006dea <_fwalk_reent+0x3a>
 8006de2:	4629      	mov	r1, r5
 8006de4:	4630      	mov	r0, r6
 8006de6:	47c0      	blx	r8
 8006de8:	4307      	orrs	r7, r0
 8006dea:	3568      	adds	r5, #104	; 0x68
 8006dec:	e7e9      	b.n	8006dc2 <_fwalk_reent+0x12>

08006dee <__retarget_lock_init_recursive>:
 8006dee:	4770      	bx	lr

08006df0 <__retarget_lock_acquire_recursive>:
 8006df0:	4770      	bx	lr

08006df2 <__retarget_lock_release_recursive>:
 8006df2:	4770      	bx	lr

08006df4 <__swhatbuf_r>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	460e      	mov	r6, r1
 8006df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	461d      	mov	r5, r3
 8006e02:	b096      	sub	sp, #88	; 0x58
 8006e04:	da08      	bge.n	8006e18 <__swhatbuf_r+0x24>
 8006e06:	2200      	movs	r2, #0
 8006e08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	061a      	lsls	r2, r3, #24
 8006e10:	d410      	bmi.n	8006e34 <__swhatbuf_r+0x40>
 8006e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e16:	e00e      	b.n	8006e36 <__swhatbuf_r+0x42>
 8006e18:	466a      	mov	r2, sp
 8006e1a:	f000 f903 	bl	8007024 <_fstat_r>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	dbf1      	blt.n	8006e06 <__swhatbuf_r+0x12>
 8006e22:	9a01      	ldr	r2, [sp, #4]
 8006e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e2c:	425a      	negs	r2, r3
 8006e2e:	415a      	adcs	r2, r3
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	e7ee      	b.n	8006e12 <__swhatbuf_r+0x1e>
 8006e34:	2340      	movs	r3, #64	; 0x40
 8006e36:	2000      	movs	r0, #0
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	b016      	add	sp, #88	; 0x58
 8006e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e40 <__smakebuf_r>:
 8006e40:	898b      	ldrh	r3, [r1, #12]
 8006e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e44:	079d      	lsls	r5, r3, #30
 8006e46:	4606      	mov	r6, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	d507      	bpl.n	8006e5c <__smakebuf_r+0x1c>
 8006e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	2301      	movs	r3, #1
 8006e56:	6163      	str	r3, [r4, #20]
 8006e58:	b002      	add	sp, #8
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	466a      	mov	r2, sp
 8006e5e:	ab01      	add	r3, sp, #4
 8006e60:	f7ff ffc8 	bl	8006df4 <__swhatbuf_r>
 8006e64:	9900      	ldr	r1, [sp, #0]
 8006e66:	4605      	mov	r5, r0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff f969 	bl	8006140 <_malloc_r>
 8006e6e:	b948      	cbnz	r0, 8006e84 <__smakebuf_r+0x44>
 8006e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e74:	059a      	lsls	r2, r3, #22
 8006e76:	d4ef      	bmi.n	8006e58 <__smakebuf_r+0x18>
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	e7e3      	b.n	8006e4c <__smakebuf_r+0xc>
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <__smakebuf_r+0x7c>)
 8006e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	6020      	str	r0, [r4, #0]
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	6120      	str	r0, [r4, #16]
 8006e96:	6163      	str	r3, [r4, #20]
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	b15b      	cbz	r3, 8006eb4 <__smakebuf_r+0x74>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea2:	f000 f8d1 	bl	8007048 <_isatty_r>
 8006ea6:	b128      	cbz	r0, 8006eb4 <__smakebuf_r+0x74>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	89a0      	ldrh	r0, [r4, #12]
 8006eb6:	4305      	orrs	r5, r0
 8006eb8:	81a5      	strh	r5, [r4, #12]
 8006eba:	e7cd      	b.n	8006e58 <__smakebuf_r+0x18>
 8006ebc:	08006c4d 	.word	0x08006c4d

08006ec0 <_malloc_usable_size_r>:
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f18      	subs	r0, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfbc      	itt	lt
 8006eca:	580b      	ldrlt	r3, [r1, r0]
 8006ecc:	18c0      	addlt	r0, r0, r3
 8006ece:	4770      	bx	lr

08006ed0 <_raise_r>:
 8006ed0:	291f      	cmp	r1, #31
 8006ed2:	b538      	push	{r3, r4, r5, lr}
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	d904      	bls.n	8006ee4 <_raise_r+0x14>
 8006eda:	2316      	movs	r3, #22
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ee6:	b112      	cbz	r2, 8006eee <_raise_r+0x1e>
 8006ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eec:	b94b      	cbnz	r3, 8006f02 <_raise_r+0x32>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f830 	bl	8006f54 <_getpid_r>
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efe:	f000 b817 	b.w	8006f30 <_kill_r>
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d00a      	beq.n	8006f1c <_raise_r+0x4c>
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	d103      	bne.n	8006f12 <_raise_r+0x42>
 8006f0a:	2316      	movs	r3, #22
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	2001      	movs	r0, #1
 8006f10:	e7e7      	b.n	8006ee2 <_raise_r+0x12>
 8006f12:	2400      	movs	r4, #0
 8006f14:	4628      	mov	r0, r5
 8006f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f1a:	4798      	blx	r3
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7e0      	b.n	8006ee2 <_raise_r+0x12>

08006f20 <raise>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <raise+0xc>)
 8006f22:	4601      	mov	r1, r0
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f7ff bfd3 	b.w	8006ed0 <_raise_r>
 8006f2a:	bf00      	nop
 8006f2c:	2000009c 	.word	0x2000009c

08006f30 <_kill_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	2300      	movs	r3, #0
 8006f34:	4d06      	ldr	r5, [pc, #24]	; (8006f50 <_kill_r+0x20>)
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	f7fb f885 	bl	800204c <_kill>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d102      	bne.n	8006f4c <_kill_r+0x1c>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	b103      	cbz	r3, 8006f4c <_kill_r+0x1c>
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000374 	.word	0x20000374

08006f54 <_getpid_r>:
 8006f54:	f7fb b873 	b.w	800203e <_getpid>

08006f58 <__sread>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	f000 f894 	bl	800708c <_read_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	bfab      	itete	ge
 8006f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f6c:	181b      	addge	r3, r3, r0
 8006f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f72:	bfac      	ite	ge
 8006f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f76:	81a3      	strhlt	r3, [r4, #12]
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <__swrite>:
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	461f      	mov	r7, r3
 8006f80:	898b      	ldrh	r3, [r1, #12]
 8006f82:	4605      	mov	r5, r0
 8006f84:	05db      	lsls	r3, r3, #23
 8006f86:	460c      	mov	r4, r1
 8006f88:	4616      	mov	r6, r2
 8006f8a:	d505      	bpl.n	8006f98 <__swrite+0x1e>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	f000 f868 	bl	8007068 <_lseek_r>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	4632      	mov	r2, r6
 8006f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	f000 b817 	b.w	8006fe0 <_write_r>

08006fb2 <__sseek>:
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 f855 	bl	8007068 <_lseek_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	bf15      	itete	ne
 8006fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fce:	81a3      	strheq	r3, [r4, #12]
 8006fd0:	bf18      	it	ne
 8006fd2:	81a3      	strhne	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__sclose>:
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 b813 	b.w	8007004 <_close_r>
	...

08006fe0 <_write_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4d05      	ldr	r5, [pc, #20]	; (8007000 <_write_r+0x20>)
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7fb f863 	bl	80020ba <_write>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_write_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_write_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20000374 	.word	0x20000374

08007004 <_close_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	2300      	movs	r3, #0
 8007008:	4d05      	ldr	r5, [pc, #20]	; (8007020 <_close_r+0x1c>)
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	f7fb f86f 	bl	80020f2 <_close>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_close_r+0x1a>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_close_r+0x1a>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20000374 	.word	0x20000374

08007024 <_fstat_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	2300      	movs	r3, #0
 8007028:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_fstat_r+0x20>)
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	f7fb f869 	bl	8002108 <_fstat>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d102      	bne.n	8007040 <_fstat_r+0x1c>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	b103      	cbz	r3, 8007040 <_fstat_r+0x1c>
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20000374 	.word	0x20000374

08007048 <_isatty_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	2300      	movs	r3, #0
 800704c:	4d05      	ldr	r5, [pc, #20]	; (8007064 <_isatty_r+0x1c>)
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fb f867 	bl	8002126 <_isatty>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_isatty_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_isatty_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000374 	.word	0x20000374

08007068 <_lseek_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	2200      	movs	r2, #0
 8007072:	4d05      	ldr	r5, [pc, #20]	; (8007088 <_lseek_r+0x20>)
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fb f85f 	bl	800213a <_lseek>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_lseek_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_lseek_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000374 	.word	0x20000374

0800708c <_read_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	4611      	mov	r1, r2
 8007094:	2200      	movs	r2, #0
 8007096:	4d05      	ldr	r5, [pc, #20]	; (80070ac <_read_r+0x20>)
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	f7fa fff0 	bl	8002080 <_read>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_read_r+0x1e>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_read_r+0x1e>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20000374 	.word	0x20000374

080070b0 <atan>:
 80070b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	4bb6      	ldr	r3, [pc, #728]	; (8007390 <atan+0x2e0>)
 80070b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80070ba:	429e      	cmp	r6, r3
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	468b      	mov	fp, r1
 80070c2:	dd17      	ble.n	80070f4 <atan+0x44>
 80070c4:	4bb3      	ldr	r3, [pc, #716]	; (8007394 <atan+0x2e4>)
 80070c6:	429e      	cmp	r6, r3
 80070c8:	dc01      	bgt.n	80070ce <atan+0x1e>
 80070ca:	d109      	bne.n	80070e0 <atan+0x30>
 80070cc:	b140      	cbz	r0, 80070e0 <atan+0x30>
 80070ce:	4622      	mov	r2, r4
 80070d0:	462b      	mov	r3, r5
 80070d2:	4620      	mov	r0, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 f8b5 	bl	8000244 <__adddf3>
 80070da:	4604      	mov	r4, r0
 80070dc:	460d      	mov	r5, r1
 80070de:	e005      	b.n	80070ec <atan+0x3c>
 80070e0:	f1bb 0f00 	cmp.w	fp, #0
 80070e4:	4cac      	ldr	r4, [pc, #688]	; (8007398 <atan+0x2e8>)
 80070e6:	f300 8121 	bgt.w	800732c <atan+0x27c>
 80070ea:	4dac      	ldr	r5, [pc, #688]	; (800739c <atan+0x2ec>)
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	4baa      	ldr	r3, [pc, #680]	; (80073a0 <atan+0x2f0>)
 80070f6:	429e      	cmp	r6, r3
 80070f8:	dc11      	bgt.n	800711e <atan+0x6e>
 80070fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80070fe:	429e      	cmp	r6, r3
 8007100:	dc0a      	bgt.n	8007118 <atan+0x68>
 8007102:	a38b      	add	r3, pc, #556	; (adr r3, 8007330 <atan+0x280>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f89c 	bl	8000244 <__adddf3>
 800710c:	2200      	movs	r2, #0
 800710e:	4ba5      	ldr	r3, [pc, #660]	; (80073a4 <atan+0x2f4>)
 8007110:	f7f9 fcde 	bl	8000ad0 <__aeabi_dcmpgt>
 8007114:	2800      	cmp	r0, #0
 8007116:	d1e9      	bne.n	80070ec <atan+0x3c>
 8007118:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800711c:	e027      	b.n	800716e <atan+0xbe>
 800711e:	f000 f951 	bl	80073c4 <fabs>
 8007122:	4ba1      	ldr	r3, [pc, #644]	; (80073a8 <atan+0x2f8>)
 8007124:	4604      	mov	r4, r0
 8007126:	429e      	cmp	r6, r3
 8007128:	460d      	mov	r5, r1
 800712a:	f300 80b8 	bgt.w	800729e <atan+0x1ee>
 800712e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007132:	429e      	cmp	r6, r3
 8007134:	f300 809c 	bgt.w	8007270 <atan+0x1c0>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	f7f9 f882 	bl	8000244 <__adddf3>
 8007140:	2200      	movs	r2, #0
 8007142:	4b98      	ldr	r3, [pc, #608]	; (80073a4 <atan+0x2f4>)
 8007144:	f7f9 f87c 	bl	8000240 <__aeabi_dsub>
 8007148:	2200      	movs	r2, #0
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007152:	4620      	mov	r0, r4
 8007154:	4629      	mov	r1, r5
 8007156:	f7f9 f875 	bl	8000244 <__adddf3>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 fb4f 	bl	8000804 <__aeabi_ddiv>
 8007166:	f04f 0a00 	mov.w	sl, #0
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	4622      	mov	r2, r4
 8007170:	462b      	mov	r3, r5
 8007172:	4620      	mov	r0, r4
 8007174:	4629      	mov	r1, r5
 8007176:	f7f9 fa1b 	bl	80005b0 <__aeabi_dmul>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4680      	mov	r8, r0
 8007180:	4689      	mov	r9, r1
 8007182:	f7f9 fa15 	bl	80005b0 <__aeabi_dmul>
 8007186:	a36c      	add	r3, pc, #432	; (adr r3, 8007338 <atan+0x288>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	4606      	mov	r6, r0
 800718e:	460f      	mov	r7, r1
 8007190:	f7f9 fa0e 	bl	80005b0 <__aeabi_dmul>
 8007194:	a36a      	add	r3, pc, #424	; (adr r3, 8007340 <atan+0x290>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 f853 	bl	8000244 <__adddf3>
 800719e:	4632      	mov	r2, r6
 80071a0:	463b      	mov	r3, r7
 80071a2:	f7f9 fa05 	bl	80005b0 <__aeabi_dmul>
 80071a6:	a368      	add	r3, pc, #416	; (adr r3, 8007348 <atan+0x298>)
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f7f9 f84a 	bl	8000244 <__adddf3>
 80071b0:	4632      	mov	r2, r6
 80071b2:	463b      	mov	r3, r7
 80071b4:	f7f9 f9fc 	bl	80005b0 <__aeabi_dmul>
 80071b8:	a365      	add	r3, pc, #404	; (adr r3, 8007350 <atan+0x2a0>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f9 f841 	bl	8000244 <__adddf3>
 80071c2:	4632      	mov	r2, r6
 80071c4:	463b      	mov	r3, r7
 80071c6:	f7f9 f9f3 	bl	80005b0 <__aeabi_dmul>
 80071ca:	a363      	add	r3, pc, #396	; (adr r3, 8007358 <atan+0x2a8>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 f838 	bl	8000244 <__adddf3>
 80071d4:	4632      	mov	r2, r6
 80071d6:	463b      	mov	r3, r7
 80071d8:	f7f9 f9ea 	bl	80005b0 <__aeabi_dmul>
 80071dc:	a360      	add	r3, pc, #384	; (adr r3, 8007360 <atan+0x2b0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 f82f 	bl	8000244 <__adddf3>
 80071e6:	4642      	mov	r2, r8
 80071e8:	464b      	mov	r3, r9
 80071ea:	f7f9 f9e1 	bl	80005b0 <__aeabi_dmul>
 80071ee:	a35e      	add	r3, pc, #376	; (adr r3, 8007368 <atan+0x2b8>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	4680      	mov	r8, r0
 80071f6:	4689      	mov	r9, r1
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 f9d8 	bl	80005b0 <__aeabi_dmul>
 8007200:	a35b      	add	r3, pc, #364	; (adr r3, 8007370 <atan+0x2c0>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f9 f81b 	bl	8000240 <__aeabi_dsub>
 800720a:	4632      	mov	r2, r6
 800720c:	463b      	mov	r3, r7
 800720e:	f7f9 f9cf 	bl	80005b0 <__aeabi_dmul>
 8007212:	a359      	add	r3, pc, #356	; (adr r3, 8007378 <atan+0x2c8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f812 	bl	8000240 <__aeabi_dsub>
 800721c:	4632      	mov	r2, r6
 800721e:	463b      	mov	r3, r7
 8007220:	f7f9 f9c6 	bl	80005b0 <__aeabi_dmul>
 8007224:	a356      	add	r3, pc, #344	; (adr r3, 8007380 <atan+0x2d0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f809 	bl	8000240 <__aeabi_dsub>
 800722e:	4632      	mov	r2, r6
 8007230:	463b      	mov	r3, r7
 8007232:	f7f9 f9bd 	bl	80005b0 <__aeabi_dmul>
 8007236:	a354      	add	r3, pc, #336	; (adr r3, 8007388 <atan+0x2d8>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 f800 	bl	8000240 <__aeabi_dsub>
 8007240:	4632      	mov	r2, r6
 8007242:	463b      	mov	r3, r7
 8007244:	f7f9 f9b4 	bl	80005b0 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f8 fff8 	bl	8000244 <__adddf3>
 8007254:	4622      	mov	r2, r4
 8007256:	462b      	mov	r3, r5
 8007258:	f7f9 f9aa 	bl	80005b0 <__aeabi_dmul>
 800725c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	d144      	bne.n	80072f0 <atan+0x240>
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f8 ffe9 	bl	8000240 <__aeabi_dsub>
 800726e:	e734      	b.n	80070da <atan+0x2a>
 8007270:	2200      	movs	r2, #0
 8007272:	4b4c      	ldr	r3, [pc, #304]	; (80073a4 <atan+0x2f4>)
 8007274:	f7f8 ffe4 	bl	8000240 <__aeabi_dsub>
 8007278:	2200      	movs	r2, #0
 800727a:	4606      	mov	r6, r0
 800727c:	460f      	mov	r7, r1
 800727e:	4620      	mov	r0, r4
 8007280:	4629      	mov	r1, r5
 8007282:	4b48      	ldr	r3, [pc, #288]	; (80073a4 <atan+0x2f4>)
 8007284:	f7f8 ffde 	bl	8000244 <__adddf3>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4630      	mov	r0, r6
 800728e:	4639      	mov	r1, r7
 8007290:	f7f9 fab8 	bl	8000804 <__aeabi_ddiv>
 8007294:	f04f 0a01 	mov.w	sl, #1
 8007298:	4604      	mov	r4, r0
 800729a:	460d      	mov	r5, r1
 800729c:	e767      	b.n	800716e <atan+0xbe>
 800729e:	4b43      	ldr	r3, [pc, #268]	; (80073ac <atan+0x2fc>)
 80072a0:	429e      	cmp	r6, r3
 80072a2:	da1a      	bge.n	80072da <atan+0x22a>
 80072a4:	2200      	movs	r2, #0
 80072a6:	4b42      	ldr	r3, [pc, #264]	; (80073b0 <atan+0x300>)
 80072a8:	f7f8 ffca 	bl	8000240 <__aeabi_dsub>
 80072ac:	2200      	movs	r2, #0
 80072ae:	4606      	mov	r6, r0
 80072b0:	460f      	mov	r7, r1
 80072b2:	4620      	mov	r0, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	4b3e      	ldr	r3, [pc, #248]	; (80073b0 <atan+0x300>)
 80072b8:	f7f9 f97a 	bl	80005b0 <__aeabi_dmul>
 80072bc:	2200      	movs	r2, #0
 80072be:	4b39      	ldr	r3, [pc, #228]	; (80073a4 <atan+0x2f4>)
 80072c0:	f7f8 ffc0 	bl	8000244 <__adddf3>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f7f9 fa9a 	bl	8000804 <__aeabi_ddiv>
 80072d0:	f04f 0a02 	mov.w	sl, #2
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	e749      	b.n	800716e <atan+0xbe>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	2000      	movs	r0, #0
 80072e0:	4934      	ldr	r1, [pc, #208]	; (80073b4 <atan+0x304>)
 80072e2:	f7f9 fa8f 	bl	8000804 <__aeabi_ddiv>
 80072e6:	f04f 0a03 	mov.w	sl, #3
 80072ea:	4604      	mov	r4, r0
 80072ec:	460d      	mov	r5, r1
 80072ee:	e73e      	b.n	800716e <atan+0xbe>
 80072f0:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <atan+0x308>)
 80072f2:	4e32      	ldr	r6, [pc, #200]	; (80073bc <atan+0x30c>)
 80072f4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80072f8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80072fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007300:	f7f8 ff9e 	bl	8000240 <__aeabi_dsub>
 8007304:	4622      	mov	r2, r4
 8007306:	462b      	mov	r3, r5
 8007308:	f7f8 ff9a 	bl	8000240 <__aeabi_dsub>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007314:	f7f8 ff94 	bl	8000240 <__aeabi_dsub>
 8007318:	f1bb 0f00 	cmp.w	fp, #0
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	f6bf aee4 	bge.w	80070ec <atan+0x3c>
 8007324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007328:	461d      	mov	r5, r3
 800732a:	e6df      	b.n	80070ec <atan+0x3c>
 800732c:	4d24      	ldr	r5, [pc, #144]	; (80073c0 <atan+0x310>)
 800732e:	e6dd      	b.n	80070ec <atan+0x3c>
 8007330:	8800759c 	.word	0x8800759c
 8007334:	7e37e43c 	.word	0x7e37e43c
 8007338:	e322da11 	.word	0xe322da11
 800733c:	3f90ad3a 	.word	0x3f90ad3a
 8007340:	24760deb 	.word	0x24760deb
 8007344:	3fa97b4b 	.word	0x3fa97b4b
 8007348:	a0d03d51 	.word	0xa0d03d51
 800734c:	3fb10d66 	.word	0x3fb10d66
 8007350:	c54c206e 	.word	0xc54c206e
 8007354:	3fb745cd 	.word	0x3fb745cd
 8007358:	920083ff 	.word	0x920083ff
 800735c:	3fc24924 	.word	0x3fc24924
 8007360:	5555550d 	.word	0x5555550d
 8007364:	3fd55555 	.word	0x3fd55555
 8007368:	2c6a6c2f 	.word	0x2c6a6c2f
 800736c:	bfa2b444 	.word	0xbfa2b444
 8007370:	52defd9a 	.word	0x52defd9a
 8007374:	3fadde2d 	.word	0x3fadde2d
 8007378:	af749a6d 	.word	0xaf749a6d
 800737c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007380:	fe231671 	.word	0xfe231671
 8007384:	3fbc71c6 	.word	0x3fbc71c6
 8007388:	9998ebc4 	.word	0x9998ebc4
 800738c:	3fc99999 	.word	0x3fc99999
 8007390:	440fffff 	.word	0x440fffff
 8007394:	7ff00000 	.word	0x7ff00000
 8007398:	54442d18 	.word	0x54442d18
 800739c:	bff921fb 	.word	0xbff921fb
 80073a0:	3fdbffff 	.word	0x3fdbffff
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	3ff2ffff 	.word	0x3ff2ffff
 80073ac:	40038000 	.word	0x40038000
 80073b0:	3ff80000 	.word	0x3ff80000
 80073b4:	bff00000 	.word	0xbff00000
 80073b8:	08008168 	.word	0x08008168
 80073bc:	08008148 	.word	0x08008148
 80073c0:	3ff921fb 	.word	0x3ff921fb

080073c4 <fabs>:
 80073c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073c8:	4770      	bx	lr

080073ca <atan2>:
 80073ca:	f000 b825 	b.w	8007418 <__ieee754_atan2>

080073ce <sqrt>:
 80073ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d0:	4606      	mov	r6, r0
 80073d2:	460f      	mov	r7, r1
 80073d4:	f000 f8f2 	bl	80075bc <__ieee754_sqrt>
 80073d8:	4632      	mov	r2, r6
 80073da:	4604      	mov	r4, r0
 80073dc:	460d      	mov	r5, r1
 80073de:	463b      	mov	r3, r7
 80073e0:	4630      	mov	r0, r6
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f9 fb7e 	bl	8000ae4 <__aeabi_dcmpun>
 80073e8:	b990      	cbnz	r0, 8007410 <sqrt+0x42>
 80073ea:	2200      	movs	r2, #0
 80073ec:	2300      	movs	r3, #0
 80073ee:	4630      	mov	r0, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	f7f9 fb4f 	bl	8000a94 <__aeabi_dcmplt>
 80073f6:	b158      	cbz	r0, 8007410 <sqrt+0x42>
 80073f8:	f7fc ff4e 	bl	8004298 <__errno>
 80073fc:	2321      	movs	r3, #33	; 0x21
 80073fe:	2200      	movs	r2, #0
 8007400:	6003      	str	r3, [r0, #0]
 8007402:	2300      	movs	r3, #0
 8007404:	4610      	mov	r0, r2
 8007406:	4619      	mov	r1, r3
 8007408:	f7f9 f9fc 	bl	8000804 <__aeabi_ddiv>
 800740c:	4604      	mov	r4, r0
 800740e:	460d      	mov	r5, r1
 8007410:	4620      	mov	r0, r4
 8007412:	4629      	mov	r1, r5
 8007414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007418 <__ieee754_atan2>:
 8007418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	4692      	mov	sl, r2
 800741e:	4699      	mov	r9, r3
 8007420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007424:	461f      	mov	r7, r3
 8007426:	f1ca 0300 	rsb	r3, sl, #0
 800742a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80075b0 <__ieee754_atan2+0x198>
 800742e:	ea43 030a 	orr.w	r3, r3, sl
 8007432:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007436:	4573      	cmp	r3, lr
 8007438:	4604      	mov	r4, r0
 800743a:	460d      	mov	r5, r1
 800743c:	d808      	bhi.n	8007450 <__ieee754_atan2+0x38>
 800743e:	4246      	negs	r6, r0
 8007440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007444:	4306      	orrs	r6, r0
 8007446:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800744a:	4576      	cmp	r6, lr
 800744c:	468c      	mov	ip, r1
 800744e:	d908      	bls.n	8007462 <__ieee754_atan2+0x4a>
 8007450:	4652      	mov	r2, sl
 8007452:	464b      	mov	r3, r9
 8007454:	4620      	mov	r0, r4
 8007456:	4629      	mov	r1, r5
 8007458:	f7f8 fef4 	bl	8000244 <__adddf3>
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	e019      	b.n	8007496 <__ieee754_atan2+0x7e>
 8007462:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007466:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800746a:	ea56 060a 	orrs.w	r6, r6, sl
 800746e:	d103      	bne.n	8007478 <__ieee754_atan2+0x60>
 8007470:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	f7ff be1c 	b.w	80070b0 <atan>
 8007478:	17be      	asrs	r6, r7, #30
 800747a:	f006 0602 	and.w	r6, r6, #2
 800747e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007482:	ea53 0100 	orrs.w	r1, r3, r0
 8007486:	d10a      	bne.n	800749e <__ieee754_atan2+0x86>
 8007488:	2e02      	cmp	r6, #2
 800748a:	d067      	beq.n	800755c <__ieee754_atan2+0x144>
 800748c:	2e03      	cmp	r6, #3
 800748e:	d102      	bne.n	8007496 <__ieee754_atan2+0x7e>
 8007490:	a53b      	add	r5, pc, #236	; (adr r5, 8007580 <__ieee754_atan2+0x168>)
 8007492:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749e:	ea52 010a 	orrs.w	r1, r2, sl
 80074a2:	d106      	bne.n	80074b2 <__ieee754_atan2+0x9a>
 80074a4:	f1bc 0f00 	cmp.w	ip, #0
 80074a8:	da63      	bge.n	8007572 <__ieee754_atan2+0x15a>
 80074aa:	a537      	add	r5, pc, #220	; (adr r5, 8007588 <__ieee754_atan2+0x170>)
 80074ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074b0:	e7f1      	b.n	8007496 <__ieee754_atan2+0x7e>
 80074b2:	4572      	cmp	r2, lr
 80074b4:	d10f      	bne.n	80074d6 <__ieee754_atan2+0xbe>
 80074b6:	4293      	cmp	r3, r2
 80074b8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80074bc:	d107      	bne.n	80074ce <__ieee754_atan2+0xb6>
 80074be:	2e02      	cmp	r6, #2
 80074c0:	d850      	bhi.n	8007564 <__ieee754_atan2+0x14c>
 80074c2:	4b3c      	ldr	r3, [pc, #240]	; (80075b4 <__ieee754_atan2+0x19c>)
 80074c4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80074c8:	e9d6 4500 	ldrd	r4, r5, [r6]
 80074cc:	e7e3      	b.n	8007496 <__ieee754_atan2+0x7e>
 80074ce:	2e02      	cmp	r6, #2
 80074d0:	d84c      	bhi.n	800756c <__ieee754_atan2+0x154>
 80074d2:	4b39      	ldr	r3, [pc, #228]	; (80075b8 <__ieee754_atan2+0x1a0>)
 80074d4:	e7f6      	b.n	80074c4 <__ieee754_atan2+0xac>
 80074d6:	4573      	cmp	r3, lr
 80074d8:	d0e4      	beq.n	80074a4 <__ieee754_atan2+0x8c>
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80074e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074e4:	da20      	bge.n	8007528 <__ieee754_atan2+0x110>
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	da01      	bge.n	80074ee <__ieee754_atan2+0xd6>
 80074ea:	323c      	adds	r2, #60	; 0x3c
 80074ec:	db20      	blt.n	8007530 <__ieee754_atan2+0x118>
 80074ee:	4652      	mov	r2, sl
 80074f0:	464b      	mov	r3, r9
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 f985 	bl	8000804 <__aeabi_ddiv>
 80074fa:	f7ff ff63 	bl	80073c4 <fabs>
 80074fe:	f7ff fdd7 	bl	80070b0 <atan>
 8007502:	4604      	mov	r4, r0
 8007504:	460d      	mov	r5, r1
 8007506:	2e01      	cmp	r6, #1
 8007508:	d015      	beq.n	8007536 <__ieee754_atan2+0x11e>
 800750a:	2e02      	cmp	r6, #2
 800750c:	d017      	beq.n	800753e <__ieee754_atan2+0x126>
 800750e:	2e00      	cmp	r6, #0
 8007510:	d0c1      	beq.n	8007496 <__ieee754_atan2+0x7e>
 8007512:	a31f      	add	r3, pc, #124	; (adr r3, 8007590 <__ieee754_atan2+0x178>)
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	4620      	mov	r0, r4
 800751a:	4629      	mov	r1, r5
 800751c:	f7f8 fe90 	bl	8000240 <__aeabi_dsub>
 8007520:	a31d      	add	r3, pc, #116	; (adr r3, 8007598 <__ieee754_atan2+0x180>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	e016      	b.n	8007556 <__ieee754_atan2+0x13e>
 8007528:	a51d      	add	r5, pc, #116	; (adr r5, 80075a0 <__ieee754_atan2+0x188>)
 800752a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800752e:	e7ea      	b.n	8007506 <__ieee754_atan2+0xee>
 8007530:	2400      	movs	r4, #0
 8007532:	2500      	movs	r5, #0
 8007534:	e7e7      	b.n	8007506 <__ieee754_atan2+0xee>
 8007536:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800753a:	461d      	mov	r5, r3
 800753c:	e7ab      	b.n	8007496 <__ieee754_atan2+0x7e>
 800753e:	a314      	add	r3, pc, #80	; (adr r3, 8007590 <__ieee754_atan2+0x178>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	4620      	mov	r0, r4
 8007546:	4629      	mov	r1, r5
 8007548:	f7f8 fe7a 	bl	8000240 <__aeabi_dsub>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	a111      	add	r1, pc, #68	; (adr r1, 8007598 <__ieee754_atan2+0x180>)
 8007552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007556:	f7f8 fe73 	bl	8000240 <__aeabi_dsub>
 800755a:	e77f      	b.n	800745c <__ieee754_atan2+0x44>
 800755c:	a50e      	add	r5, pc, #56	; (adr r5, 8007598 <__ieee754_atan2+0x180>)
 800755e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007562:	e798      	b.n	8007496 <__ieee754_atan2+0x7e>
 8007564:	a510      	add	r5, pc, #64	; (adr r5, 80075a8 <__ieee754_atan2+0x190>)
 8007566:	e9d5 4500 	ldrd	r4, r5, [r5]
 800756a:	e794      	b.n	8007496 <__ieee754_atan2+0x7e>
 800756c:	2400      	movs	r4, #0
 800756e:	2500      	movs	r5, #0
 8007570:	e791      	b.n	8007496 <__ieee754_atan2+0x7e>
 8007572:	a50b      	add	r5, pc, #44	; (adr r5, 80075a0 <__ieee754_atan2+0x188>)
 8007574:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007578:	e78d      	b.n	8007496 <__ieee754_atan2+0x7e>
 800757a:	bf00      	nop
 800757c:	f3af 8000 	nop.w
 8007580:	54442d18 	.word	0x54442d18
 8007584:	c00921fb 	.word	0xc00921fb
 8007588:	54442d18 	.word	0x54442d18
 800758c:	bff921fb 	.word	0xbff921fb
 8007590:	33145c07 	.word	0x33145c07
 8007594:	3ca1a626 	.word	0x3ca1a626
 8007598:	54442d18 	.word	0x54442d18
 800759c:	400921fb 	.word	0x400921fb
 80075a0:	54442d18 	.word	0x54442d18
 80075a4:	3ff921fb 	.word	0x3ff921fb
 80075a8:	54442d18 	.word	0x54442d18
 80075ac:	3fe921fb 	.word	0x3fe921fb
 80075b0:	7ff00000 	.word	0x7ff00000
 80075b4:	08008188 	.word	0x08008188
 80075b8:	080081a0 	.word	0x080081a0

080075bc <__ieee754_sqrt>:
 80075bc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007718 <__ieee754_sqrt+0x15c>
 80075c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80075c8:	4606      	mov	r6, r0
 80075ca:	460d      	mov	r5, r1
 80075cc:	460c      	mov	r4, r1
 80075ce:	460a      	mov	r2, r1
 80075d0:	4607      	mov	r7, r0
 80075d2:	4603      	mov	r3, r0
 80075d4:	d10f      	bne.n	80075f6 <__ieee754_sqrt+0x3a>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	f7f8 ffe9 	bl	80005b0 <__aeabi_dmul>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4630      	mov	r0, r6
 80075e4:	4629      	mov	r1, r5
 80075e6:	f7f8 fe2d 	bl	8000244 <__adddf3>
 80075ea:	4606      	mov	r6, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	4630      	mov	r0, r6
 80075f0:	4629      	mov	r1, r5
 80075f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f6:	2900      	cmp	r1, #0
 80075f8:	dc0e      	bgt.n	8007618 <__ieee754_sqrt+0x5c>
 80075fa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80075fe:	ea5c 0707 	orrs.w	r7, ip, r7
 8007602:	d0f4      	beq.n	80075ee <__ieee754_sqrt+0x32>
 8007604:	b141      	cbz	r1, 8007618 <__ieee754_sqrt+0x5c>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	f7f8 fe19 	bl	8000240 <__aeabi_dsub>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	f7f9 f8f7 	bl	8000804 <__aeabi_ddiv>
 8007616:	e7e8      	b.n	80075ea <__ieee754_sqrt+0x2e>
 8007618:	1521      	asrs	r1, r4, #20
 800761a:	d075      	beq.n	8007708 <__ieee754_sqrt+0x14c>
 800761c:	07cc      	lsls	r4, r1, #31
 800761e:	f04f 0400 	mov.w	r4, #0
 8007622:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007626:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800762a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800762e:	bf5e      	ittt	pl
 8007630:	0fd9      	lsrpl	r1, r3, #31
 8007632:	005b      	lslpl	r3, r3, #1
 8007634:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007638:	0fd9      	lsrs	r1, r3, #31
 800763a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800763e:	2516      	movs	r5, #22
 8007640:	4620      	mov	r0, r4
 8007642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007646:	107f      	asrs	r7, r7, #1
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	1846      	adds	r6, r0, r1
 800764c:	4296      	cmp	r6, r2
 800764e:	bfde      	ittt	le
 8007650:	1b92      	suble	r2, r2, r6
 8007652:	1870      	addle	r0, r6, r1
 8007654:	1864      	addle	r4, r4, r1
 8007656:	0052      	lsls	r2, r2, #1
 8007658:	3d01      	subs	r5, #1
 800765a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800765e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007662:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007666:	d1f0      	bne.n	800764a <__ieee754_sqrt+0x8e>
 8007668:	4629      	mov	r1, r5
 800766a:	f04f 0e20 	mov.w	lr, #32
 800766e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007672:	4282      	cmp	r2, r0
 8007674:	eb06 0c05 	add.w	ip, r6, r5
 8007678:	dc02      	bgt.n	8007680 <__ieee754_sqrt+0xc4>
 800767a:	d113      	bne.n	80076a4 <__ieee754_sqrt+0xe8>
 800767c:	459c      	cmp	ip, r3
 800767e:	d811      	bhi.n	80076a4 <__ieee754_sqrt+0xe8>
 8007680:	f1bc 0f00 	cmp.w	ip, #0
 8007684:	eb0c 0506 	add.w	r5, ip, r6
 8007688:	da43      	bge.n	8007712 <__ieee754_sqrt+0x156>
 800768a:	2d00      	cmp	r5, #0
 800768c:	db41      	blt.n	8007712 <__ieee754_sqrt+0x156>
 800768e:	f100 0801 	add.w	r8, r0, #1
 8007692:	1a12      	subs	r2, r2, r0
 8007694:	4640      	mov	r0, r8
 8007696:	459c      	cmp	ip, r3
 8007698:	bf88      	it	hi
 800769a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800769e:	eba3 030c 	sub.w	r3, r3, ip
 80076a2:	4431      	add	r1, r6
 80076a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80076a8:	f1be 0e01 	subs.w	lr, lr, #1
 80076ac:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80076b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80076b8:	d1db      	bne.n	8007672 <__ieee754_sqrt+0xb6>
 80076ba:	4313      	orrs	r3, r2
 80076bc:	d006      	beq.n	80076cc <__ieee754_sqrt+0x110>
 80076be:	1c48      	adds	r0, r1, #1
 80076c0:	bf0b      	itete	eq
 80076c2:	4671      	moveq	r1, lr
 80076c4:	3101      	addne	r1, #1
 80076c6:	3401      	addeq	r4, #1
 80076c8:	f021 0101 	bicne.w	r1, r1, #1
 80076cc:	1063      	asrs	r3, r4, #1
 80076ce:	0849      	lsrs	r1, r1, #1
 80076d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80076d4:	07e2      	lsls	r2, r4, #31
 80076d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80076da:	bf48      	it	mi
 80076dc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80076e0:	460e      	mov	r6, r1
 80076e2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80076e6:	e782      	b.n	80075ee <__ieee754_sqrt+0x32>
 80076e8:	0ada      	lsrs	r2, r3, #11
 80076ea:	3815      	subs	r0, #21
 80076ec:	055b      	lsls	r3, r3, #21
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d0fa      	beq.n	80076e8 <__ieee754_sqrt+0x12c>
 80076f2:	02d5      	lsls	r5, r2, #11
 80076f4:	d50a      	bpl.n	800770c <__ieee754_sqrt+0x150>
 80076f6:	f1c1 0420 	rsb	r4, r1, #32
 80076fa:	fa23 f404 	lsr.w	r4, r3, r4
 80076fe:	1e4d      	subs	r5, r1, #1
 8007700:	408b      	lsls	r3, r1
 8007702:	4322      	orrs	r2, r4
 8007704:	1b41      	subs	r1, r0, r5
 8007706:	e789      	b.n	800761c <__ieee754_sqrt+0x60>
 8007708:	4608      	mov	r0, r1
 800770a:	e7f0      	b.n	80076ee <__ieee754_sqrt+0x132>
 800770c:	0052      	lsls	r2, r2, #1
 800770e:	3101      	adds	r1, #1
 8007710:	e7ef      	b.n	80076f2 <__ieee754_sqrt+0x136>
 8007712:	4680      	mov	r8, r0
 8007714:	e7bd      	b.n	8007692 <__ieee754_sqrt+0xd6>
 8007716:	bf00      	nop
 8007718:	7ff00000 	.word	0x7ff00000

0800771c <_init>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr

08007728 <_fini>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr
